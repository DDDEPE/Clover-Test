<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sl">

	<!-- ******************************************* -->
	<!-- 급여환경설정-고정월변동수당 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_MONTHLY_CHANGE" parameterType="hashmap" resultType="hashmap">
		SELECT A.SL_BI_MONTHLY_CHANGE_ID
			 , A.COMM_CORPORATION_ID
			 , A.MONTHLY_CHANGE_CODE
             , A.PAY_ITEM_CODE
			 , SL_UTIL_PKG.pay_name2(#{v_corporation_id}, A.PAY_ITEM_CODE, #{v_lang_code})	AS PAY_ITEM_NAME
		  FROM SL_BI_MONTHLY_CHANGE A
		 WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
	</select>
	<!-- ******************************************* -->
	<!-- 급여환경설정-고정월변동수당 저장 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_MONTHLY_CHANGE_PROC" parameterType="hashmap">
		MERGE INTO SL_BI_MONTHLY_CHANGE
			 USING DUAL
				ON (COMM_CORPORATION_ID = #{COMM_CORPORATION_ID}
				AND MONTHLY_CHANGE_CODE = #{MONTHLY_CHANGE_CODE})
			WHEN MATCHED THEN
		    	UPDATE SET PAY_ITEM_CODE = #{PAY_ITEM_CODE}
		    			 , AMNBY = #{AMNBY}
		    			 , AMNIP = #{AMNIP}
		    			 , AMNDT = SYSDATE
			WHEN NOT MATCHED THEN
				INSERT(SL_BI_MONTHLY_CHANGE_ID
					 , COMM_CORPORATION_ID
					 , MONTHLY_CHANGE_CODE
					 , PAY_ITEM_CODE
					 , CRTBY
					 , CRTIP
					 , CRTDT
					 , AMNBY
					 , AMNIP
					 , AMNDT)
				VALUES(SL_BI_MONTHLY_CHANGE_S.NEXTVAL
					  , #{COMM_CORPORATION_ID}
					  , #{MONTHLY_CHANGE_CODE}
					  , #{PAY_ITEM_CODE}
					  , #{CRTBY}
					  , #{CRTIP}
					  , SYSDATE
					  , #{AMNBY}
					  , #{AMNIP}
					  , SYSDATE)
	</insert>

	<!-- ******************************************* -->
	<!-- 급여항목 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_CODE_PROC" parameterType="hashmap">
		{CALL
		declare
			v_table_key number;		--급여항목ID

		begin

			v_table_key := SL_BI_CODE_S.nextval;

			insert into SL_BI_CODE(  SL_BI_CODE_ID
									,COMM_CORPORATION_ID
									,PAY_ITEM_CODE
									,PAY_ITEM_NAME
									,CLASSIFICATION_CODE
									,PAY_DED_CODE
									,INSURANCE_STD_YN
									,PERSON_STD_YN
									,RETIRE_STD_YN
									,MON_PAY_YN
									,RECALCULATION_YN
									,RETRO_YN
									,COM_PRODUCTION_YN
									,COM_OFFICE_YN
									,AVG_PRODUCTION_YN
									,RETIRE_DAY_STD_YN
									,AVG_OFFICE_YN
									,USE_YN
									,TAX_DIVISION_CODE
									,FRACTION_DIGIT
									,FRACTION_DIVISION_CODE
									,PRODUCT_ACCOUNT_ID
									,SGNA_ACCOUNT_ID
									,MIS_PRODUCT_ACCOUNT_ID
									,MIS_SGNA_ACCOUNT_ID
									,EXECUTIVE_ACCOUNT_ID
									,RND_ACCOUNT_ID
									,PRINT_SEQ
									,PRINT_NAME
									,OLD_CODE
									,NOTE
									,CRTBY
									,CRTIP
									,CRTDT
									,AMNBY
									,AMNIP
									,AMNDT
									,REFUND_ACCOUNT_ID
									,RE_AVG_PAY_YN
									,RE_AVG_BONUS_YN
									,RE_AVG_ANNUAL_YN
			    					,PAY_BONUS_CODE
									)
							values(v_table_key
									,#{LOGIN_CORPORATION_ID}
									,#{PAY_ITEM_CODE}
									,#{PAY_ITEM_NAME}
									,#{CLASSIFICATION_CODE}
									,#{PAY_DED_CODE}
									,#{INSURANCE_STD_YN}
									,#{PERSON_STD_YN}
									,#{RETIRE_STD_YN}
									,#{MON_PAY_YN}
									,#{RECALCULATION_YN}
									,#{RETRO_YN}
									,#{COM_PRODUCTION_YN}
									,#{COM_OFFICE_YN}
									,#{AVG_PRODUCTION_YN}
									,#{RETIRE_DAY_STD_YN}
									,#{AVG_OFFICE_YN}
									,#{USE_YN}
									,#{TAX_DIVISION_CODE}
									,#{FRACTION_DIGIT}
									,#{FRACTION_DIVISION_CODE}
									,#{PRODUCT_ACCOUNT_ID}
									,#{SGNA_ACCOUNT_ID}
									,#{MIS_PRODUCT_ACCOUNT_ID}
									,#{MIS_SGNA_ACCOUNT_ID}
									,#{EXECUTIVE_ACCOUNT_ID}
									,#{RND_ACCOUNT_ID}
									,#{PRINT_SEQ}
									,#{PRINT_NAME}
									,#{OLD_CODE}
									,#{NOTE}
									,#{CRTBY}
									,#{CRTIP}
									,SYSDATE
									,#{AMNBY}
									,#{AMNIP}
									,SYSDATE
									,#{REFUND_ACCOUNT_ID}
									,#{RE_AVG_PAY_YN}
									,#{RE_AVG_BONUS_YN}
									,#{RE_AVG_ANNUAL_YN}
									,#{PAY_BONUS_CODE}
									);

			insert into SL_BI_CODE_LANG( SL_BI_CODE_LANG_ID
										,SL_BI_CODE_ID
										,LANG_CODE
										,PAY_ITEM_NAME
										,CRTBY
										,CRTDT
										,CRTIP
										,AMNBY
										,AMNDT
										,AMNIP
										)
								VALUES( SL_BI_CODE_LANG_S.nextval
									  	,v_table_key
										,#{LOGIN_USER_LANG}
										,#{PAY_ITEM_NAME}
										,#{CRTBY}
										,SYSDATE
										,#{CRTIP}
										,#{AMNBY}
										,SYSDATE
										,#{AMNIP}
								);
		end}
	</insert>

	<!-- ******************************************* -->
	<!-- 급여항목코드 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_CODE_PROC" parameterType="hashmap">
		{CALL
		declare
		begin

			--급여항목코드 수정
			update SL_BI_CODE
			   set   PAY_ITEM_CODE          = #{PAY_ITEM_CODE}
					,PAY_ITEM_NAME          = #{PAY_ITEM_NAME}
					,CLASSIFICATION_CODE    = #{CLASSIFICATION_CODE}
					,PAY_DED_CODE           = #{PAY_DED_CODE}
					,INSURANCE_STD_YN       = #{INSURANCE_STD_YN}
					,PERSON_STD_YN          = #{PERSON_STD_YN}
					,RETIRE_STD_YN          = #{RETIRE_STD_YN}
					,MON_PAY_YN             = #{MON_PAY_YN}
					,RECALCULATION_YN       = #{RECALCULATION_YN}
					,RETRO_YN                = #{RETRO_YN}
					,COM_PRODUCTION_YN      = #{COM_PRODUCTION_YN}
					,COM_OFFICE_YN          = #{COM_OFFICE_YN}
					,AVG_PRODUCTION_YN      = #{AVG_PRODUCTION_YN}
					,RETIRE_DAY_STD_YN      = #{RETIRE_DAY_STD_YN}
					,AVG_OFFICE_YN          = #{AVG_OFFICE_YN}
					,USE_YN                 = #{USE_YN}
					,TAX_DIVISION_CODE      = #{TAX_DIVISION_CODE}
					,FRACTION_DIGIT         = #{FRACTION_DIGIT}
					,FRACTION_DIVISION_CODE = #{FRACTION_DIVISION_CODE}
					,PRODUCT_ACCOUNT_ID     = #{PRODUCT_ACCOUNT_ID}
					,SGNA_ACCOUNT_ID        = #{SGNA_ACCOUNT_ID}
					,MIS_PRODUCT_ACCOUNT_ID = #{MIS_PRODUCT_ACCOUNT_ID}
					,MIS_SGNA_ACCOUNT_ID    = #{MIS_SGNA_ACCOUNT_ID}
					,EXECUTIVE_ACCOUNT_ID   = #{EXECUTIVE_ACCOUNT_ID}
					,RND_ACCOUNT_ID         = #{RND_ACCOUNT_ID}
					,PRINT_SEQ              = #{PRINT_SEQ}
					,PRINT_NAME             = #{PRINT_NAME}
					,OLD_CODE               = #{OLD_CODE}
					,NOTE                   = #{NOTE}
					,AMNBY                  = #{AMNBY}
					,AMNIP                  = #{AMNIP}
					,AMNDT                  = SYSDATE
					,REFUND_ACCOUNT_ID      = #{REFUND_ACCOUNT_ID}
					,RE_AVG_PAY_YN          = #{RE_AVG_PAY_YN}
					,RE_AVG_BONUS_YN        = #{RE_AVG_BONUS_YN}
					,RE_AVG_ANNUAL_YN       = #{RE_AVG_ANNUAL_YN}
					,PAY_BONUS_CODE			= #{PAY_BONUS_CODE}
			 where SL_BI_CODE_ID = #{SL_BI_CODE_ID};

			--다국어 수정
			MERGE INTO
			           SL_BI_CODE_LANG
			      USING DUAL
			          ON (SL_BI_CODE_ID = #{SL_BI_CODE_ID} and LANG_CODE = #{LOGIN_USER_LANG})
			      WHEN MATCHED THEN
			          UPDATE SET
			          	  PAY_ITEM_NAME = #{PAY_ITEM_NAME}
			             ,amnby = #{AMNBY}
			             ,amndt = SYSDATE
			             ,amnip = #{AMNIP}
			      WHEN NOT MATCHED THEN
			          INSERT
			              (  SL_BI_CODE_LANG_ID
							,SL_BI_CODE_ID
							,LANG_CODE
							,PAY_ITEM_NAME
							,CRTBY
							,CRTDT
							,CRTIP
							,AMNBY
							,AMNDT
							,AMNIP)
			          VALUES
						  (SL_BI_CODE_LANG_S.nextval
			              ,#{SL_BI_CODE_ID}
			              ,#{LOGIN_USER_LANG}
			              ,#{PAY_ITEM_NAME}
			              ,#{CRTBY}
			              ,SYSDATE
			              ,#{CRTIP}
			              ,#{AMNBY}
			              ,SYSDATE
			              ,#{AMNIP});
		end}
	</update>

	<!-- ******************************************* -->
	<!-- 급여항목코드 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_CODE_PROC" parameterType="hashmap">
		{CALL
			DECLARE
			BEGIN
				DELETE FROM SL_BI_CODE_LANG WHERE SL_BI_CODE_LANG_ID = #{SL_BI_CODE_LANG_ID};
				DELETE FROM SL_BI_CODE WHERE SL_BI_CODE_ID = #{SL_BI_CODE_ID};
			END}
	</delete>

	<!-- ******************************************* -->
	<!-- 급여항목코드 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_CODE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_BI_CODE_ID
			 , A.COMM_CORPORATION_ID
			 , A.PAY_ITEM_CODE
			 , SL_UTIL_PKG.PAY_NAME(#{v_corporation_id}, A.SL_BI_CODE_ID, #{v_lang_code}) AS PAY_ITEM_NAME
			 , A.CLASSIFICATION_CODE
			 , A.PAY_DED_CODE
			 , A.INSURANCE_STD_YN
			 , A.PERSON_STD_YN
			 , A.RETIRE_STD_YN
			 , A.MON_PAY_YN
			 , A.RECALCULATION_YN
			 , A.RETRO_YN
		     , A.RETRO_ITEM_CODE
			 , A.COM_PRODUCTION_YN
			 , A.COM_OFFICE_YN
			 , A.AVG_PRODUCTION_YN
			 , A.RETIRE_DAY_STD_YN
			 , A.AVG_OFFICE_YN
			 , A.USE_YN
			 , A.TAX_DIVISION_CODE
			 , A.FRACTION_DIGIT
			 , A.FRACTION_DIVISION_CODE
			 , A.PRODUCT_ACCOUNT_ID
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.PRODUCT_ACCOUNT_ID, #{v_lang_code})             AS PRODUCT_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.PRODUCT_ACCOUNT_ID)                             AS PRODUCT_ACCOUNT_CODE
			 , A.SGNA_ACCOUNT_ID
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.SGNA_ACCOUNT_ID, #{v_lang_code})                AS SGNA_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.SGNA_ACCOUNT_ID)                                AS SGNA_ACCOUNT_CODE
			 , A.MIS_PRODUCT_ACCOUNT_ID
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.MIS_PRODUCT_ACCOUNT_ID, #{v_lang_code})         AS MIS_PRODUCT_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.MIS_PRODUCT_ACCOUNT_ID)                         AS MIS_PRODUCT_ACCOUNT_CODE
			 , A.MIS_SGNA_ACCOUNT_ID
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.MIS_SGNA_ACCOUNT_ID, #{v_lang_code})            AS MIS_SGNA_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.MIS_SGNA_ACCOUNT_ID)                            AS MIS_SGNA_ACCOUNT_CODE
			 , A.EXECUTIVE_ACCOUNT_ID
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.EXECUTIVE_ACCOUNT_ID, #{v_lang_code})           AS EXECUTIVE_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.EXECUTIVE_ACCOUNT_ID)                           AS EXECUTIVE_ACCOUNT_CODE
			 , A.RND_ACCOUNT_ID
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.RND_ACCOUNT_ID, #{v_lang_code})                 AS RND_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.RND_ACCOUNT_ID)                                 AS RND_ACCOUNT_CODE
			 , NULL                                                                       AS INVOICE_ROW_SEQ
			 , NULL                                                                       AS INVOICE_DEPARTMENT_ID
			 , NULL                                                                       AS INVOICE_DEPARTMENT_CODE
			 , NULL                                                                       AS INVOICE_DEPARTMENT_NAME
			 , NULL                                                                       AS INVOICE_CUST_ID
			 , NULL                                                                       AS INVOICE_CUST_CODE
			 , NULL                                                                       AS INVOICE_CUST_NAME
			 , NULL                                                                       AS INVOICE_DESCRIPTION
			 , A.PRINT_SEQ
			 , A.PRINT_NAME
			 , A.OLD_CODE
			 , A.NOTE
			 , A.REFUND_ACCOUNT_ID
			 , REFUND_ACCOUNT_ID
			 , RE_AVG_PAY_YN    
			 , RE_AVG_BONUS_YN  
			 , RE_AVG_ANNUAL_YN 			 
			 , FI_UTIL_PKG.ACCOUNT_NAME(A.REFUND_ACCOUNT_ID, #{v_lang_code})              AS REFUND_ACCOUNT_NAME
			 , FI_UTIL_PKG.ACCOUNT_CODE(A.REFUND_ACCOUNT_ID)                              AS REFUND_ACCOUNT_CODE
			 , (SELECT SL_BI_CODE_LANG_ID
				FROM SL_BI_CODE_LANG
				WHERE SL_BI_CODE_ID = A.SL_BI_CODE_ID
				  AND LANG_CODE = #{v_lang_code})                                         AS SL_BI_CODE_LANG_ID
			 , A.PAY_BONUS_CODE
		FROM SL_BI_CODE A
		WHERE A.SL_BI_CODE_ID = A.SL_BI_CODE_ID
		  AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_classification_code != null and v_classification_code != '' and v_classification_code != '%'.toString()">
		  AND A.CLASSIFICATION_CODE = #{v_classification_code}
		</if>
		<if test="v_pay_ded_code != null and v_pay_ded_code != '' and v_pay_ded_code != '%'.toString()">
		  AND A.PAY_DED_CODE = #{v_pay_ded_code}
		</if>
		<if test="v_pay_item_code != null and v_pay_item_code != '' and v_pay_item_code != '%'.toString()">
		  AND A.PAY_ITEM_CODE LIKE '%' || #{v_pay_item_code} || '%'
		</if>
		<if test="v_pay_item_name != null and v_pay_item_name != '' and v_pay_item_name != '%'.toString()">
		  AND SL_UTIL_PKG.PAY_NAME(#{v_corporation_id}, A.SL_BI_CODE_ID, #{v_lang_code}) LIKE '%' || #{v_pay_item_name} || '%'
		</if>
		<if test="v_use_yn != null and v_use_yn != '' and v_use_yn != '%'.toString()">
			AND NVL(A.USE_YN, '0') = #{v_use_yn}
		</if>
		ORDER BY A.CLASSIFICATION_CODE, A.PAY_DED_CODE, A.PAY_ITEM_CODE
	</select>
	<!-- 차변/대변 조회 -->
	<select id="S_SL_BI_CODE_DETAIL" parameterType="hashmap" resultType="hashmap">
		SELECT T1.PAY_ITEM_CODE
			  ,T1.PRJ_TYPE_CODE
		      ,T1.PROJECT_CODE
			  ,(SELECT PROJECT_NM FROM FI_PROJECT WHERE PROJECT_CODE = T1.PROJECT_CODE AND COMM_CORPORATION_ID = #{v_corporation_id}) AS PROJECT_NAME
			  ,T1.ATTRIBUTE1
			  ,T3.ACCOUNT_CODE	AS DB_ACCOUNT_CODE
			  ,T3.ACCOUNT_NAME	AS DB_ACCOUNT_NAME
		      ,T3.FI_BI_ACCOUNT_ID AS DB_ACCOUNT_ID
			  ,T4.CV_NO AS DB_CUST_CODE
			  ,T4.CV_NAME AS DB_CUST_NAME
			  ,T4.COMM_CV_ID AS DB_CUST_ID
			  ,T3A.ACCOUNT_CODE AS CR_ACCOUNT_CODE
			  ,T3A.ACCOUNT_NAME AS CR_ACCOUNT_NAME
		      ,T3A.FI_BI_ACCOUNT_ID AS CR_ACCOUNT_ID
			  ,T4A.CV_NO                AS CR_CUST_CODE
			  ,T4A.CV_NAME              AS CR_CUST_NAME
			  ,T4A.COMM_CV_ID           AS CR_CUST_ID
			  ,T1.NOTE
			  ,T1.COMM_CORPORATION_ID
			  ,T1.SL_BI_CODE_ACCOUNT_ID
			  ,T1.BOARD_MEM_YN
		FROM SL_BI_CODE_ACCOUNT T1
		LEFT JOIN SL_BI_CODE T2 ON T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
		LEFT JOIN FI_BI_ACCOUNT T3 ON T1.DB_ACCOUNT_ID = T3.FI_BI_ACCOUNT_ID	--차변회계계정
									AND T3.COMM_CORPORATION_ID = #{v_corporation_id}
		LEFT JOIN FI_BI_ACCOUNT T3A ON T1.CR_ACCOUNT_ID = T3A.FI_BI_ACCOUNT_ID	--대변회계계정
									AND T3A.COMM_CORPORATION_ID = #{v_corporation_id}
		LEFT JOIN COMM_CV T4 ON T1.DB_CUST_ID = T4.COMM_CV_ID --차변거래처
		LEFT JOIN COMM_CV T4A ON T1.CR_CUST_ID = T4A.COMM_CV_ID --대변거래처
		LEFT JOIN COMM_CV_BANK T5 ON ((T4.COMM_CV_ID = T5.COMM_CV_ID OR T4A.COMM_CV_ID = T5.COMM_CV_ID) AND T5.USE_YN = '1' AND T5.BASE_YN = '1') --거래처
		WHERE T1.PAY_ITEM_CODE = #{v_pay_item_code}
	</select>

	<!-- ******************************************* -->
	<!-- 급여항목 법인복사 -->
	<!-- ******************************************* -->
	<select id="P_SL_BI_CODE_COPY" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{CALL
			declare
  			v_comm_corporation_id number;
  			v_table_key number;

			Cursor cu1 IS
				SELECT comm_corporation_id
		          FROM comm_corporation
		         WHERE USE_YN='1'
		         <![CDATA[and comm_corporation_id <> #{v_fr_corp_id} ]]>
		           and comm_corporation_id = nvl(#{v_to_corp_id},comm_corporation_id);
			begin
				open cu1;

				loop
					Fetch cu1 into v_comm_corporation_id;
					exit when cu1%notFound;

				    DELETE
				      FROM sl_bi_code_LANG
				     WHERE SL_BI_CODE_ID IN (select SL_BI_CODE_ID
				     						   from sl_bi_code
				     						  WHERE COMM_CORPORATION_ID = v_comm_corporation_id);

					delete
		              from sl_bi_code
		             where comm_corporation_id = v_comm_corporation_id;

					insert into sl_bi_code( SL_BI_CODE_ID
			                                ,COMM_CORPORATION_ID
			                                ,PAY_ITEM_CODE
			                                ,PAY_NAME
			                                ,CLASSIFICATION_CODE
			                                ,PAY_DED_CODE
			                                ,INSURANCE_STD_YN
			                                ,PERSON_STD_YN
			                                ,RETIRE_STD_YN
			                                ,MON_PAY_YN
			                                ,RECALCULATION_YN
			                                ,RETRO_YN
			                                ,COM_PRODUCTION_YN
			                                ,COM_OFFICE_YN
			                                ,AVG_PRODUCTION_YN
			                                ,RETIRE_DAY_STD_YN
			                                ,AVG_OFFICE_YN
			                                ,USE_YN
			                                ,TAX_DIVISION_CODE
			                                ,FRACTION_DIGIT
			                                ,FRACTION_DIVISION_CODE
			                                ,PRODUCT_ACCOUNT_ID
			                                ,SGNA_ACCOUNT_ID
			                                ,MIS_PRODUCT_ACCOUNT_ID
			                                ,MIS_SGNA_ACCOUNT_ID
			                                ,EXECUTIVE_ACCOUNT_ID
			                                ,RND_ACCOUNT_ID
			                                ,INVOICE_ROW_SEQ
			                                ,INVOICE_DEPARTMENT_ID
			                                ,INVOICE_CUST_ID
			                                ,INVOICE_DESCRIPTION
			                                ,PRINT_SEQ
			                                ,PRINT_NAME
			                                ,OLD_CODE
			                                ,NOTE
			                                ,CRTBY
			                                ,CRTIP
			                                ,CRTDT
			                                ,AMNBY
			                                ,AMNIP
			                                ,AMNDT
			                                ,REFUND_ACCOUNT_ID
			                                )
			                        select  SL_BI_CODE_S.NEXTVAL
			                               ,v_comm_corporation_id
			                               ,PAY_ITEM_CODE
			                               ,PAY_NAME
			                               ,CLASSIFICATION_CODE
			                               ,PAY_DED_CODE
			                               ,INSURANCE_STD_YN
			                               ,PERSON_STD_YN
			                               ,RETIRE_STD_YN
			                               ,MON_PAY_YN
			                               ,RECALCULATION_YN
			                               ,RETRO_YN
			                               ,COM_PRODUCTION_YN
			                               ,COM_OFFICE_YN
			                               ,AVG_PRODUCTION_YN
			                               ,RETIRE_DAY_STD_YN
			                               ,AVG_OFFICE_YN
			                               ,USE_YN
			                               ,TAX_DIVISION_CODE
			                               ,FRACTION_DIGIT
			                               ,FRACTION_DIVISION_CODE
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(PRODUCT_ACCOUNT_ID), v_comm_corporation_id)
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(SGNA_ACCOUNT_ID), v_comm_corporation_id)
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(MIS_PRODUCT_ACCOUNT_ID), v_comm_corporation_id)
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(MIS_SGNA_ACCOUNT_ID), v_comm_corporation_id)
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(EXECUTIVE_ACCOUNT_ID), v_comm_corporation_id)
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(RND_ACCOUNT_ID), v_comm_corporation_id)
			                               ,INVOICE_ROW_SEQ
			                               ,INVOICE_DEPARTMENT_ID
			                               ,INVOICE_CUST_ID
			                               ,INVOICE_DESCRIPTION
			                               ,PRINT_SEQ
			                               ,PRINT_NAME
			                               ,OLD_CODE
			                               ,NOTE
			                               ,#{CRTBY}
			                               ,#{CRTIP}
			                               ,sysdate
			                               ,#{CRTBY}
			                               ,#{CRTIP}
			                               ,sysdate
			                               ,FI_UTIL_PKG.account_id(FI_UTIL_PKG.account_code(REFUND_ACCOUNT_ID), v_comm_corporation_id)
			                          from sl_bi_code
			                         where comm_corporation_id = #{v_fr_corp_id};


                          insert into SL_BI_CODE_LANG( SL_BI_CODE_LANG_ID
										,SL_BI_CODE_ID
										,LANG_CODE
										,PAY_ITEM_NAME
										,CRTBY
										,CRTDT
										,CRTIP
										,AMNBY
										,AMNDT
										,AMNIP
										)
								select SL_BI_CODE_LANG_S.nextval
								       ,(select sl_bi_code_id from sl_bi_code where pay_item_code = b.pay_item_code and comm_corporation_id = v_comm_corporation_id)
								       ,a.lang_code
								       ,a.pay_item_name
								       ,#{CRTBY}
										,SYSDATE
										,#{CRTIP}
										,#{CRTBY}
										,SYSDATE
										,#{CRTIP}
								  from sl_bi_code_lang a
								  join sl_bi_code b on a.sl_bi_code_id = b.sl_bi_code_id
								 where b.comm_corporation_id = #{v_fr_corp_id};

				end loop;

				close cu1;

				exception
					when others then
						#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg} := sqlerrm;
						rollback;
			end
		}
	</select>



	<!-- ******************************************* -->
	<!-- 간이세율포 업로드 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_SIMPLIFIED_DUTY" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select
			FROM_YEAR
			,TAX_MIN_AMT
			,TAX_MAX_AMT
			,DEDUCT_CNT
			,GENERAL_AMT
			,CHILDREN_AMT
			,SL_BI_SIMPLIFIED_DUTY_ID
		from SL_BI_SIMPLIFIED_DUTY a
	</select>


	<!-- ******************************************* -->
	<!-- 간이세율포 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_SIMPLIFIED_DUTY_YEAR" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">

		   SELECT
		          FROM_YEAR
		         ,TAX_MIN_AMT
		         ,TAX_MAX_AMT
		         , MAX(CASE WHEN DEDUCT_CNT = 1 THEN GENERAL_AMT END) AS ONE_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 2 THEN GENERAL_AMT END) AS TWO_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 3 THEN GENERAL_AMT END) AS THREE_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 4 THEN GENERAL_AMT END) AS FOUR_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 5 THEN GENERAL_AMT END) AS FIVE_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 6 THEN GENERAL_AMT END) AS SIX_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 7 THEN GENERAL_AMT END) AS SEVEN_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 8 THEN GENERAL_AMT END) AS EIGHT_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 9 THEN GENERAL_AMT END) AS NINE_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 10 THEN GENERAL_AMT END) AS TEN_DEDUCT
		         , MAX(CASE WHEN DEDUCT_CNT = 11 THEN GENERAL_AMT END) AS ELEVEN_DEDUCT
		   FROM (

		        SELECT
		            FROM_YEAR
		           ,TAX_MIN_AMT
		           ,TAX_MAX_AMT
		           ,GENERAL_AMT
		           ,DEDUCT_CNT
		        	--  , ROW_NUMBER() OVER(PARTITION BY STUDENT_ID ORDER BY SHOES_NM) NUM

		        FROM SL_BI_SIMPLIFIED_DUTY
		        WHERE FROM_YEAR = #{v_from_year}
		     ) A

		GROUP BY FROM_YEAR, TAX_MIN_AMT, TAX_MAX_AMT

	</select>

	<!-- ******************************************* -->
	<!-- 근로소득 간이세율표 -->
	<!-- ******************************************* -->
	<!-- 간이세율표 -->
	<select id="S_SL_BI_INCOME_TAX" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT FROM_YEAR
			 , TAX_MIN_AMT
			 , TAX_MAX_AMT
			 , ONE_DEDUCT
			 , TWO_DEDUCT
			 , THREE_DEDUCT
			 , FOUR_DEDUCT
			 , FIVE_DEDUCT
			 , SIX_DEDUCT
			 , SEVEN_DEDUCT
			 , EIGHT_DEDUCT
			 , NINE_DEDUCT
			 , TEN_DEDUCT
			 , ELEVEN_DEDUCT
			 , SL_BI_INCOME_TAX_ID
		FROM SL_BI_INCOME_TAX
		WHERE 1 = 1
		<if test="v_app_date != null and v_app_date != '' and v_app_date != '%'.toString()">
			AND APPLY_DATE BETWEEN (SELECT MAX(APPLY_DATE) FROM SL_BI_INCOME_TAX) AND #{v_app_date}
		</if>
		ORDER BY TAX_MIN_AMT
	</select>
	<!-- 천만원기준 -->
	<select id="S_SL_BI_INCOME_TAX2" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT SL_BI_INCOME_TAX2_ID
			  ,APPLY_DATE
			  ,TAX_MIN_AMT
			  ,TAX_MAX_AMT
			  ,TAX_RATE1
			  ,TAX_RATE2
			  ,TAX_AMT1
		FROM SL_BI_INCOME_TAX2
		WHERE 1 = 1
		<if test="v_app_date != null and v_app_date != '' and v_app_date != '%'.toString()">
			AND APPLY_DATE BETWEEN (SELECT MAX(APPLY_DATE) FROM SL_BI_INCOME_TAX2) AND #{v_app_date}
		</if>
		ORDER BY TAX_MIN_AMT
	</select>

	<!-- ******************************************* -->
	<!-- 급여기준일 등록 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_FIXED" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT sl_bi_fixed_id
		      ,comm_corporation_id
		      ,pay_division_code
		      ,pay_type_code
		      ,from_month_code
		      ,day_code
		      ,to_month_code
		      ,to_day_code
		      ,payment_month_code
		      ,payment_day_code
		      ,note
		  FROM sl_bi_fixed a
		 WHERE a.comm_corporation_id = #{v_corporation_id}
        <if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
		   and a.PAY_TYPE_CODE = #{v_pay_type_code}
		</if>
		 ORDER BY pay_type_code, pay_division_code 
	</select>

	<!-- ******************************************* -->
	<!-- 급여계산항목코드 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_PAYROLL_CAL_PROC" parameterType="hashmap">
		{CALL
		declare
			v_table_key number;		--급여항목ID

		begin

			v_table_key := SL_BI_PAYROLL_CAL_S.nextval;

			insert into SL_BI_PAYROLL_CAL(SL_BI_PAYROLL_CAL_ID
										,COMM_CORPORATION_ID
										,CLASSIFICATION_CODE
										,PAY_ITEM_CODE
										,PAY_ITEM_NAME
										,EXPLANATION
										,PRINT_NUMBER
										,PRINT_NAME
										,DAILY_CALC_BASE_CODE
										,DAILY_CALC_CODE
										,USE_YN
										,NOTE
										,CRTBY
										,CRTIP
										,CRTDT
										,AMNBY
										,AMNIP
										,AMNDT
										,CARRY_STD_DATE_CODE)
							values(v_table_key
									,#{LOGIN_CORPORATION_ID}
									,#{CLASSIFICATION_CODE}
									,#{PAY_ITEM_CODE}
									,#{PAY_ITEM_NAME}
									,#{EXPLANATION}
									,#{PRINT_NUMBER}
									,#{PRINT_NAME}
									,#{DAILY_CALC_BASE_CODE}
									,#{DAILY_CALC_CODE}
									,#{USE_YN}
									,#{NOTE}
									,#{CRTBY}
									,#{CRTIP}
									,SYSDATE
									,#{AMNBY}
									,#{AMNIP}
									,SYSDATE
									,#{CARRY_STD_DATE_CODE}
									);

			insert into SL_BI_PAYROLL_CAL_LANG( SL_BI_PAYROLL_CAL_LANG_ID
										,SL_BI_PAYROLL_CAL_ID
										,LANG_CODE
										,PAY_ITEM_NAME
										,EXPLANATION
										,PRINT_NAME
										,NOTE
										,CRTBY
										,CRTDT
										,CRTIP
										,AMNBY
										,AMNDT
										,AMNIP)
								VALUES( SL_BI_PAYROLL_CAL_LANG_S.nextval
									  	,v_table_key
										,#{LOGIN_USER_LANG}
										,#{PAY_ITEM_NAME}
										,#{EXPLANATION}
										,#{PRINT_NAME}
										,#{NOTE}
										,#{CRTBY}
										,SYSDATE
										,#{CRTIP}
										,#{AMNBY}
										,SYSDATE
										,#{AMNIP});
		end}
	</insert>

	<!-- ******************************************* -->
	<!-- 급여계산항목코드 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_PAYROLL_CAL_PROC" parameterType="hashmap">
		{CALL
		declare
		begin

			--급여계산항목코드 수정
			update SL_BI_PAYROLL_CAL
			   set   CLASSIFICATION_CODE    =#{CLASSIFICATION_CODE}
					,PAY_ITEM_CODE =#{PAY_ITEM_CODE}
					,PAY_ITEM_NAME =#{PAY_ITEM_NAME}
					,EXPLANATION            =#{EXPLANATION}
					,PRINT_NUMBER           =#{PRINT_NUMBER}
					,PRINT_NAME             =#{PRINT_NAME}
					,DAILY_CALC_BASE_CODE	=#{DAILY_CALC_BASE_CODE}
					,DAILY_CALC_CODE		=#{DAILY_CALC_CODE}
					,USE_YN                 =#{USE_YN}
					,NOTE                   =#{NOTE}
					,AMNBY                  =#{AMNBY}
					,AMNIP                  =#{AMNIP}
					,AMNDT                  =SYSDATE
				    ,CARRY_STD_DATE_CODE	=#{CARRY_STD_DATE_CODE}
			 where SL_BI_PAYROLL_CAL_ID = #{SL_BI_PAYROLL_CAL_ID};

			--다국어 수정
			MERGE INTO
			           SL_BI_PAYROLL_CAL_LANG
			      USING DUAL
			          ON (SL_BI_PAYROLL_CAL_ID = #{SL_BI_PAYROLL_CAL_ID} and LANG_CODE = #{LOGIN_USER_LANG})
			      WHEN MATCHED THEN
			          UPDATE SET
			          	  PAY_ITEM_NAME =#{PAY_ITEM_NAME}
						 ,EXPLANATION            =#{EXPLANATION}
						 ,PRINT_NAME             =#{PRINT_NAME}
						 ,NOTE                   =#{NOTE}
			             ,amnby = #{AMNBY}
			             ,amndt = SYSDATE
			             ,amnip = #{AMNIP}
			      WHEN NOT MATCHED THEN
			          INSERT( SL_BI_PAYROLL_CAL_LANG_ID
							,SL_BI_PAYROLL_CAL_ID
							,LANG_CODE
							,PAY_ITEM_NAME
							,EXPLANATION
							,PRINT_NAME
							,NOTE
							,CRTBY
							,CRTDT
							,CRTIP
							,AMNBY
							,AMNDT
							,AMNIP)
					VALUES( SL_BI_PAYROLL_CAL_LANG_S.nextval
						  	,#{SL_BI_PAYROLL_CAL_ID}
							,#{LOGIN_USER_LANG}
							,#{PAY_ITEM_NAME}
							,#{EXPLANATION}
							,#{PRINT_NAME}
							,#{NOTE}
							,#{CRTBY}
							,SYSDATE
							,#{CRTIP}
							,#{AMNBY}
							,SYSDATE
							,#{AMNIP}
							);
		end}
	</update>

	<!-- ******************************************* -->
	<!-- 급여계산항목코드 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_PAYROLL_CAL_PROC" parameterType="hashmap">
		{CALL
			DECLARE
			BEGIN
				DELETE FROM SL_BI_PAYROLL_CAL_LANG WHERE SL_BI_PAYROLL_CAL_LANG_ID = #{SL_BI_PAYROLL_CAL_LANG_ID};
				DELETE FROM SL_BI_PAYROLL_CAL WHERE SL_BI_PAYROLL_CAL_ID = #{SL_BI_PAYROLL_CAL_ID};
			END
		}
	</delete>

	<!-- ******************************************* -->
	<!-- 급여계산항목코드 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_PAYROLL_CAL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_BI_PAYROLL_CAL_ID
			 ,A.CLASSIFICATION_CODE
			 ,A.PAY_ITEM_CODE
			 ,SL_UTIL_PKG.CAL_ITEM_NAME(A.SL_BI_PAYROLL_CAL_ID, #{v_lang_code}) AS PAY_ITEM_NAME
			 ,SL_UTIL_PKG.CAL_ITEM_EXPLANATION(A.SL_BI_PAYROLL_CAL_ID, #{v_lang_code}) AS EXPLANATION
			 ,A.PRINT_NUMBER
			 ,SL_UTIL_PKG.CAL_ITEM_PRINT_NAME(A.SL_BI_PAYROLL_CAL_ID, #{v_lang_code}) AS PRINT_NAME
			 ,A.DAILY_CALC_BASE_CODE
			 ,A.DAILY_CALC_CODE
			 ,A.USE_YN
			 ,SL_UTIL_PKG.CAL_ITEM_NOTE(A.SL_BI_PAYROLL_CAL_ID, #{v_lang_code}) AS NOTE
			 ,A.COMM_CORPORATION_ID
			 ,(SELECT SL_BI_PAYROLL_CAL_LANG_ID
			   FROM SL_BI_PAYROLL_CAL_LANG
			   WHERE SL_BI_PAYROLL_CAL_ID = A.SL_BI_PAYROLL_CAL_ID
				 AND LANG_CODE = #{v_lang_code}) AS SL_BI_PAYROLL_CAL_LANG_ID
			 , A.CARRY_STD_DATE_CODE
		FROM SL_BI_PAYROLL_CAL A
		WHERE A.SL_BI_PAYROLL_CAL_ID = A.SL_BI_PAYROLL_CAL_ID
		  AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_classification_code != null and v_classification_code != '' and v_classification_code != '%'.toString()">
		  AND A.CLASSIFICATION_CODE = #{v_classification_code}
		</if>
		<if test="v_calculation_items_code != null and v_calculation_items_code != '' and v_calculation_items_code != '%'.toString()">
		  AND A.PAY_ITEM_CODE LIKE '%' || #{v_calculation_items_code} || '%'
		</if>
		<if test="v_calculation_items_name != null and v_calculation_items_name != '' and v_calculation_items_name != '%'.toString()">
		  AND SL_UTIL_PKG.CAL_ITEM_NAME(A.SL_BI_PAYROLL_CAL_ID, #{v_lang_code}) LIKE '%' || #{v_calculation_items_name} || '%'
		</if>
		<if test="v_use_yn != null and v_use_yn != '' and v_use_yn != '%'.toString()">
			AND A.USE_YN = #{v_use_yn}
		</if>
		ORDER BY A.CLASSIFICATION_CODE, A.PAY_ITEM_CODE
	</select>


	<!-- ******************************************* -->
	<!-- 급여계산항목 법인복사 -->
	<!-- ******************************************* -->
	<select id="P_SL_BI_PAYROLL_CAL_COPY" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{CALL
			declare
  			v_comm_corporation_id number;
  			v_table_key number;

			Cursor cu1 IS
				SELECT comm_corporation_id
		          FROM comm_corporation
		         WHERE USE_YN='1'
		         <![CDATA[and comm_corporation_id <> #{v_fr_corp_id} ]]>
		           and comm_corporation_id = nvl(#{v_to_corp_id},comm_corporation_id);
			begin
				open cu1;

				loop
					Fetch cu1 into v_comm_corporation_id;
					exit when cu1%notFound;


				    DELETE
				      FROM SL_BI_PAYROLL_CAL_LANG
				     WHERE SL_BI_PAYROLL_CAL_ID IN (select SL_BI_PAYROLL_CAL_ID
					     						      from SL_BI_PAYROLL_CAL
					     						     WHERE COMM_CORPORATION_ID = v_comm_corporation_id);

					delete
		              from SL_BI_PAYROLL_CAL
		             where comm_corporation_id = v_comm_corporation_id;

					insert into SL_BI_PAYROLL_CAL(   SL_BI_PAYROLL_CAL_ID
													,COMM_CORPORATION_ID
													,CLASSIFICATION_CODE
													,PAY_ITEM_CODE
													,PAY_ITEM_NAME
													,EXPLANATION
													,PRINT_NUMBER
													,PRINT_NAME
													,USE_YN
													,NOTE
													,CRTBY
													,CRTIP
													,CRTDT
													,AMNBY
													,AMNIP
													,AMNDT
			                                	)
			                         select  SL_BI_PAYROLL_CAL_S.NEXTVAL
			                                ,v_comm_corporation_id
			                                ,CLASSIFICATION_CODE
											,PAY_ITEM_CODE
											,PAY_ITEM_NAME
											,EXPLANATION
											,PRINT_NUMBER
											,PRINT_NAME
											,USE_YN
											,NOTE
											,#{CRTBY}
			                                ,#{CRTIP}
			                                ,SYSDATE
			                                ,#{CRTBY}
			                                ,#{CRTIP}
			                                ,SYSDATE
			                          from SL_BI_PAYROLL_CAL
			                         where comm_corporation_id = #{v_fr_corp_id};


                          insert into SL_BI_PAYROLL_CAL_LANG( SL_BI_PAYROLL_CAL_LANG_ID
															,SL_BI_PAYROLL_CAL_ID
															,LANG_CODE
															,PAY_ITEM_NAME
															,EXPLANATION
															,PRINT_NAME
															,NOTE
															,CRTBY
															,CRTDT
															,CRTIP
															,AMNBY
															,AMNDT
															,AMNIP
															)
													select SL_BI_CODE_LANG_S.nextval
													       ,(select SL_BI_PAYROLL_CAL_ID from SL_BI_PAYROLL_CAL where PAY_ITEM_CODE = b.PAY_ITEM_CODE and comm_corporation_id = v_comm_corporation_id)
													       ,a.lang_code
													       ,a.PAY_ITEM_NAME
														   ,a.EXPLANATION
														   ,a.PRINT_NAME
														   ,a.NOTE
													       ,#{CRTBY}
														   ,SYSDATE
														   ,#{CRTIP}
														   ,#{CRTBY}
														   ,SYSDATE
														   ,#{CRTIP}
													  from SL_BI_PAYROLL_CAL_LANG a
													  join SL_BI_PAYROLL_CAL b on a.sl_bi_payroll_cal_id = b.sl_bi_payroll_cal_id
													 where b.comm_corporation_id = #{v_fr_corp_id};

				end loop;

				close cu1;

				exception
					when others then
						#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg} := sqlerrm;
						rollback;
			end}
	</select>

	<!-- ******************************************* -->
	<!-- 직책수당 마스터 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_POSITION_PAY_MASTER" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT DISTINCT a.base_date AS base_date
		FROM sl_bi_position_pay a
		WHERE a.sl_bi_position_pay_id = a.sl_bi_position_pay_id
		  AND a.comm_corporation_id = #{v_corporation_id}
	</select>

	<!-- ******************************************* -->
	<!-- 직책수당 상세 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_POSITION_PAY_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select a.base_date
			 , a.comm_corporation_id
			 , a.sl_bi_position_pay_id
			 , a.position_division_code
			 , a.position_pay
			 , a.note
		from sl_bi_position_pay a
		where a.sl_bi_position_pay_id = a.sl_bi_position_pay_id
		  and a.comm_corporation_id = #{v_corporation_id}
		  and a.base_date = #{v_base_date}
	</select>

	<!-- ******************************************* -->
	<!-- 직책수당 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_POSITION_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			INSERT into SL_BI_POSITION_PAY
				( SL_BI_POSITION_PAY_ID
				,BASE_DATE
				,POSITION_DIVISION_CODE
				,POSITION_PAY
				,NOTE
				,COMM_CORPORATION_ID
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
				(SL_BI_POSITION_PAY_S.nextval
				,#{BASE_DATE}
				,#{POSITION_DIVISION_CODE}
				,#{POSITION_PAY}
				,#{NOTE}
				,#{LOGIN_CORPORATION_ID}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});
			end}
	</insert>

	<!-- ******************************************* -->
	<!-- 직책수당 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_POSITION_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			delete from SL_BI_POSITION_PAY where SL_BI_POSITION_PAY_ID = #{SL_BI_POSITION_PAY_ID} and BASE_DATE = #{BASE_DATE};
			INSERT into SL_BI_POSITION_PAY
				( SL_BI_POSITION_PAY_ID
				,BASE_DATE
				,POSITION_DIVISION_CODE
				,POSITION_PAY
				,NOTE
				,COMM_CORPORATION_ID
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
				(SL_BI_POSITION_PAY_S.nextval
				,#{BASE_DATE}
				,#{POSITION_DIVISION_CODE}
				,#{POSITION_PAY}
				,#{NOTE}
				,#{LOGIN_CORPORATION_ID}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});
			end}
	</update>

	<!-- ******************************************* -->
	<!-- 직책수당 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_POSITION_PAY_PROC">
		delete from SL_BI_POSITION_PAY where SL_BI_POSITION_PAY_ID = #{SL_BI_POSITION_PAY_ID}
	</delete>

	<!-- ******************************************* -->
	<!-- 직무수당 마스터 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_JOB_FUNCTION_MASTER" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select distinct a.base_date as BASE_DATE
		from SL_BI_JOB_FUNCTION a
		where a.SL_BI_JOB_FUNCTION_id = a.SL_BI_JOB_FUNCTION_id
		  and a.comm_corporation_id = #{v_corporation_id}
	</select>

	<!-- ******************************************* -->
	<!-- 직무수당 상세 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_JOB_FUNCTION_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select a.base_date
			 , a.comm_corporation_id
			 , a.sl_bi_job_function_id
			 , a.job_function_division_code
			 , a.job_function_pay
			 , a.note
		from SL_BI_JOB_FUNCTION a
		where a.SL_BI_JOB_FUNCTION_id = a.SL_BI_JOB_FUNCTION_id
		  and a.comm_corporation_id = #{v_corporation_id}
		  and a.base_date = #{v_base_date}
	</select>

	<!-- ******************************************* -->
	<!-- 직무수당 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_JOB_FUNCTION_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			INSERT into SL_BI_JOB_FUNCTION
				( SL_BI_JOB_FUNCTION_ID
				,BASE_DATE
				,JOB_FUNCTION_DIVISION_CODE
				,JOB_FUNCTION_PAY
				,NOTE
				,COMM_CORPORATION_ID
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
				(SL_BI_JOB_FUNCTION_S.nextval
				,#{BASE_DATE}
				,#{JOB_FUNCTION_DIVISION_CODE}
				,#{JOB_FUNCTION_PAY}
				,#{NOTE}
				,#{LOGIN_CORPORATION_ID}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});
			end}
	</insert>

	<!-- ******************************************* -->
	<!-- 직무수당 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_JOB_FUNCTION_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			delete from SL_BI_JOB_FUNCTION where SL_BI_JOB_FUNCTION_ID = #{SL_BI_JOB_FUNCTION_ID} and BASE_DATE = #{BASE_DATE};
			INSERT into SL_BI_JOB_FUNCTION
				( SL_BI_JOB_FUNCTION_ID
				,BASE_DATE
				,JOB_FUNCTION_DIVISION_CODE
				,JOB_FUNCTION_PAY
				,NOTE
				,COMM_CORPORATION_ID
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
				(SL_BI_JOB_FUNCTION_S.nextval
				,#{BASE_DATE}
				,#{JOB_FUNCTION_DIVISION_CODE}
				,#{JOB_FUNCTION_PAY}
				,#{NOTE}
				,#{LOGIN_CORPORATION_ID}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});
			end}
	</update>

	<!-- ******************************************* -->
	<!-- 직무수당 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_JOB_FUNCTION_PROC">
		delete from SL_BI_JOB_FUNCTION where SL_BI_JOB_FUNCTION_ID = #{SL_BI_JOB_FUNCTION_ID}
	</delete>

	<!-- ******************************************* -->
	<!-- 직급-호봉별 기본급등록 마스터 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_SALARY_PAY_MASTER" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT DISTINCT A.APPLY_DATE
		FROM SL_BI_SALARY_PAY A
		WHERE A.SL_BI_SALARY_PAY_ID = A.SL_BI_SALARY_PAY_ID
		  AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		ORDER BY A.APPLY_DATE DESC
	</select>

	<!-- ******************************************* -->
	<!-- 직급-호봉별 기본급등록 상세 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_SALARY_PAY_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.APPLY_DATE
			 , A.COMM_CORPORATION_ID
			 , A.SL_BI_SALARY_PAY_ID
			 , A.RANK_CODE
			 , A.RANK_YEAR_CODE
			 , A.SALARY_MOMTH_AMT
			 , A.SALARY_DAILY_AMT
			 , A.SALARY_HOURLY_AMT
			 , A.SALARY_OT_AMT
		     , A.PAY_AMT1
			 , A.PAY_AMT2
			 , A.PAY_AMT3
			 , A.PAY_AMT4
			 , A.SALARY1_TYPE
			 , A.SALARY2_TYPE
			 , A.SALARY3_TYPE
			 , A.SALARY4_TYPE
			 , A.SALARY5_TYPE
			 , A.NOTE
		FROM SL_BI_SALARY_PAY A
		WHERE A.SL_BI_SALARY_PAY_ID = A.SL_BI_SALARY_PAY_ID
		  AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		<choose>
			<when test ="v_new != null and v_new != '' and v_new != '%'.toString()">
				AND A.APPLY_DATE BETWEEN (SELECT MAX(APPLY_DATE) FROM SL_BI_SALARY_PAY) AND REPLACE(#{v_apply_date}, '-', '')
			</when>
			<otherwise>
				AND A.APPLY_DATE = REPLACE(#{v_apply_date}, '-', '')
			</otherwise>
		</choose>
		ORDER BY A.APPLY_DATE DESC, RANK_CODE ASC, RANK_YEAR_CODE ASC
	</select>

	<!-- ******************************************* -->
	<!-- 직급-호봉별 기본급등록 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_SALARY_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			INSERT INTO SL_BI_SALARY_PAY
				( SL_BI_SALARY_PAY_ID
				,APPLY_DATE
				,RANK_CODE
				,RANK_YEAR_CODE
				,SALARY_MOMTH_AMT
				,SALARY_DAILY_AMT
				,SALARY_HOURLY_AMT
				,SALARY_OT_AMT
				,PAY_AMT1
				,PAY_AMT2
				,PAY_AMT3
				,PAY_AMT4
				,SALARY1_TYPE
				,SALARY2_TYPE
				,SALARY3_TYPE
				,SALARY4_TYPE
				,SALARY5_TYPE
				,NOTE
				,COMM_CORPORATION_ID
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
				(SL_BI_SALARY_PAY_S.nextval
				,REPLACE(#{APPLY_DATE}, '-', '')
				,#{RANK_CODE}
				,#{RANK_YEAR_CODE}
				,#{SALARY_MOMTH_AMT}
				,#{SALARY_DAILY_AMT}
				,#{SALARY_HOURLY_AMT}
				,#{SALARY_OT_AMT}
				,#{PAY_AMT1}
				,#{PAY_AMT2}
				,#{PAY_AMT3}
				,#{PAY_AMT4}
				,#{SALARY1_TYPE}
				,#{SALARY2_TYPE}
				,#{SALARY3_TYPE}
				,#{SALARY4_TYPE}
				,#{SALARY5_TYPE}
				,#{NOTE}
				,#{LOGIN_CORPORATION_ID}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});
			end}
	</insert>

	<!-- ******************************************* -->
	<!-- 직급-호봉별 기본급등록 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_SALARY_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			delete from SL_BI_SALARY_PAY where SL_BI_SALARY_PAY_ID = #{SL_BI_SALARY_PAY_ID} and APPLY_DATE = #{APPLY_DATE};
			INSERT into SL_BI_SALARY_PAY
				( SL_BI_SALARY_PAY_ID
				,APPLY_DATE
				,RANK_CODE
				,RANK_YEAR_CODE
				,SALARY_MOMTH_AMT
				,SALARY_DAILY_AMT
				,SALARY_HOURLY_AMT
				,SALARY_OT_AMT
				,PAY_AMT1
				,PAY_AMT2
				,PAY_AMT3
				,PAY_AMT4
				,SALARY1_TYPE
				,SALARY2_TYPE
				,SALARY3_TYPE
				,SALARY4_TYPE
				,SALARY5_TYPE
				,NOTE
				,COMM_CORPORATION_ID
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
				(SL_BI_SALARY_PAY_S.nextval
				,REPLACE(#{APPLY_DATE}, '-', '')
				,#{RANK_CODE}
				,#{RANK_YEAR_CODE}
				,#{SALARY_MOMTH_AMT}
				,#{SALARY_DAILY_AMT}
				,#{SALARY_HOURLY_AMT}
				,#{SALARY_OT_AMT}
				,#{PAY_AMT1}
				,#{PAY_AMT2}
				,#{PAY_AMT3}
				,#{PAY_AMT4}
				,#{SALARY1_TYPE}
				,#{SALARY2_TYPE}
				,#{SALARY3_TYPE}
				,#{SALARY4_TYPE}
				,#{SALARY5_TYPE}
				,#{NOTE}
				,#{LOGIN_CORPORATION_ID}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});
			end}
	</update>

	<!-- ******************************************* -->
	<!-- 직급-호봉별 기본급등록 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_SALARY_PAY_PROC">
		delete from SL_BI_SALARY_PAY where SL_BI_SALARY_PAY_ID = #{SL_BI_SALARY_PAY_ID} and COMM_CORPORATION_ID = #{LOGIN_CORPORATION_ID}
	</delete>

	<!-- ******************************************* -->
	<!-- 최저시급 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_MINIMUM_WAGE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select a.APPLY_DATE as APPLY_DATE
			 , a.SL_BI_MINIMUM_WAGE_ID
			 , a.WAGE_PRICE
			 , a.note
		from SL_BI_MINIMUM_WAGE a
		where a.SL_BI_MINIMUM_WAGE_ID = a.SL_BI_MINIMUM_WAGE_ID
		  and a.comm_corporation_id = #{v_corporation_id}
		<if test="v_apply_date != null and v_apply_date != '' and v_apply_date != '%'.toString()">
		  AND A.APPLY_DATE = #{v_apply_date}
		</if>
		order by a.APPLY_DATE desc
	</select>

	<!-- ******************************************* -->
	<!-- 근속수당 마스터 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_WORK_YEAR_PAY_MASTER" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select distinct comm_util_pkg.dateFormat(a.apply_date, 'YYYY-MM-DD') as apply_date
		from sl_bi_work_year_pay a
		where a.sl_bi_work_year_pay_id = a.sl_bi_work_year_pay_id
		  and a.comm_corporation_id = #{v_corporation_id}
	</select>

	<!-- ******************************************* -->
	<!-- 근속수당 상세 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_WORK_YEAR_PAY_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select a.apply_date as apply_date
			 , a.comm_corporation_id
			 , a.sl_bi_work_year_pay_id
			 , PAY_TYPE_CODE
			 , WORK_MONTH_FR
			 , WORK_MONTH_TO
			 , WORK_EXTRA_PAY
			 , NOTE
		from sl_bi_work_year_pay a
		where a.sl_bi_work_year_pay_id = a.sl_bi_work_year_pay_id
		  and a.comm_corporation_id = #{v_corporation_id}
		  and a.apply_date = #{v_apply_date}
	</select>

	<!-- ******************************************* -->
	<!-- 근속수당 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_WORK_YEAR_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			INSERT into SL_BI_WORK_YEAR_PAY
				( SL_BI_WORK_YEAR_PAY_ID
				,APPLY_DATE
				,PAY_TYPE_CODE
				,WORK_MONTH_FR
				,WORK_MONTH_TO
				,WORK_EXTRA_PAY
				,NOTE
				,CRTBY
				,CRTIP
				,CRTDT
				,AMNBY
				,AMNIP
				,AMNDT
				,COMM_CORPORATION_ID)
			VALUES
				(SL_BI_WORK_YEAR_PAY_S.nextval
				,#{APPLY_DATE}
				,#{PAY_TYPE_CODE}
				,#{WORK_MONTH_FR}
				,#{WORK_MONTH_TO}
				,#{WORK_EXTRA_PAY}
				,#{NOTE}
				,#{CRTBY}
				,#{CRTIP}
				,SYSDATE
				,#{AMNBY}
				,#{AMNIP}
				,SYSDATE
				,#{LOGIN_CORPORATION_ID});
			end}
	</insert>

	<!-- ******************************************* -->
	<!-- 근속수당 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_WORK_YEAR_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			delete from SL_BI_WORK_YEAR_PAY where SL_BI_WORK_YEAR_PAY_ID = #{SL_BI_WORK_YEAR_PAY_ID} and APPLY_DATE = #{APPLY_DATE};
			INSERT into SL_BI_WORK_YEAR_PAY
				( SL_BI_WORK_YEAR_PAY_ID
				,APPLY_DATE
				,PAY_TYPE_CODE
				,WORK_MONTH_FR
				,WORK_MONTH_TO
				,WORK_EXTRA_PAY
				,NOTE
				,CRTBY
				,CRTIP
				,CRTDT
				,AMNBY
				,AMNIP
				,AMNDT
				,COMM_CORPORATION_ID
				)
			VALUES
				(SL_BI_WORK_YEAR_PAY_S.nextval
				,#{APPLY_DATE}
				,#{PAY_TYPE_CODE}
				,#{WORK_MONTH_FR}
				,#{WORK_MONTH_TO}
				,#{WORK_EXTRA_PAY}
				,#{NOTE}
				,#{CRTBY}
				,#{CRTIP}
				,SYSDATE
				,#{AMNBY}
				,#{AMNIP}
				,SYSDATE
				,#{LOGIN_CORPORATION_ID});
			end}
	</update>

	<!-- ******************************************* -->
	<!-- 근속수당 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_WORK_YEAR_PAY_PROC">
		delete from SL_BI_WORK_YEAR_PAY where SL_BI_WORK_YEAR_PAY_ID = #{SL_BI_WORK_YEAR_PAY_ID}
	</delete>


	<!-- ******************************************* -->
	<!-- 업적연봉 연봉 기준표 마스터 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_ACH_SALARY_PAY_MASTER" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select distinct comm_util_pkg.dateFormat(a.apply_date, 'YYYY-MM-DD') as apply_date
		from sl_bi_ach_salary_pay a
		where a.sl_bi_ach_salary_pay_id = a.sl_bi_ach_salary_pay_id
		  and a.comm_corporation_id = #{v_corporation_id}
	</select>

	<!-- ******************************************* -->
	<!-- 업적연봉 연봉 기준표  상세 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_ACHIEVE_SALARY_PAY_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select comm_util_pkg.dateFormat(a.apply_date, 'YYYY-MM-DD') as apply_date
			 , SL_BI_ACH_SALARY_PAY_ID
			 , TURN
			 , RATING_DIVISION_CODE
			 , RATING
			 , NORMAL_SALARY_PAY
			 , ABILITY_SALARY_PAY
			 , ACHIEVE_SALARY_PAY
			 , MONTHLY_BONUS
			 , CAR_SUPPORT_PAY
			 , HOLIDAY_BONUS
			 , NOTE
		from sl_bi_ach_salary_pay a
		where a.sl_bi_ach_salary_pay_id = a.sl_bi_ach_salary_pay_id
		  and a.comm_corporation_id = #{v_corporation_id}
		  and a.apply_date = #{v_apply_date}
	</select>

	<!-- ******************************************* -->
	<!-- 업적연봉 연봉 추가 -->
	<!-- ******************************************* -->
	<insert id="I_SL_BI_ACHIEVE_SALARY_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			INSERT into SL_BI_ACH_SALARY_PAY
				( SL_BI_ACH_SALARY_PAY_ID
				,APPLY_DATE
				,TURN
				,RATING_DIVISION_CODE
				,RATING
				,NORMAL_SALARY_PAY
				,ABILITY_SALARY_PAY
				,ACHIEVE_SALARY_PAY
				,MONTHLY_BONUS
				,CAR_SUPPORT_PAY
				,HOLIDAY_BONUS
				,NOTE
				,CRTBY
				,CRTIP
				,CRTDT
				,AMNBY
				,AMNIP
				,AMNDT
				,COMM_CORPORATION_ID)
			VALUES
				(SL_BI_ACH_SALARY_PAY_S.nextval
				,#{APPLY_DATE}
				,#{TURN}
				,#{RATING_DIVISION_CODE}
				,#{RATING}
				,#{NORMAL_SALARY_PAY}
				,#{ABILITY_SALARY_PAY}
				,#{ACHIEVE_SALARY_PAY}
				,#{MONTHLY_BONUS}
				,#{CAR_SUPPORT_PAY}
				,#{HOLIDAY_BONUS}
				,#{NOTE}
				,#{CRTBY}
				,#{CRTIP}
				,SYSDATE
				,#{AMNBY}
				,#{AMNIP}
				,SYSDATE
				,#{LOGIN_CORPORATION_ID});
			end}
	</insert>

	<!-- ******************************************* -->
	<!-- 업적연봉 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_ACHIEVE_SALARY_PAY_PROC" parameterType="hashmap">
		{CALL
			declare
			begin
			delete from SL_BI_ACH_SALARY_PAY where SL_BI_ACH_SALARY_PAY_ID = #{SL_BI_ACH_SALARY_PAY_ID} and APPLY_DATE = #{APPLY_DATE};
			INSERT into SL_BI_ACH_SALARY_PAY
				( SL_BI_ACH_SALARY_PAY_ID
				,APPLY_DATE
				,TURN
				,RATING_DIVISION_CODE
				,RATING
				,NORMAL_SALARY_PAY
				,ABILITY_SALARY_PAY
				,ACHIEVE_SALARY_PAY
				,MONTHLY_BONUS
				,CAR_SUPPORT_PAY
				,HOLIDAY_BONUS
				,NOTE
				,CRTBY
				,CRTIP
				,CRTDT
				,AMNBY
				,AMNIP
				,AMNDT
				,COMM_CORPORATION_ID
				)
			VALUES
				(SL_BI_ACH_SALARY_PAY_S.nextval
				,#{APPLY_DATE}
				,#{TURN}
				,#{RATING_DIVISION_CODE}
				,#{RATING}
				,#{NORMAL_SALARY_PAY}
				,#{ABILITY_SALARY_PAY}
				,#{ACHIEVE_SALARY_PAY}
				,#{MONTHLY_BONUS}
				,#{CAR_SUPPORT_PAY}
				,#{HOLIDAY_BONUS}
				,#{NOTE}
				,#{CRTBY}
				,#{CRTIP}
				,SYSDATE
				,#{AMNBY}
				,#{AMNIP}
				,SYSDATE
				,#{LOGIN_CORPORATION_ID});
			end}
	</update>

	<!-- ******************************************* -->
	<!-- 업적연봉 삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_ACHIEVE_SALARY_PAY_PROC">
		delete from SL_BI_ACH_SALARY_PAY where SL_BI_ACH_SALARY_PAY_ID = #{SL_BI_ACH_SALARY_PAY_ID}
	</delete>

	<!-- ******************************************* -->
	<!-- 급여 계산식 항목 리스트 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_PAY_CALCULATE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
	      SELECT sl_bi_pay_calculate_id
	            ,pay_type_code
	            ,pay_ded_code
	            ,pay_item_code
	            ,sl_pay_seq
	            ,calculate_txt1
	            ,calculate_txt
	            ,substr(nvl(a.month_yn, '000000000000'), 1, 1) AS m1
	            ,substr(nvl(a.month_yn, '000000000000'), 2, 1) AS m2
	            ,substr(nvl(a.month_yn, '000000000000'), 3, 1) AS m3
	            ,substr(nvl(a.month_yn, '000000000000'), 4, 1) AS m4
	            ,substr(nvl(a.month_yn, '000000000000'), 5, 1) AS m5
	            ,substr(nvl(a.month_yn, '000000000000'), 6, 1) AS m6
	            ,substr(nvl(a.month_yn, '000000000000'), 7, 1) AS m7
	            ,substr(nvl(a.month_yn, '000000000000'), 8, 1) AS m8
	            ,substr(nvl(a.month_yn, '000000000000'), 9, 1) AS m9
	            ,substr(nvl(a.month_yn, '000000000000'), 10, 1) AS m10
	            ,substr(nvl(a.month_yn, '000000000000'), 11, 1) AS m11
	            ,substr(nvl(a.month_yn, '000000000000'), 12, 1) AS m12
	            ,month_yn
	            ,a.use_yn
	            ,a.note
	            ,sl_util_pkg.pay_name2(#{v_corporation_id}, a.pay_item_code, #{v_lang_code}) AS pay_item_name
	            ,pay_division_code
	        FROM sl_bi_pay_calculate a
	       WHERE a.sl_bi_pay_calculate_id = a.sl_bi_pay_calculate_id
	         AND a.comm_corporation_id = #{v_corporation_id}
		 <if test="v_s_pay_division_code != null and v_s_pay_division_code != '' and v_s_pay_division_code != '%'.toString()">
	   			and a.PAY_DIVISION_CODE = #{v_s_pay_division_code}
		 </if>
		 <if test="v_s_pay_type_code != null and v_s_pay_type_code != '' and v_s_pay_type_code != '%'.toString()">
			   and a.PAY_TYPE_CODE = #{v_s_pay_type_code}
		 </if>
		 <if test="v_s_pay_ded_code != null and v_s_pay_ded_code != '' and v_s_pay_ded_code != '%'.toString()">
			   and a.PAY_DED_CODE = #{v_s_pay_ded_code}
		 </if>
		ORDER BY SL_PAY_SEQ ASC
	</select>

	<!-- ******************************************* -->
	<!-- 급여 계산식 기준항목 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_PAY_TREE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select TITLE AS TITLE
			 , CD    AS CODE
			 , NM    AS NM
		     , UP_CODE
		from table(sl_util_pkg.sl_bi_pay_list(#{v_corporation_id}, #{v_lang_code}))
	</select>
	<select id="S_SL_BI_PAY" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select TITLE AS TITLE
			 , CD    AS CD
			 , NM    AS NM
		from table(sl_util_pkg.sl_bi_pay_list(#{v_corporation_id}, #{v_lang_code}))
	</select>


	<!-- 급여 계산식 항목 리스트 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_BI_PAY_CALCULATE_TXT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT SL_BI_PAY_CALCULATE_ID
			 , PAY_DIVISION_CODE
			 , PAY_ITEM_CODE
			 , CALCULATE_TXT
		FROM SL_BI_PAY_CALCULATE
		WHERE SL_BI_PAY_CALCULATE_ID = #{SL_BI_PAY_CALCULATE_ID}
	</select>

	<insert id="I_SL_BI_PAY_CALCULATE_PROC" parameterType="hashmap">
		<include refid="config.INSERT_SL_BI_PAY_CALCULATE"/>
	</insert>

	<!-- ******************************************* -->
	<!-- 계산식등록 변경 -->
	<!-- ******************************************* -->
	<update id="U_SL_BI_PAY_CALCULATE_PROC" parameterType="hashmap">
		{CALL
			declare begin
			<include refid="config.DELETE_SL_BI_PAY_CALCULATE"/>;
			<include refid="config.INSERT_SL_BI_PAY_CALCULATE"/>;
		end}
	</update>

	<!-- ******************************************* -->
	<!-- 계산식삭제 -->
	<!-- ******************************************* -->
	<delete id="D_SL_BI_PAY_CALCULATE_PROC">
		delete from SL_BI_PAY_CALCULATE where SL_BI_PAY_CALCULATE_ID = #{SL_BI_PAY_CALCULATE_ID} AND COMM_CORPORATION_ID = #{LOGIN_CORPORATION_ID}
	</delete>

	<!-- ******************************************* -->
	<!-- 급여계산식 법인복사 -->
	<!-- ******************************************* -->
	<select id="P_SL_BI_PAY_CALCULATE_COPY" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{CALL
			declare
  			v_comm_corporation_id number;
  			v_table_key number;

			Cursor cu1 IS
				SELECT comm_corporation_id
		          FROM comm_corporation
		         WHERE USE_YN='1'
		         <![CDATA[and comm_corporation_id <> #{v_fr_corp_id} ]]>
		           and comm_corporation_id = nvl(#{v_to_corp_id},comm_corporation_id);
			begin
				open cu1;

				loop
					Fetch cu1 into v_comm_corporation_id;
					exit when cu1%notFound;

					delete
		              from SL_BI_PAY_CALCULATE
		             where comm_corporation_id = v_comm_corporation_id;

					   insert into sl_bi_pay_calculate
                                     (
                                      SL_BI_PAY_CALCULATE_ID
                                      ,COMM_CORPORATION_ID
                                      ,PAY_TYPE_CODE
                                      ,PAY_DED_CODE
                                      ,PAY_ITEM_CODE
                                      ,SL_PAY_SEQ
                                      ,CALCULATE_TXT
                                      ,MONTH_YN
                                      ,USE_YN
                                      ,NOTE
                                      ,CRTBY
                                      ,CRTIP
                                      ,CRTDT
                                      ,AMNBY
                                      ,AMNIP
                                      ,AMNDT
                                      ,PAY_DIVISION_CODE
                                      )
                              select  SL_BI_PAY_CALCULATE_S.NEXTVAL
                                     ,v_comm_corporation_id
                                     ,PAY_TYPE_CODE
                                     ,PAY_DED_CODE
                                     ,PAY_ITEM_CODE
                                     ,SL_PAY_SEQ
                                     ,CALCULATE_TXT
                                     ,MONTH_YN
                                     ,USE_YN
                                     ,NOTE
                                     ,#{CRTBY}
                                     ,#{CRTIP}
                                     ,SYSDATE
                                     ,#{CRTBY}
                                     ,#{CRTIP}
                                     ,SYSDATE
                                     ,PAY_DIVISION_CODE
                                from sl_bi_pay_calculate
                               where comm_corporation_id = #{v_fr_corp_id};
				end loop;

				close cu1;

				exception
					when others then
						#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg} := sqlerrm;
						rollback;
			end
		}
	</select>

	<!-- ******************************************* -->
	<!-- 사원별 급여기준 등록 -->
	<!-- ******************************************* -->
	<select id="S_SL_BON_PAY_BASIS_MU" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT T1.SL_BI_MASTER_ID
			  ,T1.HR_EMPLOYEE_MASTER_ID
			  ,HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE, #{v_lang_code}) AS DEPT_NAME
			  ,T1.PAY_YN
			  ,T1.BONUS_YN
			  ,T1.YEAREND_SETTLEMENT_YN
			  ,T1.INSURANCE_YN
			  ,T1.EMPLOYMENT_INSURANCE_YN
			  ,T1.PENSION_YN
			  ,T1.RE_EST_YN
			  ,T1.BASE_RETIRE_DATE
			  ,T1.INTERIM_PAYMENT_DATE
			  ,T1.REDUCTION_APPLY_CODE
			  ,T1.REDUCTION_RATE
			  ,T1.REDUCTION_START_DATE
			  ,T1.REDUCTION_END_DATE
			  ,T1.COMM_CORPORATION_ID
			  ,T1.RETURN_REDUCT_YN
			  ,T1.SEVERANCE_PAY_TYPE_CODE
			  ,T1.SEVERANCE_PAY_JOIN_DATE
		FROM SL_BI_MASTER T1
		LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = T1.hr_employee_master_id
		WHERE 1 = 1
		  AND T1.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_dept_name != null and v_dept_name != '' and v_dept_name != '%'.toString()">
		  AND HR_UTIL_PKG.DATE_HR_DEPT_NAME(T1.HR_EMPLOYEE_MASTER_ID, fn_sysdate, #{v_lang_code}) = #{v_dept_name}
		</if>
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
			AND T1.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		</if>
		<if test="v_chk == 1">
			AND HR_UTIL_PKG.date_work_state_code(T1.HR_EMPLOYEE_MASTER_ID, fn_sysdate) != 'hr009020'
		</if>
		ORDER BY HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID)     ASC
	</select>
	<select id="S_SL_BON_PAY_BASIS_MU_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_BON_PAY_BASIS_MU_ID
			  ,A.HR_EMPLOYEE_MASTER_ID
			  ,A.APPLY_DATE
			  ,A.SALARY_YEAR_AMT
			  ,A.SALARY_MOMTH_AMT
			  ,A.SALARY_DAILY_AMT
			  ,A.SALARY_HOURLY_AMT
			  ,A.PAY_AMT1
			  ,A.PAY_AMT2
			  ,A.PAY_AMT3
			  ,A.PAY_AMT4
			  ,A.WITHHOLDING_TAX
			  ,A.SEVERANCE_PAY_CODE
			  ,A.TAX_FREE_AMT
			  ,A.FOREIGN_CORP_YN
			  ,A.FOREIGNER_TAX_RATE
			  ,A.ABROAD_YN
			  ,A.RESIDENCE_CODE
			  ,A.COMM_CORPORATION_ID
			  ,A.COM_HOURLY_AMT
		FROM SL_BON_PAY_BASIS_MU A
		WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
		AND A.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		<if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
			AND HR_UTIL_PKG.DATE_PAY_TYPE_CODE(A.HR_EMPLOYEE_MASTER_ID, A.APPLY_DATE) = #{v_pay_type_code}
		</if>
		<if test="v_app_dt != null and v_app_dt != '' and v_app_dt != '%'.toString()">
			AND A.APPLY_DATE <![CDATA[ <= ]]> #{v_app_dt}
		</if>
		ORDER BY A.APPLY_DATE DESC
	</select>
	<!-- 사원생성 -->
	<insert id="I_SL_BON_PAY_BASIS_MU_PROC" parameterType="hashmap">
		{CALL
		    DECLARE
		    	v_check NUMBER;
		    BEGIN
				SELECT COUNT(1) AS CNT
				    INTO v_check
				FROM HR_EMPLOYEE_MASTER T1
				WHERE NOT EXISTS (SELECT 1 FROM SL_BI_MASTER T2 WHERE T2.HR_EMPLOYEE_MASTER_ID = T1.HR_EMPLOYEE_MASTER_ID);

		    	IF v_check > 0 THEN
					INSERT INTO SL_BI_MASTER
						(SL_BI_MASTER_ID
						,HR_EMPLOYEE_MASTER_ID
						,COMM_CORPORATION_ID
						,PAY_YN
						,YEAREND_SETTLEMENT_YN
						,INSURANCE_YN
						,EMPLOYMENT_INSURANCE_YN
						,PENSION_YN
						,CRTBY,CRTDT,CRTIP
						,AMNBY,AMNDT,AMNIP)
					SELECT SL_BI_MASTER_S.NEXTVAL
						  ,T1.HR_EMPLOYEE_MASTER_ID
						  ,T1.COMM_CORPORATION_ID
						  ,CASE WHEN SUBSTR(T1.EMP_NO, 0, 1) = '6' THEN '0'
						  ELSE '1'
						  END
						  ,CASE WHEN SUBSTR(T1.EMP_NO, 0, 1) = '6' THEN '0'
						  ELSE '1'
						  END
						  ,CASE WHEN SUBSTR(T1.EMP_NO, 0, 1) = '6' THEN '0'
						  ELSE '1'
						  END
						  ,CASE WHEN SUBSTR(T1.EMP_NO, 0, 1) = '6' THEN '0'
						  ELSE '1'
						  END
						  ,CASE WHEN SUBSTR(T1.EMP_NO, 0, 1) = '6' THEN '0'
						  ELSE '1'
						  END
						  ,#{CRTBY}
						  ,SYSDATE
						  ,#{CRTIP}
					  	  ,#{CRTBY}
						  ,SYSDATE
						  ,#{CRTIP}
					FROM HR_EMPLOYEE_MASTER T1
					WHERE NOT EXISTS (SELECT 1 FROM SL_BI_MASTER T2 WHERE T2.HR_EMPLOYEE_MASTER_ID = T1.HR_EMPLOYEE_MASTER_ID);
		    	END IF;
		    END}
	</insert>

	<select id="S_SL_BON_PAY_ACCOUNT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_BON_PAY_ACCOUNT_ID
			 ,A.HR_EMPLOYEE_MASTER_ID
			 ,B.EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
		     ,comm_util_pkg.emp_title(a.hr_employee_master_id, #{v_corporation_id}) AS emp_title
			 ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, fn_sysdate, #{v_lang_code}) AS DEPT_NAME
			 ,A.APPLY_DATE
			 ,A.PAY_DIVISION_CODE
			 ,COMM_UTIL_PKG.wrk_code_name(#{v_corporation_id}, 'sl001', A.PAY_DIVISION_CODE, #{v_lang_code}) AS PAY_DIVISION_NAME
			 ,A.BANK_CODE
		     ,COMM_UTIL_PKG.wrk_code_name(#{v_corporation_id}, 'comm003', A.BANK_CODE, #{v_lang_code}) AS BANK_NAME
			 ,A.ACCOUNT_NUMBER
		     ,A.ACCOUNT_NUMBER_TEMP
			 ,A.ACCOUNT_HOLDER
			 ,A.NOTE
			 ,B.JOIN_DATE
			 ,B.RETIRE_DATE
			 ,A.COMM_CORPORATION_ID
		FROM SL_BON_PAY_ACCOUNT A
		LEFT JOIN HR_EMPLOYEE_MASTER B ON A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID
		WHERE B.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_pay_div_code != null and v_pay_div_code != '' and v_pay_div_code != '%'.toString()">
			AND A.PAY_DIVISION_CODE = #{v_pay_div_code}
		</if>
		<if test="v_dept_name != null and v_dept_name != '' and v_dept_name != '%'.toString()">
			AND HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, A.APPLY_DATE, #{v_lang_code}) LIKE '%' || #{v_dept_name} || '%'
		</if>
		<if test="v_emp_id != null and v_emp_id != '' and v_emp_id != '%'.toString()">
			AND B.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		<if test="v_chk == 1">
			AND HR_UTIL_PKG.date_work_state_code(A.HR_EMPLOYEE_MASTER_ID, fn_sysdate) != 'hr009020'
		</if>
		<if test="v_app_dt != null and v_app_dt != '' and v_app_dt != '%'.toString()">
			AND A.APPLY_DATE = (SELECT MAX(X.APPLY_DATE)
			FROM SL_BON_PAY_ACCOUNT X
			WHERE X.HR_EMPLOYEE_MASTER_ID = A.HR_EMPLOYEE_MASTER_ID
			AND X.APPLY_DATE <![CDATA[ <= ]]> REPLACE(#{v_app_dt}, '-', ''))
			AND REPLACE(#{v_app_dt}, '-', '') BETWEEN B.JOIN_DATE AND NVL(B.RETIRE_DATE, '29991231')
		</if>
		ORDER BY B.EMP_NO
	</select>

	<!-- ******************************************* -->
	<!-- 급여지급차수 등록 (급여대상자 조회)-->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_RECIPIENT" parameterType="hashmap" resultType="hashmap">
		SELECT B.PAYMENT_COUNT
			 , A.SL_PAY_RECIPIENT_ID
			 , A.SL_BON_PAYMENT_COUNT_ID
			 , A.HR_EMPLOYEE_MASTER_ID
			 , HR_UTIL_PKG.EMP_NO(A.HR_EMPLOYEE_MASTER_ID) 					 AS EMP_NO
			 , HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 , COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, A.COMM_CORPORATION_ID) AS EMP_TITLE
			 , COMM_UTIL_PKG.WRK_CODE_NAME(A.COMM_CORPORATION_ID, 'hr009', A.WORK_STATE_CODE, #{v_lang_code}) AS WORK_STATE_NAME
			 , HR_UTIL_PKG.dept_name(A.HR_DEPARTMENT_CODE, #{v_lang_code})	as DEPT_NAME
			 , COMM_UTIL_PKG.WRK_CODE_NAME(A.COMM_CORPORATION_ID, 'hr003', A.RANK_CODE, #{v_lang_code}) AS RANK_NAME
			 , COMM_UTIL_PKG.DATEFORMAT(C.JOIN_DATE, 'YYYY-MM-DD') AS JOIN_DATE
			 , A.PAY_TYPE_CODE
			 , (SELECT C_TO_DATE FROM TABLE(SL_CALCULATE_PKG.BI_PAY_DT2(A.SL_BON_PAYMENT_COUNT_ID))) AS C_TO_DATE
		FROM SL_PAY_RECIPIENT A
		 JOIN SL_BON_PAYMENT_COUNT B ON (A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID)
		 JOIN HR_EMPLOYEE_MASTER C ON A.HR_EMPLOYEE_MASTER_ID = C.HR_EMPLOYEE_MASTER_ID
		WHERE A.SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID}
		ORDER BY WORK_STATE_NAME ASC, EMP_NO ASC
	</select>
	<!-- ******************************************* -->
	<!-- 급여지급차수 등록 -->
	<!-- ******************************************* -->
	<select id="S_SL_BON_PAYMENT_COUNT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT  A.sl_bon_payment_count_id
			, A.comm_corporation_id
			, A.pay_type_code
			, A.payment_count
			, A.pay_division_code
			, A.work_contents
			, A.payment_month
			, A.payment_date
			, A.payment_rate
			, A.retirement_except
			, COMM_UTIL_PKG.wrk_code_name(#{v_corporation_id}, 'sl001', A.PAY_DIVISION_CODE, #{v_lang_code}) AS PAY_DIVISION_NAME
			, (SELECT C_TO_DATE FROM TABLE(SL_CALCULATE_PKG.BI_PAY_DT2(A.SL_BON_PAYMENT_COUNT_ID))) AS C_TO_DATE
		FROM sl_bon_payment_count a
		WHERE  A.comm_corporation_id = #{v_corporation_id}
		<if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
			and  A.PAY_TYPE_CODE = #{v_pay_type_code}
		</if>
		<if test="v_month != null and v_month != '' and v_month != '%'.toString()">
			and  A.payment_month =  #{v_month}
		</if>
	</select>
	<insert id="I_SL_BON_PAYMENT_COUNT_PROC" parameterType="hashmap" statementType="CALLABLE">
		{CALL
			DECLARE
			v_sl_bon_payment_count_id number;
			v_sl_pay_end_id number;
			BEGIN
			v_sl_bon_payment_count_id := SL_BON_PAYMENT_COUNT_S.NEXTVAL;
			v_sl_pay_end_id := SL_PAY_END_S.NEXTVAL;

			INSERT INTO SL_BON_PAYMENT_COUNT
			(SL_BON_PAYMENT_COUNT_ID
				,COMM_CORPORATION_ID
				,PAY_DIVISION_CODE
				,PAY_TYPE_CODE
				,PAYMENT_COUNT
				,PAYMENT_MONTH
				,PAYMENT_DATE
				,PAYMENT_RATE
				,RETIREMENT_EXCEPT
				,WORK_CONTENTS
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
			(v_sl_bon_payment_count_id
				,#{LOGIN_CORPORATION_ID}
				,#{PAY_DIVISION_CODE}
				,#{PAY_TYPE_CODE}
				,#{PAYMENT_COUNT}
				,#{PAYMENT_MONTH}
				,#{PAYMENT_DATE}
				,#{PAYMENT_RATE}
				,#{RETIREMENT_EXCEPT}
				,#{WORK_CONTENTS}
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});

				-- 급상여마감 테이블 추가
				INSERT INTO SL_PAY_END
			(SL_PAY_END_ID
				,COMM_CORPORATION_ID
				,SL_BON_PAYMENT_COUNT_ID
				,END_YN
				,CRTBY
				,CRTDT
				,CRTIP
				,AMNBY
				,AMNDT
				,AMNIP)
			VALUES
			(v_sl_pay_end_id
				,#{LOGIN_CORPORATION_ID}
				,v_sl_bon_payment_count_id
				,'0'
				,#{CRTBY}
				,SYSDATE
				,#{CRTIP}
				,#{AMNBY}
				,SYSDATE
				,#{AMNIP});

			-- 급상여마감 로그 테이블 추가
			INSERT INTO SL_PAY_END_LOG
			(SL_PAY_END_LOG_ID
				,SL_PAY_END_ID
				,COMM_CORPORATION_ID
				,SL_BON_PAYMENT_COUNT_ID
				,END_YN)
			VALUES
			(SL_PAY_END_LOG_S.NEXTVAL
				,v_sl_pay_end_id
				,#{LOGIN_CORPORATION_ID}
				,v_sl_bon_payment_count_id
				,'0');
			END}
	</insert>
	<update id="U_SL_BON_PAYMENT_COUNT_PROC" parameterType="hashmap" statementType="CALLABLE" >
		DECLARE
		v_end_yn char(1);
		BEGIN

		SELECT NVL(MAX(END_YN), '0')
		INTO v_end_yn
		FROM SL_PAY_END
		WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};

		IF v_end_yn = '1'
	    	THEN
	    		--급여마감되었습니다.
	    		raise_application_error(-20000, 'ORA-20026');
		END IF;

		UPDATE SL_BON_PAYMENT_COUNT
		SET PAY_DIVISION_CODE = #{PAY_DIVISION_CODE}
		  ,PAY_TYPE_CODE     = #{PAY_TYPE_CODE}
		  ,PAYMENT_COUNT     = #{PAYMENT_COUNT}
		  ,PAYMENT_MONTH     = #{PAYMENT_MONTH}
		  ,PAYMENT_DATE      = #{PAYMENT_DATE}
		  ,PAYMENT_RATE      = #{PAYMENT_RATE}
		  ,RETIREMENT_EXCEPT = #{RETIREMENT_EXCEPT}
		  ,WORK_CONTENTS	   = #{WORK_CONTENTS}
		  ,AMNBY             = #{AMNBY}
		  ,AMNDT             = #{AMNDT}
		  ,AMNIP             = #{AMNIP}
		WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};
		END;
	</update>
	<delete id="D_SL_BON_PAYMENT_COUNT_PROC" parameterType="hashmap" statementType="CALLABLE" >
		DECLARE
		v_end_yn char(1);
		BEGIN

		SELECT NVL(MAX(END_YN), '0')
		INTO v_end_yn
		FROM SL_PAY_END
		WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};

		IF v_end_yn = '1'
	    	THEN
	    		--급여마감되었습니다.
	    		raise_application_error(-20000, 'ORA-20026');
		END IF;

			--급여지급차수 테이블 삭제
		DELETE FROM SL_BON_PAYMENT_COUNT WHERE  SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};
		--급상여마감 테이블 삭제
		DELETE FROM SL_PAY_END WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};
		--급상여마감 로그 테이블 삭제
		DELETE FROM SL_PAY_END_LOG WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};
		END;
	</delete>
	<!-- 급여지급차수등록(급여대상자 추가) -->
	<insert id="I_SL_PAY_RECIPIENT_PROC" parameterType="hashmap" statementType="CALLABLE" >
		DECLARE
		v_end_yn char(1);
		BEGIN

		SELECT NVL(MAX(END_YN), '0')
		INTO v_end_yn
		FROM SL_PAY_END
		WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};

		IF v_end_yn = '1'
	    	THEN
	    		--급여마감되었습니다.
	    		raise_application_error(-20000, 'ORA-20026');
		END IF;

		INSERT INTO sl_pay_recipient(
									  sl_pay_recipient_id
									, payment_month
									, sl_bon_payment_count_id
									, hr_employee_master_id
									, pay_division_code
									, comm_corporation_id
									, hr_department_code
									, work_state_code
									, pay_type_code
									, service_division_code
									, service_type_code
									, job_type_code
									, position_code
									, duty_code
									, rank_code
									, rank_year_code
									, at_from_date
									, at_to_date
									, pay_amt
									, ded_amt
									, paid_amt
									, calc_paid_amt
									, tax_amt
									, taxfree_amt
									, crtby, crtdt, crtip
									, amnby, amndt, amnip
									, comm_business_id
		)
		SELECT SL_PAY_RECIPIENT_S.NEXTVAL	AS SL_PAY_RECIPIENT_ID
			 , (SELECT PAYMENT_MONTH FROM SL_BON_PAYMENT_COUNT WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID})	AS PAYMENT_MONTH
			 , #{SL_BON_PAYMENT_COUNT_ID}	AS SL_BON_PAYMENT_COUNT_ID
			 , A.HR_EMPLOYEE_MASTER_ID		AS HR_EMPLOYEE_MASTER_ID
			 , (SELECT PAY_DIVISION_CODE FROM SL_BON_PAYMENT_COUNT WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID})	AS PAY_DIVISION_CODE
			 , A.comm_corporation_id	AS COMM_CORPORATION_ID
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'HR_DEPARTMENT_CODE', B.C_TO_DATE, #{v_lang_code})		AS HR_DEPARTMENT_CODE
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'WORK_STATE_CODE', B.C_TO_DATE, #{v_lang_code})		AS WORK_STATE_CODE
			 , (SELECT PAY_TYPE_CODE FROM SL_BON_PAYMENT_COUNT WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID})	AS PAY_TYPE_CODE
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'SERVICE_DIVISION_CODE', B.C_TO_DATE, #{v_lang_code})		AS service_division_code
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'SERVICE_TYPE_CODE', B.C_TO_DATE, #{v_lang_code})		AS service_type_code
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'JOB_TYPE_CODE', B.C_TO_DATE, #{v_lang_code})		AS job_type_code
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'POSITION_CODE', B.C_TO_DATE, #{v_lang_code}) 		AS POSITION_CODE
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'DUTY_CODE', B.C_TO_DATE, #{v_lang_code})	  		AS DUTY_CODE
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'RANK_CODE', B.C_TO_DATE, #{v_lang_code})	  		AS RANK_CODE
			 , HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'RANK_YEAR_CODE', B.C_TO_DATE, #{v_lang_code})	  	AS RANK_YEAR_CODE
			 , CASE WHEN TO_NUMBER(A.GROUP_JOIN_DATE) > TO_NUMBER(B.C_FROM_DATE)
						THEN A.GROUP_JOIN_DATE
					ELSE B.C_FROM_DATE
			END
			 , CASE WHEN TO_NUMBER(NVL(TRIM(A.RETIRE_DATE), '99991231')) > TO_NUMBER(B.C_TO_DATE)
						THEN B.C_TO_DATE
					ELSE A.RETIRE_DATE
			END
			 , 0 AS pay_amt
			 , 0 AS ded_amt
			 , 0 AS paid_amt
			 , 0 AS calc_paid_amt
			 , 0 AS tax_amt
			 , 0 AS taxfree_amt
			 , #{CRTBY}, SYSDATE, #{CRTIP}
			 , #{AMNBY}, SYSDATE, #{AMNIP}
			 , hr_util_pkg.date_appointment(A.hr_employee_master_id, 'COMM_BUSINESS_ID', B.C_TO_DATE, 'KO')
		FROM HR_EMPLOYEE_MASTER A
				 JOIN TABLE(sl_calculate_pkg.bi_pay_dt2(#{SL_BON_PAYMENT_COUNT_ID})) B ON (A.COMM_CORPORATION_ID = B.COMM_CORPORATION_ID)
		WHERE A.HR_EMPLOYEE_MASTER_ID = #{HR_EMPLOYEE_MASTER_ID}
		;
		END;
	</insert>
	<!-- 급여지급차수등록(급여대상자삭제) -->
	<delete id="D_SL_PAY_RECIPIENT_PROC" parameterType="hashmap" statementType="CALLABLE" >
		DECLARE
		v_end_yn char(1);
		BEGIN

		SELECT NVL(MAX(END_YN), '0')
		INTO v_end_yn
		FROM SL_PAY_END
		WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};

		IF v_end_yn = '1'
	    	THEN
	    		--급여마감되었습니다.
	    		raise_application_error(-20000, 'ORA-20026');
		END IF;

	    	--급여마스터
		DELETE
		FROM SL_PAY_RECIPIENT
		WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID}
		  AND SL_PAY_RECIPIENT_ID = #{SL_PAY_RECIPIENT_ID}
		;
		--급여상세
		DELETE
		FROM SL_PAY_DETAIL
		WHERE SL_PAY_RECIPIENT_ID = #{SL_PAY_RECIPIENT_ID}
		;
		END;
	</delete>

	<select id="S_SL_BON_FIXED_ALLOWANCE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
        SELECT a.hr_employee_master_id
		      ,a.sl_bon_fixed_allowance_id
		      ,a.hr_employee_master_id
              ,a.pay_division_code
		      ,a.pay_item_code
		      ,sl_util_pkg.pay_name2(#{v_corporation_id}, a.pay_item_code, #{v_lang_code}) AS pay_item_name
		      ,comm_util_pkg.wrk_code_name(#{v_corporation_id}, 'sl002', d.pay_ded_code, #{v_lang_code}) AS pay_ded_name
		      ,a.wage_price
		      ,a.apply_from_date
		      ,a.apply_to_date
		      ,a.note
		      ,b.emp_no
		      ,hr_util_pkg.emp_name(a.hr_employee_master_id, #{v_lang_code}) AS emp_name
		      ,comm_util_pkg.emp_title(a.hr_employee_master_id, #{v_corporation_id}) AS emp_title
		      ,hr_util_pkg.date_hr_dept_name(a.hr_employee_master_id, a.apply_to_month || '01', #{v_lang_code}) AS dept_name
        	  ,A.COMM_CORPORATION_ID
		  FROM sl_bon_fixed_allowance a
         CROSS JOIN (SELECT #{v_pay_month} V_MONTH, #{v_pay_month}||'01' AS base_sdt, TO_CHAR(LAST_DAY(TO_DATE(#{v_pay_month}, 'YYYYMM')), 'YYYYMMDD') base_edt FROM DUAL)		  
		  LEFT JOIN hr_employee_master b ON a.hr_employee_master_id = b.hr_employee_master_id
		  LEFT JOIN sl_bi_master c ON b.hr_employee_master_id = c.hr_employee_master_id
		  LEFT JOIN sl_bi_code d ON a.pay_item_code = d.pay_item_code
		                        AND a.comm_corporation_id = d.comm_corporation_id
		 WHERE a.sl_bon_fixed_allowance_id = a.sl_bon_fixed_allowance_id
		   AND a.comm_corporation_id = #{v_corporation_id}
		<if test="v_pay_month != null and v_pay_month != '' and v_pay_month != '%'.toString()">
			<![CDATA[
		   AND (a.APPLY_FROM_DATE <= base_edt AND nvl(a.APPLY_TO_DATE, '29991231') >= base_sdt)
  			]]>
		</if>
		<if test="s_pay_division_code != null and s_pay_division_code != '' and s_pay_division_code != '%'.toString()">
		   AND a.pay_division_code = #{s_pay_division_code}
		</if>
		<if test="s_pay_item_code != null and s_pay_item_code != '' and s_pay_item_code != '%'.toString()">
		   AND a.pay_item_code = #{s_pay_item_code} 
		</if>
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
			and ((instr(b.emp_no, #{v_emp_no}, 1) > 0) or (instr(b.emp_name || b.emp_name_en || b.emp_name_ch, #{v_emp_name}, 1) > 0))
		</if>
</select>

	<select id="S_SL_BON_VARIABLE_ALLOWANCE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.HR_EMPLOYEE_MASTER_ID
			  ,A.SL_BON_VARIABLE_ALLOWANCE_ID
		      ,A.PAY_DIVISION_CODE
			  ,A.PAY_ITEM_CODE AS PAY_ITEM_CODE
			  ,SL_UTIL_PKG.PAY_NAME2(#{v_corporation_id}, A.PAY_ITEM_CODE, #{v_lang_code}) AS PAY_ITEM_NAME
			  ,COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'sl002', D.PAY_DED_CODE, #{v_lang_code}) AS PAY_DED_NAME
			  ,A.BELONG_MONTH
			  ,A.WAGE_PRICE
			  ,A.WHETHER_ADDED
			  ,A.NOTE
			  ,B.EMP_NO AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
		      ,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, A.BELONG_MONTH || '01', #{v_lang_code}) AS DEPT_NAME
			  ,A.COMM_CORPORATION_ID
		FROM SL_BON_VARIABLE_ALLOWANCE A
		LEFT JOIN HR_EMPLOYEE_MASTER B ON A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID
		LEFT JOIN SL_BI_MASTER C ON B.HR_EMPLOYEE_MASTER_ID = C.HR_EMPLOYEE_MASTER_ID
		LEFT JOIN SL_BI_CODE D ON A.PAY_ITEM_CODE = D.PAY_ITEM_CODE
							  AND A.COMM_CORPORATION_ID = D.COMM_CORPORATION_ID
		WHERE A.SL_BON_VARIABLE_ALLOWANCE_ID = A.SL_BON_VARIABLE_ALLOWANCE_ID
		AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_pay_month != null and v_pay_month != '' and v_pay_month != '%'.toString()">
		AND A.BELONG_MONTH = #{v_pay_month}
		</if>
		<if test="s_pay_division_code != null and s_pay_division_code != '' and s_pay_division_code != '%'.toString()">
		AND A.PAY_DIVISION_CODE = #{s_pay_division_code}
		</if>
		<if test="s_pay_item_code != null and s_pay_item_code != '' and s_pay_item_code != '%'.toString()">
		AND a.pay_item_code = #{s_pay_item_code} 
		</if>
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
		AND ((instr(b.emp_no, #{v_emp_no}, 1) > 0) or (instr(b.emp_name || b.emp_name_en || b.emp_name_ch, #{v_emp_name}, 1) > 0))
		</if>
</select>

	<select id="S_SL_BON_EXCEPTION_PAYMENT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT a.hr_employee_master_id
		      ,a.sl_bon_exception_payment_id
		      ,a.payment_rate
		      ,a.belong_month
		      ,a.note
		      ,a.comm_corporation_id
		      ,b.emp_no AS EMP_NO
		      ,hr_util_pkg.emp_name(a.hr_employee_master_id, #{v_lang_code}) AS EMP_NAME
			  ,comm_util_pkg.emp_title(a.hr_employee_master_id, #{v_corporation_id}) AS EMP_TITLE
		      ,comm_util_pkg.wrk_code_name(#{v_corporation_id}, 'hr010', c.pay_type_code, #{v_lang_code}) AS pay_type_name
		      ,hr_util_pkg.date_hr_dept_name(a.hr_employee_master_id, a.belong_month || '01', #{v_lang_code}) AS DEPT_NAME
		      ,a.pay_division_code
			  ,A.COMM_CORPORATION_ID
		  FROM sl_bon_exception_payment a
		  LEFT JOIN hr_employee_master b ON (a.hr_employee_master_id = b.hr_employee_master_id)
		  LEFT JOIN hr_employee_appointment c ON (b.hr_employee_master_id = c.hr_employee_master_id)
		 WHERE a.sl_bon_exception_payment_id = a.sl_bon_exception_payment_id
		   AND a.comm_corporation_id = #{v_corporation_id}
		<if test="s_div_code != null and s_div_code != '' and s_div_code != '%'.toString()">
		   and a.PAY_DIVISION_CODE = #{s_div_code}
		</if>
		<if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
		   and C.PAY_TYPE_CODE = #{v_pay_type_code}
		</if>
		<if test="v_pay_month != null and v_pay_month != '' and v_pay_month != '%'.toString()">
		   and a.BELONG_MONTH = #{v_pay_month}
		</if>
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
			and ((instr(b.emp_no, #{v_emp_no}, 1) > 0) or (instr(b.emp_name || b.emp_name_en || b.emp_name_ch, #{v_emp_name}, 1) > 0))
		</if>
</select>

	<!-- ******************************************* -->
	<!-- 기준요율등록 -->
	<!-- ******************************************* -->
	<select id="S_SL_SI_INSURANCE_RATE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_SI_INSURANCE_RATE_ID
			  ,A.COMM_CORPORATION_ID
			  ,A.WELFARE_DIVISION_CODE
			  ,A.PAYMENT_MONTH
			  ,A.INSURANCE_RATE
			  ,A.LOWER_LIMIT_PRICE
			  ,A.UPPER_LIMIT_PRICE
			  ,A.NOTE
		FROM SL_SI_INSURANCE_RATE A
		WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_month != null and v_month != '' and v_month != '%'.toString()">
			AND A.PAYMENT_MONTH = (SELECT MAX(B.PAYMENT_MONTH) FROM SL_SI_INSURANCE_RATE B WHERE B.PAYMENT_MONTH <![CDATA[ <= ]]> #{v_month})
		</if>
		<if test="v_welfare_div_code != null and v_welfare_div_code != '' and v_welfare_div_code != '%'.toString()">
			AND A.WELFARE_DIVISION_CODE = #{v_welfare_div_code}
		</if>
	</select>

	<!-- ******************************************* -->
	<!-- 사원별 사회보험 등록 -->
	<!-- ******************************************* -->
	<!-- 국민연금 -->
	<select id="S_SL_SI_NPS_BASIS" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_SI_NPS_BASIS_ID
	         ,A.COMM_CORPORATION_ID
			 ,A.HR_EMPLOYEE_MASTER_ID
			 ,A.APPLY_DATE
			 ,A.SALARY_AMT
			 ,A.NPS_RATE
			 ,A.NPS_AMT
			 ,A.NOTE
			 ,B.EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 ,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, A.APPLY_DATE, #{v_lang_code}) AS DEPT_NAME
		FROM SL_SI_NPS_BASIS A
				 LEFT JOIN HR_EMPLOYEE_MASTER B ON (A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID)
		WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="v_app_date != null and v_app_date != '' and v_app_date != '%'.toString()">
			AND A.APPLY_DATE between #{v_app_date} || '01' AND LAST_DAY(TO_DATE(#{v_app_date}, 'YYYY-MM'))
		</if>
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
			AND B.EMP_NO = #{v_emp_no}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.emp_dept_code(A.HR_EMPLOYEE_MASTER_ID) = #{v_dept_code}
		</if>
		<if test="v_re_yn == 0">
			AND HR_UTIL_PKG.date_work_state_code(A.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE) <![CDATA[ <> ]]> 'hr009020'
		</if>
		ORDER BY A.APPLY_DATE DESC
	</select>
	<!-- 건강보험/요양보험 -->
	<select id="S_SL_SI_NHIS_BASIS" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_SI_NHIS_BASIS_ID
			 ,A.COMM_CORPORATION_ID
			 ,A.HR_EMPLOYEE_MASTER_ID
			 ,A.APPLY_DATE
			 ,A.SALARY_AMT
			 ,A.NHIS_RATE
			 ,A.NHIS_AMT
			 ,A.NPBS_RATE
			 ,A.NPBS_AMT
			 ,A.NOTE
			 ,B.EMP_NO AS EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 ,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, A.APPLY_DATE, #{v_lang_code}) AS DEPT_NAME
		FROM SL_SI_NHIS_BASIS A
				 LEFT JOIN HR_EMPLOYEE_MASTER B ON (A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID)
		WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(v_app_date)">
			AND A.APPLY_DATE like #{v_app_date}||'__'
		</if>
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
			AND B.EMP_NO = #{v_emp_no}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.emp_dept_code(A.HR_EMPLOYEE_MASTER_ID) = #{v_dept_code}
		</if>
		<if test="v_re_yn == 0">
			AND HR_UTIL_PKG.date_work_state_code(A.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE) <![CDATA[ <> ]]> 'hr009020'
		</if>
	</select>
	<!-- 사회보험 -->
	<select id="S_SL_SI_EI_BASIS" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT A.SL_SI_EI_BASIS_ID
			  ,A.COMM_CORPORATION_ID
			  ,A.HR_EMPLOYEE_MASTER_ID
			  ,A.APPLY_DATE
			  ,A.SALARY_AMT
			  ,A.EI_RATE
			  ,A.EI_AMT
			  ,A.NOTE
			  ,B.EMP_NO AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, A.APPLY_DATE, #{v_lang_code}) AS DEPT_NAME
		FROM SL_SI_EI_BASIS A
		LEFT JOIN HR_EMPLOYEE_MASTER B ON (A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID)
		WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(v_app_date)">
			AND A.APPLY_DATE like #{v_app_date}||'__'
		</if>
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
			AND B.EMP_NO = #{v_emp_no}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.emp_dept_code(A.HR_EMPLOYEE_MASTER_ID) = #{v_dept_code}
		</if>
		<if test="v_re_yn == 0">
			AND HR_UTIL_PKG.date_work_state_code(A.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE) <![CDATA[ <> ]]> 'hr009020'
		</if>
	</select>

	<!-- ******************************************************* -->
	<!--  급여계산작업 - 급여대상자생성  -->
	<!-- ******************************************************* -->
	<select id="P_SL_CALCULATE_EMP" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		DECLARE
		v_end_yn char(1);
		BEGIN
		SELECT NVL(MAX(END_YN), '0')
		INTO v_end_yn
		FROM SL_PAY_END
		WHERE SL_BON_PAYMENT_COUNT_ID = #{v_sl_bon_payment_count_id};

		IF v_end_yn = '1'
	    	THEN
	    		--급여마감되었습니다.
	    		raise_application_error(-20000, 'ORA-20026');
		END IF;

			SL_CUSTOMIZING_PKG.insert_receipient(#{v_sl_bon_payment_count_id}
		,#{CRTBY}
		,#{CRTIP}
		,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg});
		END;
	</select>

	<!-- ******************************************************* -->
	<!--  급여계산작업 - 급여대상자삭제  -->
	<!-- ******************************************************* -->
	<select id="P_SL_CALCULATE_DEL_EMP" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		DECLARE

		  v_end_yn number;

		  BEGIN

		<foreach collection="keyList" item="item">

			SELECT NVL(MAX(END_YN),0) INTO v_end_yn
			  FROM sl_bon_payment_count A
			  LEFT JOIN sl_pay_end B ON A.sl_bon_payment_count_id = B.sl_bon_payment_count_id
			 WHERE A.sl_bon_payment_count_id = #{item.SL_BON_PAYMENT_COUNT_ID};

			IF v_end_yn = 1 THEN
				raise_application_error(-20000, '이미 마감되었습니다.');
		 	END IF;

			DELETE
			  FROM SL_PAY_RECIPIENT
			 WHERE SL_PAY_RECIPIENT_ID =#{item.SL_PAY_RECIPIENT_ID};

			DELETE
			 FROM SL_PAY_DETAIL
			WHERE SL_PAY_RECIPIENT_ID =#{item.SL_PAY_RECIPIENT_ID};

		</foreach>

		   END;
	</select>

	<insert id="I_SL_CALCULATE_EMP_PROC_BACKUP" parameterType="hashmap">
		INSERT INTO SL_PAY_RECIPIENT
		(SL_PAY_RECIPIENT_ID
		,COMM_CORPORATION_ID
		,PAYMENT_MONTH
		,HR_EMPLOYEE_MASTER_ID
		,PAY_DIVISION_CODE
		,WORK_STATE_CODE
		,TAX_AMT
		,TAXFREE_AMT
		,SL_BON_PAYMENT_COUNT_ID
		,CRTBY
		,CRTDT
		,CRTIP
		,AMNBY
		,AMNDT
		,AMNIP)
		SELECT SL_PAY_RECIPIENT_S.NEXTVAL
			 ,#{v_corporation_id}
			 ,#{v_pay_month}
			 ,T1.HR_EMPLOYEE_MASTER_ID
		     ,#{v_pay_div_code}
			 ,T1.WORK_STATE_CODE
			 ,0
		     ,0
			 ,#{v_payment_count}
			 ,#{CRTBY}
			 ,SYSDATE
			 ,#{CRTIP}
			 ,#{AMNBY}
			 ,SYSDATE
			 ,#{AMNIP}
		FROM TABLE(SL_CUSTOMIZING_PKG.RECEIPIENT_LIST2(#{v_payment_count})) T1
		WHERE NOT EXISTS (SELECT *
						  FROM SL_PAY_RECIPIENT T2
						  WHERE T2.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
							AND NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID) = T2.HR_EMPLOYEE_MASTER_ID)
	</insert>


	<!-- ******************************************************* -->
	<!--  급여계산작업 - 대상자 급여내역 조회  -->
	<!-- ******************************************************* -->
	<select id="S_SL_CALCULATE_EMP" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT T1.HR_EMPLOYEE_MASTER_ID
			,HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			,HR_UTIL_PKG.dept_name(T1.HR_DEPARTMENT_CODE, #{v_lang_code}) AS DEPT_NAME
			,COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'hr001',T1.POSITION_CODE, #{v_lang_code}) AS POSITION_NAME
		    ,HR_UTIL_PKG.DATE_APPOINTMENT(T1.HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', TO_CHAR(SYSDATE, 'YYYYMMDD'), #{v_lang_code}) AS DUTY_NAME
			,COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'hr010', #{v_pay_type_code}, #{v_lang_code}) AS PAY_TYPE_NAME
			,T1.SL_PAY_RECIPIENT_ID
			,TO_CHAR(NVL(T1.TAX_AMT, 0), 'FM9,999,999,999,999') AS TAX_AMT
			,TO_CHAR(NVL(T1.TAXFREE_AMT, 0), 'FM9,999,999,999,999') AS TAXFREE_AMT
			,TO_CHAR(NVL(T1.PAY_AMT, 0), 'FM9,999,999,999,999') AS PAY_AMT
			,TO_CHAR(NVL(T1.DED_AMT, 0), 'FM9,999,999,999,999') AS DED_AMT
			,TO_CHAR(NVL(T1.PAID_AMT, 0), 'FM9,999,999,999,999') AS PAID_AMT
			,TO_CHAR(NVL(T1.PAY_AMT - T1.DED_AMT, 0), 'FM9,999,999,999,999') AS PAYMENT_ADJUST_AMT
			,T1.SL_BON_PAYMENT_COUNT_ID -- (p) sl_bon_payment_id 지급차수
			,NVL(T1.MODIFY_YN, 0) AS MODIFY_YN
			,CASE WHEN NVL(T1.PAY_AMT, 0) = 0
			THEN '0'
			ELSE '1'
			END CALCULATE_YN
		FROM SL_PAY_RECIPIENT T1
		LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = T1.hr_employee_master_id
		WHERE T1.COMM_CORPORATION_ID = #{v_corporation_id}
		AND T1.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count} -- (p) sl_bon_payment_id 지급차수
		<if test="v_emp_id != null and v_emp_id != '' and v_emp_id != '%'.toString()">
			AND T1.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND T1.HR_DEPARTMENT_CODE = #{v_dept_code}
		</if>
		ORDER BY HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID)
	</select>

	<!-- ******************************************* -->
	<!-- 급여마스터 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_CALCULATE_ONE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		 <![CDATA[
		SELECT A.EMP_NO                                                                                                           AS EMP_NO
			 , B.SL_PAY_RECIPIENT_ID                                                                                              AS SL_PAY_RECIPIENT_ID
			 , hr_util_pkg.emp_name(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code})                                                      AS emp_name
			 , HR_UTIL_PKG.date_position_name(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, B.PAYMENT_MONTH || '01') as POSITION_NAME
			 , HR_UTIL_PKG.date_hr_dept_name(A.HR_EMPLOYEE_MASTER_ID, B.PAYMENT_MONTH || '01', #{v_lang_code})  as DEPT_NAME
			 , HR_UTIL_PKG.date_pay_type_name(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, B.PAYMENT_MONTH || '01') as PAY_TYPE_NAME
			 , to_char(NVL(B.TAX_AMT, 0), 'FM9,999,999,999,999')                                                                  AS TAX_AMT
			 , to_char(NVL(B.TAXFREE_AMT, 0), 'FM9,999,999,999,999')                                                              AS TAXFREE_AMT
			 , TO_CHAR(NVL(B.PAY_AMT, 0), 'FM9,999,999,999,999')                                                                  AS PAY_AMT
			 , TO_CHAR(NVL(B.DED_AMT, 0), 'FM9,999,999,999,999')                                                                  AS DED_AMT
			 , TO_CHAR(NVL(B.PAID_AMT, 0), 'FM9,999,999,999,999')                                                                 AS PAYMENT_AMT
			 , to_char(NVL((SELECT SUM(NVL(Z.PAYMENT_AMT, NVL(Z.CALC_AUTO_AMT, 0)))
							FROM SL_PAY_DETAIL Z
									 LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = B.COMM_CORPORATION_ID
							WHERE Z.SL_PAY_RECIPIENT_ID = B.SL_PAY_RECIPIENT_ID
							  AND Y.PAY_DED_CODE = 'sl002100'), 0)
						   - NVL((SELECT SUM(NVL(Z.PAYMENT_AMT, NVL(Z.CALC_AUTO_AMT, 0)))
								  FROM SL_PAY_DETAIL Z
										   LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = B.COMM_CORPORATION_ID
								  WHERE Z.SL_PAY_RECIPIENT_ID = B.SL_PAY_RECIPIENT_ID
									AND Y.PAY_DED_CODE = 'sl002200'), 0), 'FM9,999,999,999,999')                                  AS PAYMENT_ADJUST_AMT
		FROM HR_EMPLOYEE_MASTER A
				 LEFT JOIN SL_PAY_RECIPIENT B ON A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID
											  AND B.SL_BON_PAYMENT_COUNT_ID = #{v_sl_bon_payment_count_id}
		WHERE A.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		 ]]>
	</select>

	<!-- ******************************************* -->
	<!-- 급여상세 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_CALCULATE_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT SL_UTIL_PKG.PAY_NAME2(#{v_corporation_id}, A.PAY_ITEM_CODE, #{v_lang_code}) AS PAY_NAME
			 ,A.CALC_AUTO_AMT AS CALC_AUTO_AMT
			 ,A.PAYMENT_AMT AS PAYMENT_AMT
			 ,A.CALC_COM_NOTE AS CALC_COM_NOTE
			 ,A.SL_PAY_DETAIL_ID AS SL_PAY_DETAIL_ID
			 ,A.CALC_AUTO_AMT - NVL(A.PAYMENT_AMT, A.CALC_AUTO_AMT) AS DIFF_AMT
		FROM SL_PAY_DETAIL A
				 LEFT JOIN SL_PAY_RECIPIENT B ON A.SL_PAY_RECIPIENT_ID = B.SL_PAY_RECIPIENT_ID
				 LEFT JOIN SL_BI_CODE C ON A.PAY_ITEM_CODE = C.PAY_ITEM_CODE
			AND B.COMM_CORPORATION_ID = C.COMM_CORPORATION_ID
		WHERE A.SL_BON_PAYMENT_COUNT_ID = #{v_sl_bon_payment_count_id}
		  AND A.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		  AND C.PAY_DED_CODE = #{v_pay_ded_code}
		<if test="v_except_zero != null and v_except_zero != '' and v_except_zero != '%'.toString()">
		  AND NVL(a.PAYMENT_AMT, NVL(a.CALC_AUTO_AMT, 0) ) <![CDATA[ <> ]]> 0
		</if>
		ORDER BY C.PRINT_SEQ
	</select>

	<!-- ******************************************* -->
	<!-- 급여계산 -->
	<!-- ******************************************* -->
	<update id="P_SL_CALCULATE_WORK" parameterType="hashmap" statementType="CALLABLE">
		DECLARE
		v_out varchar2(2000) := null;
		BEGIN
					SL_CALCULATE_PKG.calculate_work (#{v_sl_bon_payment_count_id}
		,#{v_empList}
		, NULL
		,#{CRTBY}
		,#{CRTIP}
		,v_out);
		if v_out is not null
					then
						raise_application_error(-20000, v_out);
		end if;
		END;
	</update>

	<!-- ******************************************* -->
	<!-- 급여계산 삭제 -->
	<!-- ******************************************* -->
	<select id="P_SL_CALCULATE_CANCEL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{ CALL
			SL_CALCULATE_PKG.calculate_cancel(#{v_sl_bon_payment_count_id}
										    ,#{v_empList}
										    ,#{CRTBY}
										    ,#{CRTIP}
										 	,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg})
		}
	</select>

	<!-- ******************************************* -->
	<!-- 급상여 조정 -->
	<!-- ******************************************* -->
	<update id="U_SL_PAY_DETAIL_PROC" parameterType="hashmap">
		UPDATE SL_PAY_DETAIL
		   SET PAYMENT_AMT = #{PAYMENT_AMT}
		 WHERE SL_PAY_DETAIL_ID = #{SL_PAY_DETAIL_ID}
	</update>

	<!-- ******************************************* -->
	<!-- 급상여 조정여부 -->
	<!-- ******************************************* -->
	<update id="P_SL_CALCULATE_MODIFY_YN" parameterType="hashmap">
		UPDATE SL_PAY_RECIPIENT
		   SET MODIFY_YN = '1'
		 WHERE SL_PAY_RECIPIENT_ID = #{SL_PAY_RECIPIENT_ID}
	</update>

	<!-- ******************************************* -->
	<!-- 급여재계산 -->
	<!-- ******************************************* -->
	<select id="P_SL_CALCULATE_RE_WORK" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{ CALL
			SL_CALCULATE_PKG.calculate_work_detail(#{v_sl_pay_recipient_id}
                                                    ,'1'
                                                    ,#{CRTBY}
												    ,#{CRTIP}
												 	,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg})
		}
	</select>

	<!-- ******************************************* -->
	<!-- 급상여마감 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_END" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		 SELECT A.PAYMENT_MONTH
		       ,A.PAYMENT_COUNT
		       ,COMM_UTIL_PKG.wrk_code_name(#{v_corporation_id}, 'hr010', A.PAY_TYPE_CODE, #{v_lang_code}) as PAY_TYPE_NAME
		       ,COMM_UTIL_PKG.wrk_code_name(#{v_corporation_id}, 'sl001', A.PAY_DIVISION_CODE, #{v_lang_code}) as TYPE_DIVISION_NAME
		       ,A.PAYMENT_DATE
			   ,NVL(B.END_YN, '0') AS END_YN
			   ,B.END_HR_EMPLOYEE_MASTER_ID
			   ,HR_UTIL_PKG.emp_no(B.END_HR_EMPLOYEE_MASTER_ID) AS EMP_NO
		       ,hr_util_pkg.EMP_NAME(B.END_HR_EMPLOYEE_MASTER_ID, #{v_lang_code})		AS EMP_NAME
		       ,comm_util_pkg.EMP_TITLE(B.END_HR_EMPLOYEE_MASTER_ID, #{v_corporation_id})		AS EMP_TITLE
		       ,COMM_UTIL_PKG.date_to_char(B.END_DATE)	AS END_DATE
		       ,B.NOTE
		       ,A.COMM_CORPORATION_ID
		       ,A.SL_BON_PAYMENT_COUNT_ID
		       ,B.SL_PAY_END_ID
		 	   ,'LOG' AS LOG
		  FROM SL_BON_PAYMENT_COUNT A
		  LEFT JOIN SL_PAY_END B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
		  LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = B.END_HR_EMPLOYEE_MASTER_ID
		 WHERE A.SL_BON_PAYMENT_COUNT_ID = A.SL_BON_PAYMENT_COUNT_ID
		   AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		 <if test="v_payment_month != null and v_payment_month != '' and v_payment_month != '%'.toString()">
		   AND A.PAYMENT_MONTH = #{v_payment_month}
		 </if>
		 <if test="v_payment_count != null and v_payment_count != '' and v_payment_count != '%'.toString()">
		   AND A.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		 </if>
		 order by A.PAYMENT_MONTH DESC, A.PAYMENT_COUNT
	</select>

	<!-- ******************************************* -->
	<!-- 급상여 마감 -->
	<!-- ******************************************* -->
	<insert id="I_SL_PAY_END_PROC" parameterType="hashmap" statementType="CALLABLE">
		{CALL
			declare
				begin

					for cu1 in (
						select A.SL_BON_PAYMENT_COUNT_ID
							  ,A.PAYMENT_MONTH
							  ,A.COMM_CORPORATION_ID
						  from SL_BON_PAYMENT_COUNT A
						  left join SL_PAY_END B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
						 where B.SL_PAY_END_ID is null
						   and A.SL_BON_PAYMENT_COUNT_ID in ( select column_value
						                                        from table(comm_util_pkg.split(#{v_paymentList}, ',')) )
					)
					loop

						insert into SL_PAY_END(SL_PAY_END_ID
											,PAYMENT_MONTH
											,SL_BON_PAYMENT_COUNT_ID
											,END_HR_EMPLOYEE_MASTER_ID
											,END_DATE
											,COMM_CORPORATION_ID
											,CRTBY
											,CRTDT
											,CRTIP
											,AMNBY
											,AMNDT
											,AMNIP
											)
									values(SL_PAY_END_S.NEXTVAL
											,cu1.PAYMENT_MONTH
											,cu1.SL_BON_PAYMENT_COUNT_ID
											,#{END_HR_EMPLOYEE_MASTER_ID}
											,SYSDATE
											,cu1.COMM_CORPORATION_ID
											,#{CRTBY}
											,SYSDATE
											,#{CRTIP}
											,#{CRTBY}
											,SYSDATE
											,#{CRTIP}
											);
					end loop;
				end}
	</insert>
	<update id="U_SL_PAY_END_PROC" parameterType="hashmap">
		{CALL
		    DECLARE
		    	v_sysdate date;
			BEGIN
				v_sysdate := SYSDATE;

				IF #{END_YN} = '1' THEN
					UPDATE SL_PAY_END
						SET END_YN                    = #{END_YN}
						   ,END_HR_EMPLOYEE_MASTER_ID = #{END_HR_EMPLOYEE_MASTER_ID}
						   ,END_DATE                  = v_sysdate
						   ,AMNBY                     = #{AMNBY}
						   ,AMNDT                     = v_sysdate
						   ,AMNIP                     = #{AMNIP}
					WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};
				ELSE
					UPDATE SL_PAY_END
						SET END_YN                    = #{END_YN}
						   ,END_HR_EMPLOYEE_MASTER_ID = #{END_HR_EMPLOYEE_MASTER_ID}
						   ,END_DATE                  = v_sysdate
						   ,AMNBY                     = #{AMNBY}
						   ,AMNDT                     = v_sysdate
						   ,AMNIP                     = #{AMNIP}
					WHERE SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID};
				END IF;

				-- 급상여마감 로그 테이블 추가
				INSERT INTO SL_PAY_END_LOG
					(SL_PAY_END_LOG_ID
					,SL_PAY_END_ID
					,COMM_CORPORATION_ID
					,SL_BON_PAYMENT_COUNT_ID
					,END_YN
					,END_HR_EMPLOYEE_MASTER_ID
					,END_DATE)
				VALUES
					(SL_PAY_END_LOG_S.NEXTVAL
					,#{SL_PAY_END_ID} --SL_PAY_END_S.NEXTVAL
					,#{LOGIN_CORPORATION_ID}
					,#{SL_BON_PAYMENT_COUNT_ID}
					,#{END_YN}
					,#{END_HR_EMPLOYEE_MASTER_ID}
					,v_sysdate);
			END}
	</update>
	<!-- ******************************************* -->
	<!-- 급상여 마감취소 -->
	<!-- ******************************************* -->
	<delete id="D_SL_PAY_END_CANCEL_PROC" parameterType="hashmap" statementType="CALLABLE">
		{ CALL
			DECLARE
				BEGIN
					DELETE FROM SL_PAY_END A
					WHERE A.SL_BON_PAYMENT_COUNT_ID IN (SELECT COLUMN_VALUE FROM TABLE(COMM_UTIL_PKG.SPLIT(#{v_paymentList}, ',')));
				END}
	</delete>

	<!-- ******************************************* -->
	<!-- 급상여 마감취소 -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_CLOSE_CHK_PROC" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{ CALL
			DECLARE

			v_sl_bon_payment_count_id NUMBER;

			BEGIN

				SELECT SL_BON_PAYMENT_COUNT_ID
	             INTO v_sl_bon_payment_count_id
	             FROM SL_PAY_RECIPIENT A
	            WHERE A.SL_PAY_RECIPIENT_ID = #{SL_PAY_RECIPIENT_ID};

				SL_CALCULATE_PKG.pay_close_chk(v_sl_bon_payment_count_id);
			END}
	</select>

	<!-- ******************************************* -->
	<!-- 급여이체현황조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_TRANSFER_LIST" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		WITH Z AS (
			SELECT A.HR_EMPLOYEE_MASTER_ID
				 , B.PAY_DED_CODE
				 , SUM(A.PAYMENT_AMT)  AS AMT
				 , SL_PAY_RECIPIENT_ID AS SL_PAY_RECIPIENT_ID
			FROM SL_PAY_DETAIL A
					 LEFT JOIN SL_BI_CODE B ON A.PAY_ITEM_CODE = B.PAY_ITEM_CODE AND B.COMM_CORPORATION_ID = #{v_corporation_id}
			WHERE A.payment_month = #{v_pay_month}
			GROUP BY SL_PAY_RECIPIENT_ID, B.PAY_DED_CODE, HR_EMPLOYEE_MASTER_ID
		)
		SELECT A.PAYMENT_MONTH                                                                                          AS PAYMENT_MONTH
			 , comm_util_pkg.wrk_code_name(#{v_corporation_id}, 'hr010', A.pay_type_code, #{v_lang_code})               AS PAY_TYPE_NAME
			 , HR_UTIL_PKG.date_hr_dept_name(A.HR_EMPLOYEE_MASTER_ID, #{v_pay_month} || '01', #{v_lang_code})			AS DEPT_NAME
		     , A.POSITION_CODE
		     , COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'hr001', A.POSITION_CODE, #{v_lang_code})               AS POSITION_NAME
			 , HR_UTIL_PKG.DATE_APPOINTMENT(A.HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', TO_CHAR(SYSDATE, 'YYYYMMDD'), #{v_lang_code})	AS DUTY_NAME
			 , B.EMP_NO                                                                                                 AS EMP_NO
			 , hr_util_pkg.emp_name(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code})                                            AS EMP_NAME
			 , comm_util_pkg.emp_title(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id})                                    AS EMP_TITLE
			 , C.AMT - D.AMT                                                                                            AS AMT
			 , E.ACCOUNT_NUMBER
		     , E.ACCOUNT_NUMBER_TEMP
			 , comm_util_pkg.wrk_code_name(#{v_corporation_id}, 'comm003', E.bank_code, #{v_lang_code})                 AS BANK_NAME
			 , F.attribute1                                                                                             AS BANK_CODE
		FROM sl_pay_recipient A
		LEFT JOIN hr_employee_master B on A.hr_employee_master_id = B.hr_employee_master_id
		LEFT JOIN Z C ON A.SL_PAY_RECIPIENT_ID = C.SL_PAY_RECIPIENT_ID AND C.PAY_DED_CODE = 'sl002100'
		LEFT JOIN Z D ON A.SL_PAY_RECIPIENT_ID = D.SL_PAY_RECIPIENT_ID AND D.PAY_DED_CODE = 'sl002200'
		LEFT JOIN (SELECT bank_code
						 , account_number
		                 , account_number_temp
						 , hr_employee_master_id
					FROM (SELECT ROW_NUMBER() OVER(PARTITION BY hr_employee_master_id ORDER BY APPLY_DATE DESC) AS row_num
								,hr_employee_master_id
								, bank_code
								, account_number
								, account_number_temp
							FROM SL_BON_PAY_ACCOUNT
						    WHERE SUBSTR(APPLY_DATE, 0, 6) <![CDATA[ <= ]]> #{v_pay_month}) a
					WHERE row_num = 1) E ON A.hr_employee_master_id = E.hr_employee_master_id
		LEFT JOIN COMM_MU_CODE_DETAIL F ON E.bank_code = F.CODE_DETAIL
		WHERE A.COMM_CORPORATION_ID = #{v_corporation_id}
		  AND A.payment_month = #{v_pay_month}
		  AND A.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND C.AMT > D.AMT
        <if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
          AND A.pay_type_code = #{v_pay_type_code}
        </if>
	</select>

	<!-- ******************************************* -->
	<!-- 급여이체지급의뢰서 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_TRANSFER_REQUEST" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		 select *
		   from table(sl_print_pkg.pay_transfer_request(#{v_corporation_id}
		   											  , #{p_pay_month}
		   											  , #{p_payment_count_id}
		   											  , #{v_lang_code}))
	</select>

	<!-- ******************************************* -->
	<!-- 나의급여 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_MY_PAYMENT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		 select A.PAYMENT_MONTH AS PAY_MONTH
		       ,B.PAYMENT_COUNT AS PAYMENT_COUNT
		       ,C.AMT           AS PAY_AMT
		       ,D.AMT           AS DEDUCT_AMT
		       ,C.AMT - D.AMT   AS PAYMENT_AMT
		       ,A.SL_BON_PAYMENT_COUNT_ID AS SL_BON_PAYMENT_COUNT_ID
		  from sl_pay_recipient a
		  LEFT JOIN SL_BON_PAYMENT_COUNT B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
		  LEFT JOIN (
		        SELECT  Z.SL_PAY_RECIPIENT_ID
		               ,SUM( NVL(Z.PAYMENT_AMT, 0) ) AS AMT
		          FROM SL_PAY_DETAIL Z
		          LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
		         WHERE Y.PAY_DED_CODE = 'sl002100'
		         GROUP BY Z.SL_PAY_RECIPIENT_ID
		       ) C ON C.SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
		  LEFT JOIN (
		        SELECT  Z.SL_PAY_RECIPIENT_ID
		               ,SUM( NVL(Z.PAYMENT_AMT, 0) ) AS AMT
		          FROM SL_PAY_DETAIL Z
		          LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
		         WHERE Y.PAY_DED_CODE = 'sl002200'
		         GROUP BY Z.SL_PAY_RECIPIENT_ID
		       ) D ON D.SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
		       JOIN SL_PAY_END E ON B.SL_BON_PAYMENT_COUNT_ID = E.SL_BON_PAYMENT_COUNT_ID
		 where E.END_YN = '1'
		   AND a.payment_month BETWEEN #{v_date_from} AND #{v_date_to}
		   AND a.hr_employee_master_id = #{login_employee_id}
		 ORDER BY a.payment_month, B.PAYMENT_COUNT
	</select>

	<!-- ******************************************* -->
	<!-- 나의급여 조회(상세) -->
	<!-- ******************************************* -->
	<select id="S_SL_MY_PAYMENT_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT  SL_UTIL_PKG.pay_name2(#{v_corporation_id}, Z.PAY_ITEM_CODE, #{v_lang_code}) as PAY_ITEM_NAME
		       ,Z.PAYMENT_AMT AS AMT
		  FROM SL_PAY_DETAIL Z
		  LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
		       JOIN SL_PAY_RECIPIENT X ON Z.SL_PAY_RECIPIENT_ID = X.SL_PAY_RECIPIENT_ID
		 WHERE Y.PAY_DED_CODE = #{p_pay_ded_code}
		   and X.SL_BON_PAYMENT_COUNT_ID = #{p_sl_bon_payment_count_id}
		   and X.HR_EMPLOYEE_MASTER_ID = #{login_employee_id}
		 ORDER BY Y.PRINT_SEQ
	</select>

	<!-- ******************************************* -->
	<!-- 기간별급여현황(월별상세 / 기간합계) -->
	<!-- ******************************************* -->
	<select id="S_PAY_TERMLIST_PIVOT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		WITH AMT AS
				 (SELECT Z.SL_PAY_RECIPIENT_ID
					   , Z.HR_EMPLOYEE_MASTER_ID
					   , Z.PAYMENT_MONTH
					   , Z.PAY_ITEM_CODE AS ORD_SQ
					   , Z.PAY_ITEM_CODE
					   , Y.PAY_DED_CODE
					   , Z.PAYMENT_AMT
				 	   , Z.PAY_DIVISION_CODE
				  FROM SL_PAY_DETAIL Z
				  JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE
					  				AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
					  				AND Y.PAY_DED_CODE in ('sl002100', 'sl002200')
				  WHERE Z.PAYMENT_MONTH >= #{v_from_month}
					AND Z.PAYMENT_MONTH <![CDATA[ <= ]]> #{v_to_month}
				  UNION ALL
				  SELECT X1.SL_PAY_RECIPIENT_ID
					   , HR_EMPLOYEE_MASTER_ID
					   , X1.PAYMENT_MONTH
					   , TO_CHAR(SQ) AS ORD_SQ
					   , CASE SQ
							 WHEN 1 THEN 'PAY_AMT'
							 WHEN 2 THEN 'DED_AMT'
							 WHEN 3 THEN 'PAID_AMT'
							 WHEN 4 THEN 'CALC_PAID_AMT'
                             WHEN 5 THEN 'TAX_AMT'
							 WHEN 6 THEN 'TAXFREE_AMT'
					     END     AS PAY_ITEM_CODE
					   , '최종' AS PAY_DED_CODE
					   , CASE SQ
							 WHEN 1 THEN NVL(PAY_AMT, 0)
							 WHEN 2 THEN NVL(DED_AMT, 0)
							 WHEN 3 THEN NVL(PAID_AMT, 0)
							 WHEN 4 THEN NVL(CALC_PAID_AMT, 0)
							 WHEN 5 THEN NVL(TAX_AMT, 0)
							 WHEN 6 THEN NVL(TAXFREE_AMT, 0)
					     END     AS PAYMENT_AMT
				 	   , X1.PAY_DIVISION_CODE
				  FROM SL_PAY_RECIPIENT X1
						   CROSS JOIN (SELECT LEVEL AS SQ FROM DUAL CONNECT BY LEVEL <![CDATA[ <= ]]> 6) X2
				  WHERE X1.COMM_CORPORATION_ID = #{v_corporation_id}
				    AND X1.PAYMENT_MONTH >= #{v_from_month}
					AND X1.PAYMENT_MONTH <![CDATA[ <= ]]> #{v_to_month}
				 )
		SELECT B.EMP_NO															AS EMP_NO
		     , B.EMP_NAME                                                       AS EMP_NAME
		     , substr(AMT.PAYMENT_MONTH, 0, 4)									AS PAYMENT_YEAR
			 , AMT.PAYMENT_MONTH												AS PAYMENT_MONTH
			 , CASE
				   WHEN COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'sl002', AMT.PAY_DED_CODE, #{v_lang_code}) = '코드명칭 없음' THEN '0.고정'
				   ELSE CASE WHEN AMT.PAY_DED_CODE = 'sl002100' THEN '1.' ELSE '2.' END || COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'sl002', AMT.PAY_DED_CODE, #{v_lang_code})
			   END                                                              AS PAY_DED_NAME
			 , CASE AMT.PAY_ITEM_CODE
				   WHEN 'PAY_AMT' THEN ORD_SQ||'.'||'지급(항목)총액'
				   WHEN 'DED_AMT' THEN ORD_SQ||'.'||'공제(항목)총액'
				   WHEN 'PAID_AMT' THEN ORD_SQ||'.'||'실지급액'
                   WHEN 'CALC_PAID_AMT' THEN ORD_SQ||'.'||'실지급액 (조정전)'
                   WHEN 'TAXFREE_AMT' THEN ORD_SQ||'.'||'비과세계'
				   WHEN 'TAX_AMT' THEN ORD_SQ||'.'||'과세금액'
				   ELSE TO_CHAR(A.ORD_NO, '00') || A.PAY_ITEM_NAME
			   END AS PAY_ITEM_NAME
			 , AMT.PAYMENT_AMT                                                  AS AMT
			 , AMT.PAY_ITEM_CODE                                                AS PAY_ITEM_CODE
		FROM AMT
		 LEFT OUTER JOIN (SELECT to_char(row_number() over (partition by X.comm_corporation_id, X.pay_ded_code order by X.pay_item_code)) AS ORD_NO
		                       , X.* 
		                    FROM SL_BI_CODE X) A  
           ON AMT.PAY_ITEM_CODE = A.PAY_ITEM_CODE
		  AND A.CLASSIFICATION_CODE = 'sl0081'
		  AND A.COMM_CORPORATION_ID = #{v_corporation_id}
		  AND A.PAY_DED_CODE in ('sl002100', 'sl002200')
		 JOIN HR_EMPLOYEE_MASTER B ON AMT.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID
		 JOIN SL_PAY_RECIPIENT C ON B.HR_EMPLOYEE_MASTER_ID = C.HR_EMPLOYEE_MASTER_ID
								 AND C.COMM_CORPORATION_ID = #{v_corporation_id}
								 AND C.PAYMENT_MONTH = AMT.PAYMENT_MONTH
		WHERE 1 = 1
		<if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
			AND B.EMP_NO = #{v_emp_no}
		</if>
		<if test="v_dept_name != null and v_dept_name != '' and v_dept_name != '%'.toString()">
			AND C.HR_DEPARTMENT_CODE = #{v_dept_code}
		</if>
		<if test="v_pay_div_code != null and v_pay_div_code != '' and v_pay_div_code != '%'.toString()">
			AND AMT.PAY_DIVISION_CODE = #{v_pay_div_code}
		</if>
		<if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
			AND C.PAY_TYPE_CODE = #{v_pay_type_code}
		</if>
		GROUP BY B.EMP_NO,B.EMP_NAME,AMT.PAYMENT_MONTH
				,AMT.PAY_DED_CODE,AMT.PAY_ITEM_CODE
				,AMT.PAYMENT_AMT,AMT.PAY_ITEM_CODE
				,ORD_SQ,A.ORD_NO,A.PAY_ITEM_NAME
		ORDER BY EMP_NO, ORD_SQ, PAYMENT_MONTH
	</select>

	<!-- ******************************************* -->
	<!-- 급여소급 작업 -->
	<!-- ******************************************* -->
	<!-- 소급계산 -->
	<select id="S_SL_RETRO_COUNT_CALC" parameterType="hashmap" resultType="hashmap">
		SELECT A.HR_EMPLOYEE_MASTER_ID
			 , A.SL_RETRO_PAYMENT_COUNT_ID
		FROM SL_RETRO_RECIPIENT A
		WHERE A.PAYMENT_MONTH BETWEEN #{FROM_MONTH} AND #{TO_MONTH}
		  AND EXISTS(
				SELECT COLUMN_VALUE
				FROM TABLE(COMM_UTIL_PKG.CLOB_SPLIT(#{EMP_LIST}, ','))
				WHERE COLUMN_VALUE = A.HR_EMPLOYEE_MASTER_ID
			)
	</select>
	<update id="P_SL_RETRO_COUNT_CALC" parameterType="hashmap" statementType="CALLABLE">
		DECLARE
		v_out varchar2(2000) := null;
		BEGIN

					SL_RETRO_PKG.calculate_work_retro(#{v_payment_count_List}
		,#{v_empList}
		,#{CRTBY}
		,#{CRTIP}
		,v_out);
		if v_out is not null
					then
						raise_application_error(-20000, v_out);
		end if;
		END;
	</update>
	<!-- 급여차수조회 -->
	<select id="S_RETRO_PAYMENT_COUNT" parameterType="hashmap" resultType="hashmap">
		SELECT A.PAYMENT_MONTH
			 , A.PAYMENT_DATE
			 , A.PAY_DIVISION_CODE
			 , A.PAYMENT_COUNT
			 , A.PAY_TYPE_CODE
			 , A.WORK_CONTENTS
			 , A.SL_BON_PAYMENT_COUNT_ID
		FROM SL_BON_PAYMENT_COUNT A
		WHERE A.PAYMENT_MONTH BETWEEN #{v_from_month} AND #{v_to_month}
		  AND EXISTS (
				SELECT Z.SL_PAY_END_ID
				FROM SL_PAY_END Z
				WHERE Z.SL_BON_PAYMENT_COUNT_ID = A.SL_BON_PAYMENT_COUNT_ID
				  AND NVL(Z.END_YN, '0') = '1'
			)
		ORDER BY TO_NUMBER(A.PAYMENT_MONTH), TO_NUMBER(A.PAYMENT_DATE)
	</select>
	<!-- 소급대상자 조회 -->
	<select id="S_RETRO_EMP" parameterType="hashmap" resultType="hashmap">
		SELECT HR_UTIL_PKG.EMP_NO(A.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			 , HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 , COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 , HR_UTIL_PKG.DATE_APPOINTMENT(A.HR_EMPLOYEE_MASTER_ID, 'HR_DEPARTMENT_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code}) AS DEPT_NAME
			 , HR_UTIL_PKG.DATE_APPOINTMENT(A.HR_EMPLOYEE_MASTER_ID, 'POSITION_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code}) 	 AS POSITION_NAME
			 , HR_UTIL_PKG.DATE_APPOINTMENT(A.HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code})			 AS DUTY_NAME
			 , A.HR_EMPLOYEE_MASTER_ID
			 , #{v_from_month}	AS FROM_MONTH
			 , #{v_to_month} 	AS TO_MONTH
		FROM SL_RETRO_RECIPIENT A
		WHERE A.RETRO_MONTH BETWEEN #{v_from_month} AND #{v_to_month}
		GROUP BY A.HR_EMPLOYEE_MASTER_ID
		ORDER BY EMP_NO
	</select>
	<!-- 소급대상자 별 급여차수 조회 -->
	<select id="S_RETRO_EMP_PAYMENT_COUNT" parameterType="hashmap" resultType="hashmap">
		SELECT A.PAYMENT_MONTH
			 , A.PAYMENT_DATE
			 , A.PAY_DIVISION_CODE
			 , A.PAYMENT_COUNT
			 , A.PAY_TYPE_CODE
			 , A.WORK_CONTENTS
			 , A.SL_BON_PAYMENT_COUNT_ID
			 , CASE WHEN B.SL_RETRO_RECIPIENT_ID IS NULL
						THEN '0'
					ELSE '1'
			END SL_RETRO_RECIPIENT_YN
			 , B.SL_RETRO_RECIPIENT_ID
			 , C.SL_PAY_RECIPIENT_ID
			 , C.HR_EMPLOYEE_MASTER_ID
		FROM SL_BON_PAYMENT_COUNT A
				 LEFT JOIN SL_RETRO_RECIPIENT B ON (A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID AND B.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id})
				 LEFT JOIN SL_PAY_RECIPIENT C ON (A.SL_BON_PAYMENT_COUNT_ID = C.SL_BON_PAYMENT_COUNT_ID AND C.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id})
		WHERE A.PAYMENT_MONTH BETWEEN #{v_from_month} AND #{v_to_month}
		  AND EXISTS (
				SELECT Z.SL_PAY_END_ID
				FROM SL_PAY_END Z
				WHERE Z.SL_BON_PAYMENT_COUNT_ID = A.SL_BON_PAYMENT_COUNT_ID
				  AND NVL(Z.END_YN, '0') = '1'
			)
		ORDER BY TO_NUMBER(A.PAYMENT_MONTH), TO_NUMBER(A.PAYMENT_DATE)
	</select>

	<!-- ******************************************* -->
	<!-- 소급 대상자 생성 -->
	<!-- ******************************************* -->
	<insert id="P_CREATE_SL_RETRO_RECIPIENT" parameterType="hashmap" statementType="CALLABLE">
		DECLARE
		BEGIN
    	  		--소급차수 생성
		INSERT INTO SL_RETRO_PAYMENT_COUNT(SL_RETRO_PAYMENT_COUNT_ID
										  , COMM_CORPORATION_ID
										  , SL_BON_PAYMENT_COUNT_ID
										  , RETIREMENT_EXCEPT
										  , APPL_SL_BON_PAYMENT_COUNT_ID
										  , RETRO_MONTH
										  , RETRO_PAYMENT_CAL
										  , NOTE
										  , CRTBY
										  , CRTDT
										  , CRTIP
										  , AMNBY
										  , AMNDT
										  , AMNIP
		)
		SELECT SL_RETRO_PAYMENT_COUNT_S.NEXTVAL
			 , A.COMM_CORPORATION_ID
			 , A.SL_BON_PAYMENT_COUNT_ID
			 , A.RETIREMENT_EXCEPT
			 , NULL --APPL_SL_BON_PAYMENT_COUNT_ID
			 , A.PAYMENT_MONTH	--RETRO_MONTH
			 , NULL		--RETRO_PAYMENT_CAL
			 , NULL		--NOTE
			 , #{CRTBY}
			 , SYSDATE
			 , #{CRTIP}
			 , #{AMNBY}
			 , SYSDATE
			 , #{AMNIP}
		FROM SL_BON_PAYMENT_COUNT A
		WHERE EXISTS(
				SELECT COLUMN_VALUE
				FROM TABLE(COMM_UTIL_PKG.CLOB_SPLIT(#{v_payment_count_list}, ','))
				WHERE COLUMN_VALUE = A.SL_BON_PAYMENT_COUNT_ID
			)
		  AND NOT EXISTS (
				SELECT SL_RETRO_PAYMENT_COUNT_ID
				FROM SL_RETRO_PAYMENT_COUNT
				WHERE SL_BON_PAYMENT_COUNT_ID = A.SL_BON_PAYMENT_COUNT_ID
			)
		;

		--소급급여마스터 생성
		INSERT INTO SL_RETRO_RECIPIENT(SL_RETRO_RECIPIENT_ID
									  , SL_RETRO_PAYMENT_COUNT_ID
									  , RETRO_MONTH
									  , SL_PAY_RECIPIENT_ID
									  , SL_BON_PAYMENT_COUNT_ID
									  , COMM_CORPORATION_ID
									  , PAY_DIVISION_CODE
									  , PAYMENT_MONTH
									  , HR_EMPLOYEE_MASTER_ID
									  , WORK_STATE_CODE
									  , HR_DEPARTMENT_CODE
									  , PAY_TYPE_CODE
									  , JOIN_TYPE_CODE
									  , SERVICE_DIVISION_CODE
									  , SERVICE_TYPE_CODE
									  , JOB_TYPE_CODE
									  , POSITION_CODE
									  , DUTY_CODE
									  , RANK_CODE
									  , RANK_YEAR_CODE
									  , CALCULATION_TYPE_CODE
									  , PAYMENT_RATE
									  , WORK_DAYS
									  , WORK_MONTH
									  , EXCEPTION_PAYMENT_RATE
									  , AT_FROM_DATE
									  , AT_TO_DATE
									  , WORK_YN
									  , PAY_YN
									  , MODIFY_YN
									  , PAY_AMT
									  , DED_AMT
									  , PAID_AMT
									  , CALC_PAID_AMT
									  , TAX_AMT
									  , TAXFREE_AMT
									  , OVER_AMT
									  , MEAL_AMT
									  , DRIVE_AMT
									  , RESEARCH_AMT
									  , CARE_AMT
									  , EDUCATION_AMT
									  , FOREIGN_AMT
									  , DAY_AMT
									  , DUTY_AMT
									  , NOTE
									  , CRTBY
									  , CRTDT
									  , CRTIP
									  , AMNBY
									  , AMNDT
									  , AMNIP
		)
		SELECT SL_RETRO_RECIPIENT_S.NEXTVAL
			 , B.SL_RETRO_PAYMENT_COUNT_ID --SL_RETRO_PAYMENT_COUNT_ID
			 , B.RETRO_MONTH --RETRO_MONTH
			 , A.SL_PAY_RECIPIENT_ID --SL_PAY_RECIPIENT_ID
			 , A.SL_BON_PAYMENT_COUNT_ID --SL_BON_PAYMENT_COUNT_ID
			 , B.COMM_CORPORATION_ID --COMM_CORPORATION_ID
			 , A.PAY_DIVISION_CODE                              --PAY_DIVISION_CODE
			 , A.PAYMENT_MONTH                                  --PAYMENT_MONTH
			 , A.HR_EMPLOYEE_MASTER_ID                          --HR_EMPLOYEE_MASTER_ID
			 , A.WORK_STATE_CODE                                --WORK_STATE_CODE
			 , A.HR_DEPARTMENT_CODE                             --HR_DEPARTMENT_CODE
			 , A.PAY_TYPE_CODE                                  --PAY_TYPE_CODE
			 , A.JOIN_TYPE_CODE                                 --JOIN_TYPE_CODE
			 , A.SERVICE_DIVISION_CODE                          --SERVICE_DIVISION_CODE
			 , A.SERVICE_TYPE_CODE                              --SERVICE_TYPE_CODE
			 , A.JOB_TYPE_CODE                                  --JOB_TYPE_CODE
			 , A.POSITION_CODE                                  --POSITION_CODE
			 , A.DUTY_CODE                                      --DUTY_CODE
			 , A.RANK_CODE                                      --RANK_CODE
			 , A.RANK_YEAR_CODE                                 --RANK_YEAR_CODE
			 , A.CALCULATION_TYPE_CODE                          --CALCULATION_TYPE_CODE
			 , A.PAYMENT_RATE                                   --PAYMENT_RATE
			 , A.WORK_DAYS                                      --WORK_DAYS
			 , A.WORK_MONTH                                     --WORK_MONTH
			 , A.EXCEPTION_PAYMENT_RATE                         --EXCEPTION_PAYMENT_RATE
			 , A.AT_FROM_DATE                                   --AT_FROM_DATE
			 , A.AT_TO_DATE                                     --AT_TO_DATE
			 , A.WORK_YN                                        --WORK_YN
			 , A.PAY_YN                                         --PAY_YN
			 , A.MODIFY_YN                                      --MODIFY_YN
			 , 0 --PAY_AMT
			 , 0 --DED_AMT
			 , 0 --PAID_AMT
			 , 0 --CALC_PAID_AMT
			 , 0 --TAX_AMT
			 , 0 --TAXFREE_AMT
			 , 0 --OVER_AMT
			 , 0 --MEAL_AMT
			 , 0 --DRIVE_AMT
			 , 0 --RESEARCH_AMT
			 , 0 --CARE_AMT
			 , 0 --EDUCATION_AMT
			 , 0 --FOREIGN_AMT
			 , 0 --DAY_AMT
			 , 0 --DUTY_AMT
			 , NULL --NOTE
			 , #{CRTBY} --CRTBY
			 , SYSDATE --CRTDT
			 , #{CRTIP} --CRTIP
			 , #{AMNBY} --AMNBY
			 , SYSDATE  --AMNDT
			 , #{AMNIP} --AMNIP
		FROM SL_PAY_RECIPIENT A
				 JOIN SL_RETRO_PAYMENT_COUNT B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
		WHERE EXISTS (
				SELECT COLUMN_VALUE
				FROM TABLE(COMM_UTIL_PKG.CLOB_SPLIT(#{v_payment_count_list}, ','))
				WHERE COLUMN_VALUE = a.SL_BON_PAYMENT_COUNT_ID
			)
		  AND NOT EXISTS (
				SELECT SL_RETRO_RECIPIENT_ID
				FROM SL_RETRO_RECIPIENT
				WHERE SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
			);
		END;
	</insert>
	<!-- ******************************************* -->
	<!-- 소급 대상 수정 생성 -->
	<!-- ******************************************* -->
	<update id="U_SL_RETRO_RECIPIENT_CHANGE" parameterType="hashmap" statementType="CALLABLE">
		DECLARE
		BEGIN
		<choose>
			<when test='SL_RETRO_RECIPIENT_YN == "1"'>
				--소급급여마스터 생성
				INSERT INTO SL_RETRO_RECIPIENT(SL_RETRO_RECIPIENT_ID
				, SL_RETRO_PAYMENT_COUNT_ID
				, RETRO_MONTH
				, SL_PAY_RECIPIENT_ID
				, SL_BON_PAYMENT_COUNT_ID
				, COMM_CORPORATION_ID
				, PAY_DIVISION_CODE
				, PAYMENT_MONTH
				, HR_EMPLOYEE_MASTER_ID
				, WORK_STATE_CODE
				, HR_DEPARTMENT_CODE
				, PAY_TYPE_CODE
				, JOIN_TYPE_CODE
				, SERVICE_DIVISION_CODE
				, SERVICE_TYPE_CODE
				, JOB_TYPE_CODE
				, POSITION_CODE
				, DUTY_CODE
				, RANK_CODE
				, RANK_YEAR_CODE
				, CALCULATION_TYPE_CODE
				, PAYMENT_RATE
				, WORK_DAYS
				, WORK_MONTH
				, EXCEPTION_PAYMENT_RATE
				, AT_FROM_DATE
				, AT_TO_DATE
				, WORK_YN
				, PAY_YN
				, MODIFY_YN
				, PAY_AMT
				, DED_AMT
				, PAID_AMT
				, CALC_PAID_AMT
				, TAX_AMT
				, TAXFREE_AMT
				, OVER_AMT
				, MEAL_AMT
				, DRIVE_AMT
				, RESEARCH_AMT
				, CARE_AMT
				, EDUCATION_AMT
				, FOREIGN_AMT
				, DAY_AMT
				, DUTY_AMT
				, NOTE
				, CRTBY
				, CRTDT
				, CRTIP
				, AMNBY
				, AMNDT
				, AMNIP
				)
				SELECT SL_RETRO_RECIPIENT_S.NEXTVAL
				, B.SL_RETRO_PAYMENT_COUNT_ID --SL_RETRO_PAYMENT_COUNT_ID
				, B.RETRO_MONTH --RETRO_MONTH
				, A.SL_PAY_RECIPIENT_ID --SL_PAY_RECIPIENT_ID
				, A.SL_BON_PAYMENT_COUNT_ID --SL_BON_PAYMENT_COUNT_ID
				, B.COMM_CORPORATION_ID --COMM_CORPORATION_ID
				, A.PAY_DIVISION_CODE                              --PAY_DIVISION_CODE
				, A.PAYMENT_MONTH                                  --PAYMENT_MONTH
				, A.HR_EMPLOYEE_MASTER_ID                          --HR_EMPLOYEE_MASTER_ID
				, A.WORK_STATE_CODE                                --WORK_STATE_CODE
				, A.HR_DEPARTMENT_CODE                             --HR_DEPARTMENT_CODE
				, A.PAY_TYPE_CODE                                  --PAY_TYPE_CODE
				, A.JOIN_TYPE_CODE                                 --JOIN_TYPE_CODE
				, A.SERVICE_DIVISION_CODE                          --SERVICE_DIVISION_CODE
				, A.SERVICE_TYPE_CODE                              --SERVICE_TYPE_CODE
				, A.JOB_TYPE_CODE                                  --JOB_TYPE_CODE
				, A.POSITION_CODE                                  --POSITION_CODE
				, A.DUTY_CODE                                      --DUTY_CODE
				, A.RANK_CODE                                      --RANK_CODE
				, A.RANK_YEAR_CODE                                 --RANK_YEAR_CODE
				, A.CALCULATION_TYPE_CODE                          --CALCULATION_TYPE_CODE
				, A.PAYMENT_RATE                                   --PAYMENT_RATE
				, A.WORK_DAYS                                      --WORK_DAYS
				, A.WORK_MONTH                                     --WORK_MONTH
				, A.EXCEPTION_PAYMENT_RATE                         --EXCEPTION_PAYMENT_RATE
				, A.AT_FROM_DATE                                   --AT_FROM_DATE
				, A.AT_TO_DATE                                     --AT_TO_DATE
				, A.WORK_YN                                        --WORK_YN
				, A.PAY_YN                                         --PAY_YN
				, A.MODIFY_YN                                      --MODIFY_YN
				, 0 --PAY_AMT
				, 0 --DED_AMT
				, 0 --PAID_AMT
				, 0 --CALC_PAID_AMT
				, 0 --TAX_AMT
				, 0 --TAXFREE_AMT
				, 0 --OVER_AMT
				, 0 --MEAL_AMT
				, 0 --DRIVE_AMT
				, 0 --RESEARCH_AMT
				, 0 --CARE_AMT
				, 0 --EDUCATION_AMT
				, 0 --FOREIGN_AMT
				, 0 --DAY_AMT
				, 0 --DUTY_AMT
				, NULL --NOTE
				, #{CRTBY} --CRTBY
				, SYSDATE --CRTDT
				, #{CRTIP} --CRTIP
				, #{AMNBY} --AMNBY
				, SYSDATE  --AMNDT
				, #{AMNIP} --AMNIP
				FROM SL_PAY_RECIPIENT A
				JOIN SL_RETRO_PAYMENT_COUNT B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
				WHERE A.HR_EMPLOYEE_MASTER_ID = #{HR_EMPLOYEE_MASTER_ID}
				AND A.SL_BON_PAYMENT_COUNT_ID = #{SL_BON_PAYMENT_COUNT_ID}
				AND A.SL_PAY_RECIPIENT_ID = #{SL_PAY_RECIPIENT_ID}
				AND NOT EXISTS (
				SELECT SL_RETRO_RECIPIENT_ID
				FROM SL_RETRO_RECIPIENT
				WHERE SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
				);

			</when>
			<otherwise>
				DELETE
				FROM SL_RETRO_DETAIL
				WHERE SL_RETRO_RECIPIENT_ID = #{SL_RETRO_RECIPIENT_ID}
				;

				DELETE
				FROM SL_RETRO_RECIPIENT
				WHERE SL_RETRO_RECIPIENT_ID = #{SL_RETRO_RECIPIENT_ID}
				;

			</otherwise>
		</choose>
		END;
	</update>

	<!-- ******************************************* -->
	<!-- 급여소급_급여반영 조회 -->
	<!-- ******************************************* -->
	<select id="S_RETRO_LIST" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		WITH AFTER AS (
		SELECT A.HR_EMPLOYEE_MASTER_ID
		, B.PAY_ITEM_CODE
		, NVL(B.PAYMENT_AMT, 0)		AS PAYMENT_AMT
		, A.SL_PAY_RECIPIENT_ID
		FROM SL_RETRO_RECIPIENT A
		JOIN SL_RETRO_DETAIL	  B ON A.SL_RETRO_RECIPIENT_ID = B.SL_RETRO_RECIPIENT_ID
		WHERE A.PAYMENT_MONTH BETWEEN #{v_from_month} AND #{v_to_month}
		AND EXISTS (
		SELECT SL_BI_CODE_ID
		FROM SL_BI_CODE
		WHERE COMM_CORPORATION_ID = #{v_corporation_id}
		AND PAY_ITEM_CODE = B.PAY_ITEM_CODE
		AND PAY_DED_CODE = 'sl002100'	--지급항목
		AND NVL(RETRO_YN, '0') = '1'	--소급대상
		)
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(v_emp_id)">
			AND A.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		)
		, BEFORE AS (
		SELECT A.HR_EMPLOYEE_MASTER_ID
		, B.PAY_ITEM_CODE
		, NVL(B.PAYMENT_AMT, 0)		AS PAYMENT_AMT
		FROM SL_PAY_RECIPIENT A
		JOIN SL_PAY_DETAIL	  B ON A.SL_PAY_RECIPIENT_ID = B.SL_PAY_RECIPIENT_ID
		WHERE A.PAYMENT_MONTH BETWEEN #{v_from_month} AND #{v_to_month}
		AND EXISTS (
		SELECT SL_BI_CODE_ID
		FROM SL_BI_CODE
		WHERE COMM_CORPORATION_ID = #{v_corporation_id}
		AND PAY_ITEM_CODE = B.PAY_ITEM_CODE
		AND PAY_DED_CODE = 'sl002100'	--지급항목
		AND NVL(RETRO_YN, '0') = '1'	--소급대상
		)
		<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(v_emp_id)">
			AND A.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		AND EXISTS (
		SELECT SL_PAY_RECIPIENT_ID
		FROM AFTER
		WHERE SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
		)
		)
		SELECT T1.*
		, CASE WHEN T1.SEQ = '1'
		THEN NULL
		ELSE T2.ADJUST_AMT
		END AS ADJUST_AMT
		, #{v_from_month}		AS FROM_MONTH
		, #{v_to_month}		AS TO_MONTH
		, CASE WHEN T3.BELONG_MONTH IS NULL
		THEN '0'
		ELSE '1'
		END 							AS APPLY_YN
		, CASE WHEN T3.BELONG_MONTH IS NULL
		THEN NULL
		ELSE COMM_UTIL_PKG.DATEFORMAT(T3.BELONG_MONTH, 'YYYY-MM')
		END 							AS PAYMENT_MONTH
		FROM (
		SELECT 1 AS SEQ
		, HR_EMPLOYEE_MASTER_ID
		, HR_UTIL_PKG.EMP_NO(HR_EMPLOYEE_MASTER_ID) AS EMP_NO
		, HR_UTIL_PKG.EMP_NAME(HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
		, COMM_UTIL_PKG.EMP_TITLE(HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
		, HR_UTIL_PKG.DATE_APPOINTMENT(HR_EMPLOYEE_MASTER_ID, 'HR_DEPARTMENT_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code}) AS DEPT_NAME
		, HR_UTIL_PKG.DATE_APPOINTMENT(A.HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code})		  AS DUTY_NAME
		, 0 AS BEFORE_AMT
		, 0 AS AFTER_AMT
		, 0 AS DIFFERENCE_AMT
		, NVL(P1000, 0)	AS P1000
		, NVL(P1002, 0)	AS P1002
		, NVL(P1003, 0)	AS P1003
		FROM (
		SELECT HR_EMPLOYEE_MASTER_ID
		, PAY_ITEM_CODE
		, PAYMENT_AMT
		FROM BEFORE
		) pivot (SUM(PAYMENT_AMT) FOR PAY_ITEM_CODE IN('P1000' P1000, 'P1002' P1002, 'P1003' P1003)) A

		UNION ALL

		SELECT 2 AS SEQ
		, HR_EMPLOYEE_MASTER_ID
		, HR_UTIL_PKG.EMP_NO(HR_EMPLOYEE_MASTER_ID) AS EMP_NO
		, HR_UTIL_PKG.EMP_NAME(HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
		, COMM_UTIL_PKG.EMP_TITLE(HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
		, HR_UTIL_PKG.DATE_APPOINTMENT(HR_EMPLOYEE_MASTER_ID, 'HR_DEPARTMENT_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code}) AS DEPT_NAME
		, HR_UTIL_PKG.DATE_APPOINTMENT(HR_EMPLOYEE_MASTER_ID, 'POSITION_NAME', TO_CHAR(LAST_DAY(#{v_to_month} || '01'), 'YYYYMMDD'), #{v_lang_code}) 	 AS POSITION_NAME
		, (SELECT SUM(NVL(PAYMENT_AMT, 0))
		FROM BEFORE
		WHERE HR_EMPLOYEE_MASTER_ID = A.HR_EMPLOYEE_MASTER_ID) AS BEFORE_AMT
		, (SELECT SUM(NVL(PAYMENT_AMT, 0))
		FROM AFTER
		WHERE HR_EMPLOYEE_MASTER_ID = A.HR_EMPLOYEE_MASTER_ID) AS AFTER_AMT
		, NVL((SELECT SUM(NVL(PAYMENT_AMT, 0))
		FROM AFTER
		WHERE HR_EMPLOYEE_MASTER_ID = A.HR_EMPLOYEE_MASTER_ID), 0)
		- NVL((SELECT SUM(NVL(PAYMENT_AMT, 0))
		FROM BEFORE
		WHERE HR_EMPLOYEE_MASTER_ID = A.HR_EMPLOYEE_MASTER_ID), 0) 		AS DIFFERENCE_AMT
		, NVL(P1000, 0)	AS P1000
		, NVL(P1002, 0)	AS P1002
		, NVL(P1003, 0)	AS P1003
		FROM (
		SELECT HR_EMPLOYEE_MASTER_ID
		, PAY_ITEM_CODE
		, PAYMENT_AMT
		FROM AFTER
		) pivot (SUM(PAYMENT_AMT) FOR PAY_ITEM_CODE IN('P1000' P1000, 'P1002' P1002, 'P1003' P1003)) A
		) T1
		LEFT JOIN SL_RETRO_ADJUST T2 ON (T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID AND T2.FROM_MONTH = #{v_from_month} AND T2.TO_MONTH = #{v_to_month})
		LEFT JOIN (
		SELECT HR_EMPLOYEE_MASTER_ID
		, MIN(BELONG_MONTH) keep(dense_rank FIRST ORDER BY TO_NUMBER(BELONG_MONTH) ASC) AS BELONG_MONTH
		FROM SL_BON_VARIABLE_ALLOWANCE
		WHERE PAY_ITEM_CODE = SL_UTIL_PKG.MONTHLY_CHANGE_ITEM_CODE(#{v_corporation_id}, 'sl200100')
		AND PAY_DIVISION_CODE = 'sl00111'
		AND SUBSTR(BELONG_MONTH, 0, 4) = SUBSTR(#{v_to_month}, 0, 4)
		<![CDATA[
					   AND TO_NUMBER(BELONG_MONTH) > TO_NUMBER(#{v_to_month})
					   ]]>
		GROUP BY HR_EMPLOYEE_MASTER_ID
		) T3 ON (T1.HR_EMPLOYEE_MASTER_ID = T3.HR_EMPLOYEE_MASTER_ID
		AND SUBSTR(T3.BELONG_MONTH, 0, 4) = SUBSTR(#{v_to_month}, 0, 4) )
		ORDER BY T1.EMP_NO, T1.SEQ
	</select>
	<!-- ******************************************* -->
	<!-- 급여소급 급여반영 조정금액 입력 -->
	<!-- ******************************************* -->
	<update id="U_SL_RETRO_ADJUST_PROC" parameterType="hashmap">
		MERGE INTO SL_RETRO_ADJUST A
			USING DUAL B
			ON (A.HR_EMPLOYEE_MASTER_ID = #{HR_EMPLOYEE_MASTER_ID} AND A.FROM_MONTH = #{FROM_MONTH} AND A.TO_MONTH = #{TO_MONTH})
			WHEN MATCHED THEN
				UPDATE SET A.ADJUST_AMT = #{ADJUST_AMT}
					, A.AMNBY = #{AMNBY}
					, A.AMNDT = SYSDATE
					, A.AMNIP = #{AMNIP}
			WHEN NOT MATCHED THEN
				INSERT (SL_RETRO_ADJUST_ID
					, HR_EMPLOYEE_MASTER_ID
					, FROM_MONTH
					, TO_MONTH
					, ADJUST_AMT
					, CRTBY
					, CRTDT
					, AMNBY
					, AMNDT
					, CRTIP
					, AMNIP)
					VALUES (SL_RETRO_ADJUST_S.NEXTVAL
						   , #{HR_EMPLOYEE_MASTER_ID}
						   , #{FROM_MONTH}
						   , #{TO_MONTH}
						   , #{ADJUST_AMT}
						   , #{CRTBY}
						   , SYSDATE
						   , #{AMNBY}
						   , SYSDATE
						   , #{CRTIP}
						   , #{AMNIP})
	</update>

	<!-- ******************************************* -->
	<!-- 급여소급_급여반영 급여반영실행 -->
	<!-- ******************************************* -->
	<update id="P_SL_RETRO_APPLY" parameterType="hashmap" statementType="CALLABLE">
		DECLARE
		v_cnt number;
		BEGIN
		<foreach collection="keyList" item="item" index="index" >
			v_cnt :=0;

			--마감체크
			SELECT COUNT(0)
			INTO v_cnt
			FROM SL_BON_PAYMENT_COUNT A
			JOIN SL_PAY_END B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
			WHERE NVL(B.END_YN, '0') = '1'
			AND A.PAY_DIVISION_CODE = 'sl00111'
			AND A.PAYMENT_MONTH = #{PAYMENT_MONTH}
			;

			<![CDATA[
		  		IF v_cnt > 0
		  		THEN
		  			--급여마감
		  			raise_application_error(-20000, 'DB-00055');
		  		END IF;
		  		]]>

			INSERT INTO SL_BON_VARIABLE_ALLOWANCE(SL_BON_VARIABLE_ALLOWANCE_ID
			, COMM_CORPORATION_ID
			, HR_EMPLOYEE_MASTER_ID
			, PAY_DIVISION_CODE
			, PAY_ITEM_CODE
			, WAGE_PRICE
			, WHETHER_ADDED
			, BELONG_MONTH
			, NOTE
			, CRTBY
			, CRTIP
			, CRTDT
			, AMNBY
			, AMNIP
			, AMNDT
			, SOURCE_CODE)
			SELECT SL_BON_VARIABLE_ALLOWANCE_S.NEXTVAL
			, A.COMM_CORPORATION_ID
			, A.HR_EMPLOYEE_MASTER_ID
			, 'sl00111'			--PAY_DIVISION_CODE
			, SL_UTIL_PKG.MONTHLY_CHANGE_ITEM_CODE(#{v_corporation_id}, 'sl200100')  -- PAY_ITEM_CODE : 'P1900'
			, CASE WHEN #{item.ADJUST_AMT} IS NULL
					THEN NVL(TO_NUMBER(#{item.DIFFERENCE_AMT}), 0)
					ELSE NVL(TO_NUMBER(#{item.ADJUST_AMT}), 0)
					END			--WAGE_PRICE
			, NULL					--WHETHER_ADDED
			, #{PAYMENT_MONTH}		--BELONG_MONTH
			, COMM_UTIL_PKG.WRK_CODE_ATTRIBUTE(#{v_corporation_id}, 'ATTRIBUTE1', 'sl200', 'sl200100') --NOTE : '급여소급 급여반영'
			, #{CRTBY}
			, #{CRTIP}
			, SYSDATE
			, #{AMNBY}
			, #{AMNIP}
			, SYSDATE
			, NULL					--SOURCE_CODE
			FROM HR_EMPLOYEE_MASTER A
			WHERE A.HR_EMPLOYEE_MASTER_ID = #{item.HR_EMPLOYEE_MASTER_ID}
			;
		</foreach>
		END;
	</update>
	<!-- ******************************************* -->
	<!-- 급여소급_급여반영 급여반영취소 -->
	<!-- ******************************************* -->
	<update id="P_SL_RETRO_APPLY_CANCEL" parameterType="hashmap" statementType="CALLABLE">
		DECLARE
		v_cnt number;
		BEGIN
		<foreach collection="keyList" item="item" index="index" >
			v_cnt :=0;

			--마감체크
			SELECT COUNT(0)
			INTO v_cnt
			FROM SL_BON_PAYMENT_COUNT A
			JOIN SL_PAY_END B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
			WHERE NVL(B.END_YN, '0') = '1'
			AND A.PAY_DIVISION_CODE = 'sl00111'
			AND A.PAYMENT_MONTH = #{item.PAYMENT_MONTH}
			;

			<![CDATA[
		  		IF v_cnt > 0
		  		THEN
		  			--급여마감
		  			raise_application_error(-20000, 'DB-00055');
		  		END IF;
		  		]]>
			DELETE
			FROM SL_BON_VARIABLE_ALLOWANCE A
			WHERE A.PAY_ITEM_CODE = SL_UTIL_PKG.MONTHLY_CHANGE_ITEM_CODE(#{v_corporation_id}, 'sl200100') --'P1900'
			AND A.PAY_DIVISION_CODE = 'sl00111'
			AND A.HR_EMPLOYEE_MASTER_ID = #{item.HR_EMPLOYEE_MASTER_ID}
			AND A.BELONG_MONTH = #{item.PAYMENT_MONTH}
			;
		</foreach>
		END;
	</update>

	<!-- ******************************************* -->
	<!-- 급여전월 비교(개인별) -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_COMPARE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT T1.SL_PAY_RECIPIENT_ID AS PREV_SL_PAY_RECIPIENT_ID
			  ,T2.SL_PAY_RECIPIENT_ID AS CURR_SL_PAY_RECIPIENT_ID
			  ,HR_UTIL_PKG.EMP_NO(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID)) AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), #{v_corporation_id}) AS EMP_TITLE
			  ,CASE WHEN T1.PAYMENT_MONTH IS NULL THEN 0 ELSE 1 END AS EMP_NO_PREV
			  ,CASE WHEN T2.PAYMENT_MONTH IS NULL THEN 0 ELSE 1 END AS EMP_NO_CURR
			  ,(CASE WHEN T1.PAYMENT_MONTH IS NULL THEN 0 ELSE 1 END) -
			   (CASE WHEN T2.PAYMENT_MONTH IS NULL THEN 0 ELSE 1 END) AS EMP_NO_DIFF
			  ,NVL(SUM(T1.PAID_AMT), 0) AS PAY_AMT_PREV
			  ,NVL(SUM(T2.PAID_AMT), 0) AS PAY_AMT_CURR
			  ,NVL(SUM(T2.PAID_AMT), 0) - NVL(SUM(T1.PAID_AMT), 0) AS PAY_AMT_DIFF
			  ,NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID) AS HR_EMPLOYEE_MASTER_ID
		FROM (SELECT * FROM SL_PAY_RECIPIENT WHERE PAYMENT_MONTH = #{v_prev_month} AND COMM_CORPORATION_ID = #{v_corporation_id}) T1
		FULL OUTER JOIN (SELECT * FROM SL_PAY_RECIPIENT WHERE PAYMENT_MONTH = #{v_curr_month} AND COMM_CORPORATION_ID = #{v_corporation_id}) T2 ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
		JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = T1.hr_employee_master_id
		WHERE 1 = 1
		<if test="v_pay_div_code != null and v_pay_div_code != '' and v_pay_div_code != '%'.toString()">
			AND NVL(T1.PAY_DIVISION_CODE, T2.PAY_DIVISION_CODE) = #{v_pay_div_code}
		</if>
		<if test="v_pay_type_code != null and v_pay_type_code != '' and v_pay_type_code != '%'.toString()">
			AND NVL(T1.PAY_TYPE_CODE, T2.PAY_TYPE_CODE) = #{v_pay_type_code}
		</if>
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
			AND NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID) = #{v_hr_employee_master_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND NVL(T1.HR_DEPARTMENT_CODE, T2.HR_DEPARTMENT_CODE) = #{v_dept_code}
		</if>
		GROUP BY T1.SL_PAY_RECIPIENT_ID, T2.SL_PAY_RECIPIENT_ID, T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID, T1.PAYMENT_MONTH, T2.PAYMENT_MONTH
		ORDER BY EMP_NO
	</select>
	<select id="S_SL_PAY_COMPARE_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT #{v_emp_no} AS EMP_NO
			  ,#{v_emp_name} AS EMP_NAME
			  ,#{v_emp_title} AS EMP_TITLE
			  ,HR_UTIL_PKG.date_hr_dept_name(NVL(T2.HR_EMPLOYEE_MASTER_ID, T1.HR_EMPLOYEE_MASTER_ID), COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_app_month}, 'YYYYMM'))), #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.date_position_code(NVL(T2.HR_EMPLOYEE_MASTER_ID, T1.HR_EMPLOYEE_MASTER_ID), COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_app_month}, 'YYYYMM')))) AS POSITION_CODE
			  ,HR_UTIL_PKG.DATE_DUTY_NAME(NVL(T2.HR_EMPLOYEE_MASTER_ID, T1.HR_EMPLOYEE_MASTER_ID), #{v_lang_code}, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_app_month}, 'YYYYMM')))) AS DUTY_NAME
			  ,HR_UTIL_PKG.DATE_RANK_NAME(NVL(T2.HR_EMPLOYEE_MASTER_ID, T1.HR_EMPLOYEE_MASTER_ID), #{v_lang_code}, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_app_month}, 'YYYYMM')))) AS RANK_NAME
			  ,NVL(T2.PAY_ITEM_CODE, T1.PAY_ITEM_CODE) AS PAY_ITEM_CODE
			  ,NVL(T2.PAY_ITEM_CODE, T1.PAY_ITEM_CODE) AS PAY_ITEM_NAME
			  ,NVL(SUM(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_PREV
			  ,NVL(SUM(DECODE(T2.PAYMENT_MONTH, #{v_curr_month}, T2.PAYMENT_AMT)), 0) AS PAY_AMT_CURR
			  ,NVL(SUM(DECODE(T2.PAYMENT_MONTH, #{v_curr_month}, T2.PAYMENT_AMT)), 0) -
			   NVL(SUM(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_DIFF
			  ,T3.PAY_DED_CODE
		FROM (SELECT * FROM SL_PAY_DETAIL X2 WHERE PAYMENT_AMT != 0 AND X2.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
                 AND EXISTS 
                     (SELECT 1 FROM SL_PAY_RECIPIENT X1 WHERE X1.SL_PAY_RECIPIENT_ID = X2.SL_PAY_RECIPIENT_ID AND X1.PAYMENT_MONTH = #{v_prev_month} AND X1.COMM_CORPORATION_ID = #{v_corporation_id}
                      AND X1.PAY_TYPE_CODE = NVL(#{v_pay_type_code}, X1.PAY_TYPE_CODE) AND X1.PAY_DIVISION_CODE = NVL(#{v_pay_div_code}, X1.PAY_DIVISION_CODE)
                     ) 
		     ) T1
		FULL OUTER JOIN
		     (SELECT * FROM SL_PAY_DETAIL X2 WHERE PAYMENT_AMT != 0 AND X2.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
                 AND EXISTS 
                     (SELECT 1 FROM SL_PAY_RECIPIENT X1 WHERE X1.SL_PAY_RECIPIENT_ID = X2.SL_PAY_RECIPIENT_ID AND X1.PAYMENT_MONTH = #{v_curr_month} AND X1.COMM_CORPORATION_ID = #{v_corporation_id}
                      AND X1.PAY_TYPE_CODE = NVL(#{v_pay_type_code}, X1.PAY_TYPE_CODE) AND X1.PAY_DIVISION_CODE = NVL(#{v_pay_div_code}, X1.PAY_DIVISION_CODE)
                     )
		     ) T2
		ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
		AND T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
		INNER JOIN SL_BI_CODE T3 
		ON T3.COMM_CORPORATION_ID = #{v_corporation_id}
		LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = T2.hr_employee_master_id
		AND T3.PAY_ITEM_CODE = NVL(T2.PAY_ITEM_CODE, T1.PAY_ITEM_CODE)
		AND T3.PAY_DED_CODE IN ('sl002100', 'sl002200') 
		WHERE 1 = 1
		GROUP BY NVL(T2.HR_EMPLOYEE_MASTER_ID, T1.HR_EMPLOYEE_MASTER_ID)
			    ,NVL(T2.PAY_ITEM_CODE, T1.PAY_ITEM_CODE)
			    ,T2.SL_PAY_RECIPIENT_ID, T1.SL_PAY_RECIPIENT_ID
			    ,T3.PAY_DED_CODE
		ORDER BY T3.PAY_DED_CODE, NVL(T2.PAY_ITEM_CODE, T1.PAY_ITEM_CODE)
	</select>

	<!-- ******************************************* -->
	<!-- 급여전월 비교(항목별) -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_COMPARE_ITEM" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT T2.PAY_DED_CODE
			  ,T2.PAY_ITEM_CODE
			  ,NVL(COUNT(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) AS EMP_NO_PREV
			  ,NVL(COUNT(DECODE(T1.PAYMENT_MONTH, #{v_curr_month}, T1.PAYMENT_AMT)), 0) AS EMP_NO_CURR
			  ,NVL(COUNT(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) -
			   NVL(COUNT(DECODE(T1.PAYMENT_MONTH, #{v_curr_month}, T1.PAYMENT_AMT)), 0) AS EMP_NO_DIFF
			  ,NVL(SUM(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_PREV
			  ,NVL(SUM(DECODE(T1.PAYMENT_MONTH, #{v_curr_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_CURR
			  ,NVL(SUM(DECODE(T1.PAYMENT_MONTH, #{v_curr_month}, T1.PAYMENT_AMT)), 0) -
			   NVL(SUM(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_DIFF
		FROM SL_PAY_DETAIL T1
		JOIN SL_BI_CODE T2 ON T2.COMM_CORPORATION_ID = #{v_corporation_id}
						   AND T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
						   AND (T2.PAY_DED_CODE = 'sl002100' OR T2.PAY_DED_CODE = 'sl002200')
						   AND T2.USE_YN = '1'
		WHERE 1 = 1
		  AND T1.PAYMENT_AMT != 0
   		  AND T1.PAYMENT_MONTH BETWEEN #{v_prev_month} AND #{v_curr_month}
		<if test="v_pay_div_code != null and v_pay_div_code != '' and v_pay_div_code != '%'.toString()">
		  AND T1.PAY_DIVISION_CODE = #{v_pay_div_code}
		</if>
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
		  AND T1.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
		  AND HR_UTIL_PKG.DATE_HR_DEPT_CODE(T1.HR_EMPLOYEE_MASTER_ID, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_curr_month}, 'YYYYMM')))) = #{v_dept_code}
		</if>
		GROUP BY T2.PAY_DED_CODE
				,T2.PAY_ITEM_CODE
		ORDER BY T2.PAY_DED_CODE
				,T2.PAY_ITEM_CODE
	</select>
	<select id="S_SL_PAY_COMPARE_ITEM_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(T1.HR_EMPLOYEE_MASTER_ID, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_curr_month}, 'YYYYMM'))), #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.date_position_code(T1.HR_EMPLOYEE_MASTER_ID, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_curr_month}, 'YYYYMM')))) AS POSITION_CODE
			  ,HR_UTIL_PKG.DATE_DUTY_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, #{v_curr_month}) AS DUTY_NAME
			  ,HR_UTIL_PKG.DATE_RANK_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, #{v_curr_month}) AS RANK_NAME
			  ,T1.PAY_ITEM_CODE
			  ,NVL(MAX(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_PREV
			  ,NVL(MAX(DECODE(T1.PAYMENT_MONTH, #{v_curr_month}, T1.PAYMENT_AMT)), 0) AS PAY_AMT_CURR
			  ,NVL(MAX(DECODE(T1.PAYMENT_MONTH, #{v_curr_month}, T1.PAYMENT_AMT)), 0) -
			   NVL(MAX(DECODE(T1.PAYMENT_MONTH, #{v_prev_month}, T1.PAYMENT_AMT)),0)AS PAY_AMT_DIFF
		FROM SL_PAY_DETAIL T1
		JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = T1.hr_employee_master_id
		JOIN SL_BI_CODE T2 ON T2.COMM_CORPORATION_ID = #{v_corporation_id}
						   AND T2.PAY_ITEM_CODE = #{v_pay_item_code}
						   AND (T2.PAY_DED_CODE = 'sl002100' OR T2.PAY_DED_CODE = 'sl002200')
						   AND T2.USE_YN = '1'
		WHERE 1 = 1
		  AND T1.PAYMENT_AMT != 0
		  AND T1.PAYMENT_MONTH BETWEEN #{v_prev_month} AND #{v_curr_month}
		  AND T1.PAY_ITEM_CODE = #{v_pay_item_code}
		<if test="v_pay_div_code != null and v_pay_div_code != '' and v_pay_div_code != '%'.toString()">
			AND T1.PAY_DIVISION_CODE = #{v_pay_div_code}
		</if>
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
			AND T1.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.DATE_HR_DEPT_CODE(T1.HR_EMPLOYEE_MASTER_ID, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(#{v_curr_month}, 'YYYYMM')))) = #{v_dept_code}
		</if>
		GROUP BY T1.HR_EMPLOYEE_MASTER_ID
			    ,T1.PAY_ITEM_CODE
		ORDER BY EMP_NO
			    ,T1.PAY_ITEM_CODE
	</select>

	<!-- ******************************************* -->
	<!-- 급여차수비교 -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_COMPARE_COUNT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT HR_UTIL_PKG.EMP_NO(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID)) AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), #{v_corporation_id}) AS EMP_TITLE
			  ,CASE WHEN T1.SL_BON_PAYMENT_COUNT_ID IS NULL THEN 0 ELSE 1 END AS COUNT_BASE
			  ,CASE WHEN T2.SL_BON_PAYMENT_COUNT_ID IS NULL THEN 0 ELSE 1 END AS COUNT_COMP
			  ,(CASE WHEN T1.SL_BON_PAYMENT_COUNT_ID IS NULL THEN 0 ELSE 1 END) -
			  (CASE WHEN T2.SL_BON_PAYMENT_COUNT_ID IS NULL THEN 0 ELSE 1 END) AS COUNT_DIFF
			  ,NVL(SUM(T1.PAID_AMT), 0) AS PAY_AMT_BASE
			  ,NVL(SUM(T2.PAID_AMT), 0) AS PAY_AMT_COMP
			  ,NVL(SUM(T1.PAID_AMT), 0) - NVL(SUM(T2.PAID_AMT), 0) AS PAY_AMT_DIFF
			  ,NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID) AS HR_EMPLOYEE_MASTER_ID
		FROM (SELECT * FROM SL_PAY_RECIPIENT WHERE SL_BON_PAYMENT_COUNT_ID = #{v_base_sl_bon_pay_count_id} AND COMM_CORPORATION_ID = #{v_corporation_id}) T1
		FULL OUTER JOIN (SELECT * FROM SL_PAY_RECIPIENT WHERE SL_BON_PAYMENT_COUNT_ID = #{v_comp_sl_bon_pay_count_id} AND COMM_CORPORATION_ID = #{v_corporation_id}) T2
		    ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
		LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = T1.hr_employee_master_id
		WHERE 1 = 1
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
		  AND NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID) = #{v_hr_employee_master_id}
		</if>
		GROUP BY T1.SL_BON_PAYMENT_COUNT_ID, T2.SL_BON_PAYMENT_COUNT_ID, T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID, T1.PAYMENT_MONTH, T2.PAYMENT_MONTH
		ORDER BY EMP_NO
	</select>
	<select id="S_SL_PAY_COMPARE_COUNT_DETAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT HR_UTIL_PKG.date_hr_dept_name(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(NVL(T1.PAYMENT_MONTH, T2.PAYMENT_MONTH), 'YYYYMM'))), #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.date_position_code(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(NVL(T1.PAYMENT_MONTH, T2.PAYMENT_MONTH), 'YYYYMM')))) AS POSITION_CODE
			  ,HR_UTIL_PKG.DATE_DUTY_NAME(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), #{v_lang_code}, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(NVL(T1.PAYMENT_MONTH, T2.PAYMENT_MONTH), 'YYYYMM')))) AS DUTY_NAME
			  ,HR_UTIL_PKG.DATE_RANK_NAME(NVL(T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID), #{v_lang_code}, COMM_UTIL_PKG.date_to_char(LAST_DAY(TO_DATE(NVL(T1.PAYMENT_MONTH, T2.PAYMENT_MONTH), 'YYYYMM')))) AS RANK_NAME
			  ,NVL(T1.PAY_ITEM_CODE, T2.PAY_ITEM_CODE) AS PAY_ITEM_CODE
			  ,NVL(T1.PAY_ITEM_CODE, T2.PAY_ITEM_CODE) AS PAY_ITEM_NAME
			  ,NVL(SUM(T1.PAYMENT_AMT), 0) AS PAY_AMT_BASE
			  ,NVL(SUM(T2.PAYMENT_AMT), 0) AS PAY_AMT_COMP
			  ,NVL(SUM(T1.PAYMENT_AMT), 0) - NVL(SUM(T2.PAYMENT_AMT), 0) AS PAY_AMT_DIFF --차액
			  ,T3.PAY_DED_CODE
		FROM (SELECT * FROM SL_PAY_DETAIL X2 WHERE PAYMENT_AMT != 0 AND X2.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
		                                     AND EXISTS (SELECT 1 FROM SL_PAY_RECIPIENT X1 WHERE X1.SL_PAY_RECIPIENT_ID = X2.SL_PAY_RECIPIENT_ID
		                                     AND X1.SL_BON_PAYMENT_COUNT_ID = #{v_base_sl_bon_pay_count_id} AND X1.COMM_CORPORATION_ID = #{v_corporation_id})
			 ) T1
		FULL OUTER JOIN (SELECT * FROM SL_PAY_DETAIL X2 WHERE PAYMENT_AMT != 0 AND X2.HR_EMPLOYEE_MASTER_ID = #{v_hr_employee_master_id}
											   AND EXISTS (SELECT 1 FROM SL_PAY_RECIPIENT X1 WHERE X1.SL_PAY_RECIPIENT_ID = X2.SL_PAY_RECIPIENT_ID
		                                       AND X1.SL_BON_PAYMENT_COUNT_ID = #{v_comp_sl_bon_pay_count_id} AND X1.COMM_CORPORATION_ID = #{v_corporation_id})
			 ) T2 ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
				  AND T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
		INNER JOIN SL_BI_CODE T3 ON T3.COMM_CORPORATION_ID = #{v_corporation_id}
								 AND T3.PAY_ITEM_CODE = NVL(T1.PAY_ITEM_CODE, T2.PAY_ITEM_CODE)
								 AND T3.PAY_DED_CODE IN ('sl002100', 'sl002200')
		WHERE 1 = 1
		GROUP BY NVL(T1.PAY_ITEM_CODE, T2.PAY_ITEM_CODE)
			    ,T1.HR_EMPLOYEE_MASTER_ID, T2.HR_EMPLOYEE_MASTER_ID
			    ,T3.PAY_DED_CODE
			    ,NVL(T1.PAYMENT_MONTH, T2.PAYMENT_MONTH)
				,NVL(T1.PAY_ITEM_CODE, T2.PAY_ITEM_CODE)
		ORDER BY T3.PAY_DED_CODE, NVL(T1.PAY_ITEM_CODE, T2.PAY_ITEM_CODE)
	</select>

	<!-- ******************************************************* -->
	<!--  					개인연금상품관리  						 -->
	<!-- ******************************************************* -->
	<select id="S_SL_PENSION_MANAGE" parameterType="hashmap" resultType="hashmap">
		SELECT T1.SL_PENSION_MANAGE_ID
			  ,T1.CONTRACT_DATE
			  ,T1.CANCEL_CODE
			  ,T1.CANCEL_DATE
			  ,T1.MATURITY_DATE
			  ,T1.CONTRACT_TYPE_CODE
			  ,T1.HR_EMPLOYEE_MASTER_ID
			  ,HR_UTIL_PKG.emp_name(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.emp_title(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.emp_no(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			  ,HR_UTIL_PKG.date_hr_dept_name(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE, #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.date_position_name(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, FN_SYSDATE) AS POSITION_NAME
			  ,HR_UTIL_PKG.date_appointment(T1.HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', FN_SYSDATE, #{v_lang_code}) AS DUTY_NAME
			  ,HR_UTIL_PKG.emp_join_date(T1.HR_EMPLOYEE_MASTER_ID) AS JOIN_DATE
			  ,T1.INITIAL_AMT
			  ,T1.START_COUNT
		      ,T1.MONTHLY_AMT AS STD_AMT
			  ,T1.MONTHLY_AMT
		      ,T1.CORP_AMT
			  ,T1.DISCOUNT_RATE
			  ,FLOOR(T1.MONTHLY_AMT * (T1.DISCOUNT_RATE / 100)) AS DISCOUNT_AMT
			  ,T1.MONTHLY_AMT - T1.CORP_AMT - FLOOR(T1.MONTHLY_AMT * (T1.DISCOUNT_RATE / 100)) - NVL(T1.OTHER_DED_AMT, 0) + NVL(T1.OTHER_AMT, 0) AS ACTUAL_MONTHLY_AMT
			  ,T1.OTHER_AMT
			  ,T1.OTHER_DED_AMT
		FROM SL_PENSION_MANAGE T1
		WHERE 1 = 1
		<if test="v_start_date_from != null and v_start_date_from != '' and v_start_date_from != '%'.toString()">
			AND T1.CONTRACT_DATE >= #{v_start_date_from}
		</if>
		<if test="v_start_date_to != null and v_start_date_to != '' and v_start_date_to != '%'.toString()">
			AND T1.CONTRACT_DATE <![CDATA[ <= ]]> #{v_start_date_to}
		</if>
		<if test="v_end_date_from != null and v_end_date_from != '' and v_end_date_from != '%'.toString()">
			AND T1.MATURITY_DATE >= #{v_end_date_from}
		</if>
		<if test="v_end_date_to != null and v_end_date_to != '' and v_end_date_to != '%'.toString()">
			AND T1.MATURITY_DATE <![CDATA[ <= ]]> #{v_end_date_to}
		</if>
		<if test="v_check == 1">
			AND (T1.CANCEL_CODE IS NULL AND T1.CANCEL_DATE IS NULL)
		    AND T1.MATURITY_DATE > FN_SYSDATE
		</if>
		<if test="v_contract_type != null and v_contract_type != '' and v_contract_type != '%'.toString()">
			AND T1.CONTRACT_TYPE_CODE = #{v_contract_type}
		</if>
		<if test="v_emp_name != null and v_emp_name != '' and v_emp_name != '%'.toString()">
			AND (HR_UTIL_PKG.emp_name(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) LIKE '%' || #{v_emp_name} || '%'
			 OR  HR_UTIL_PKG.nickname(T1.HR_EMPLOYEE_MASTER_ID) LIKE '%' || #{v_emp_name} || '%')
		</if>
	</select>

	<!-- ******************************************************* -->
	<!--  				개인연금 납입액 생성 및 급여반영  			 -->
	<!-- ******************************************************* -->
	<select id="S_SL_PENSION_APPLY" parameterType="hashmap" resultType="hashmap">
		SELECT SL_PENSION_APPLY_ID
			  ,CREATE_MONTH
			  ,HR_EMPLOYEE_MASTER_ID
			  ,HR_UTIL_PKG.EMP_NAME(HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.date_hr_dept_name(HR_EMPLOYEE_MASTER_ID, FN_SYSDATE, #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.DATE_POSITION_NAME(HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, FN_SYSDATE) AS POSITION_NAME
			  ,HR_UTIL_PKG.date_appointment(HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', FN_SYSDATE, #{v_lang_code}) AS DUTY_NAME
			  ,HR_UTIL_PKG.EMP_JOIN_DATE(HR_EMPLOYEE_MASTER_ID) AS JOIN_DATE
			  ,CONTRACT_TYPE_CODE
			  ,CONTRACT_DATE
			  ,MATURITY_DATE
			  ,PAY_COUNT
			  ,MONTHLY_AMT
			  ,DISCOUNT_AMT
			  ,ACTUAL_AMT AS ACTUAL_AMT
			  ,ACTUAL_AMT AS PAY_DED_AMT
			  ,APP_PAY_YN
		FROM SL_PENSION_APPLY
		WHERE 1 = 1
		<if test="v_month != null and v_month != '' and v_month != '%'.toString()">
			AND CREATE_MONTH = #{v_month}
		</if>
		<if test="v_emp_id != null and v_emp_id != '' and v_emp_id != '%'.toString()">
			AND HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.DATE_HR_DEPT_CODE(HR_EMPLOYEE_MASTER_ID, FN_SYSDATE) = #{v_dept_code}
		</if>
		ORDER BY HR_UTIL_PKG.DATE_POSITION_CODE(HR_EMPLOYEE_MASTER_ID, FN_SYSDATE), HR_EMPLOYEE_MASTER_ID
	</select>
	<!-- 납입액 생성 -->
	<insert id="P_SL_PENSION_APPLY_CREATE" parameterType="hashmap">
		{CALL
			DECLARE
		    v_count NUMBER;
			BEGIN

				--급여반영이되지 않은건은 삭제후 다시 생성한다.
				DELETE
		          FROM SL_PENSION_APPLY
		         WHERE CREATE_MONTH = #{v_month}
		           AND APP_PAY_YN = '0'
					 ;

				FOR CU1 IN (SELECT T1.HR_EMPLOYEE_MASTER_ID
								  ,T1.START_COUNT
							FROM SL_PENSION_MANAGE T1
							WHERE NOT EXISTS (SELECT 1 FROM SL_PENSION_APPLY T2 WHERE T2.CREATE_MONTH = #{v_month}
							    												AND T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID)
							  AND (T1.CANCEL_CODE IS NULL AND T1.CANCEL_DATE IS NULL)
							  AND T1.MATURITY_DATE > FN_SYSDATE)
				LOOP

				SELECT CASE WHEN MAX(T1.PAY_COUNT) IS NULL THEN CU1.START_COUNT
				    		ELSE MAX(T1.PAY_COUNT)
				        END
						INTO v_count
				FROM SL_PENSION_APPLY T1
				WHERE T1.HR_EMPLOYEE_MASTER_ID = CU1.HR_EMPLOYEE_MASTER_ID;

				INSERT INTO SL_PENSION_APPLY
							(SL_PENSION_APPLY_ID
							,CREATE_MONTH
							,HR_EMPLOYEE_MASTER_ID
							,CONTRACT_TYPE_CODE
							,CONTRACT_DATE
							,MATURITY_DATE
							,PAY_COUNT
							,MONTHLY_AMT
							,DISCOUNT_AMT
							,ACTUAL_AMT
							,APP_PAY_YN
							,CRTBY,CRTDT,CRTIP
							,AMNBY,AMNDT,AMNIP)
						SELECT SL_PENSION_APPLY_S.NEXTVAL
							,#{v_month}
							,T1.HR_EMPLOYEE_MASTER_ID
							,T1.CONTRACT_TYPE_CODE
							,T1.CONTRACT_DATE
							,T1.MATURITY_DATE
							,v_count + 1
							,T1.MONTHLY_AMT
							,FLOOR(T1.MONTHLY_AMT * (T1.DISCOUNT_RATE / 100))
							,T1.MONTHLY_AMT - T1.CORP_AMT - FLOOR(T1.MONTHLY_AMT * (T1.DISCOUNT_RATE / 100)) + NVL(OTHER_AMT, 0) - NVL(OTHER_DED_AMT, 0)
							,'0'
							,#{CRTBY},SYSDATE,#{CRTIP}
							,#{CRTBY},SYSDATE,#{CRTIP}
						FROM SL_PENSION_MANAGE T1
						WHERE T1.HR_EMPLOYEE_MASTER_ID = CU1.HR_EMPLOYEE_MASTER_ID
						  AND (T1.CANCEL_CODE IS NULL AND T1.CANCEL_DATE IS NULL)
						  AND T1.MATURITY_DATE > FN_SYSDATE;
		    	END LOOP;
		    END}
	</insert>
	<!-- 급여반영 -->
	<insert id="P_SL_PENSION_APPLY_PAY" parameterType="hashmap">
		{CALL
			DECLARE
			BEGIN
				FOR CU1 IN (SELECT COLUMN_VALUE AS EMP_ID FROM COMM_UTIL_PKG.split(#{v_empList}, ','))
				LOOP

				-- 개인부담금
				INSERT INTO SL_BON_VARIABLE_ALLOWANCE
					(SL_BON_VARIABLE_ALLOWANCE_ID
					,COMM_CORPORATION_ID
					,HR_EMPLOYEE_MASTER_ID
					,PAY_DIVISION_CODE
					,PAY_ITEM_CODE
					,WAGE_PRICE
					,BELONG_MONTH
					,CRTBY,CRTDT,CRTIP
					,AMNBY,AMNDT,AMNIP)
				SELECT SL_BON_VARIABLE_ALLOWANCE_S.NEXTVAL
					,#{v_corporation_id}
					,HR_EMPLOYEE_MASTER_ID
					,'sl001100' --'sl002200' --급여공제
					,'D1020' --개인연금공제
					,ACTUAL_AMT
					,CREATE_MONTH
					,#{CRTBY},SYSDATE,#{CRTIP}
					,#{CRTBY},SYSDATE,#{CRTIP}
				FROM SL_PENSION_APPLY
				WHERE HR_EMPLOYEE_MASTER_ID = CU1.EMP_ID
				  AND CREATE_MONTH = #{v_month};

				-- 회사부담금
				INSERT INTO SL_BON_VARIABLE_ALLOWANCE
					(SL_BON_VARIABLE_ALLOWANCE_ID
					,COMM_CORPORATION_ID
					,HR_EMPLOYEE_MASTER_ID
					,PAY_DIVISION_CODE
					,PAY_ITEM_CODE
					,WAGE_PRICE
					,BELONG_MONTH
					,CRTBY,CRTDT,CRTIP
					,AMNBY,AMNDT,AMNIP)
				SELECT SL_BON_VARIABLE_ALLOWANCE_S.NEXTVAL
					,#{v_corporation_id}
					,HR_EMPLOYEE_MASTER_ID
					,'sl001100' --'sl002100' --급여지급
					,'P1032' --개인연금지불
					,(MONTHLY_AMT / 2)
					,CREATE_MONTH
					,#{CRTBY},SYSDATE,#{CRTIP}
					,#{CRTBY},SYSDATE,#{CRTIP}
				FROM SL_PENSION_APPLY
				WHERE HR_EMPLOYEE_MASTER_ID = CU1.EMP_ID
				  AND CREATE_MONTH = #{v_month};


			UPDATE SL_PENSION_APPLY
				SET APP_PAY_YN = '1'
				   ,AMNBY = #{AMNBY}
				   ,AMNDT = SYSDATE
				   ,AMNIP = #{AMNIP}
				WHERE HR_EMPLOYEE_MASTER_ID = CU1.EMP_ID
				  AND CREATE_MONTH = #{v_month};
				END LOOP;
			END}
	</insert>
	<!-- 급여반영취소 -->
	<update id="P_SL_PENSION_APPLY_PAY_CANCEL" parameterType="hashmap">
		{CALL
			DECLARE
			BEGIN
			FOR CU1 IN (SELECT COLUMN_VALUE AS EMP_ID FROM COMM_UTIL_PKG.split(#{v_empList}, ','))
			LOOP

				DELETE FROM SL_BON_VARIABLE_ALLOWANCE
				WHERE HR_EMPLOYEE_MASTER_ID = CU1.EMP_ID
				  AND BELONG_MONTH = #{v_month}
				  AND (PAY_DIVISION_CODE = 'sl001200' OR PAY_DIVISION_CODE = 'sl001100')
				  AND (PAY_ITEM_CODE = 'D1020' OR PAY_ITEM_CODE = 'P1032');

				UPDATE SL_PENSION_APPLY
				SET APP_PAY_YN = '0'
				   ,AMNBY = #{AMNBY}
				   ,AMNDT = SYSDATE
				   ,AMNIP = #{AMNIP}
				WHERE HR_EMPLOYEE_MASTER_ID = CU1.EMP_ID
				  AND CREATE_MONTH = #{v_month};
			END LOOP;
			END}
	</update>
	<!-- ******************************************************* -->
	<!--  					개인연금납입현황			  			 -->
	<!-- ******************************************************* -->
	<select id="S_SL_PENSION_REPORT" parameterType="hashmap" resultType="hashmap">
		SELECT T1.HR_EMPLOYEE_MASTER_ID
			  ,HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE, #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.DATE_POSITION_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, FN_SYSDATE) AS POSITION_NAME
			  ,HR_UTIL_PKG.date_appointment(T1.HR_EMPLOYEE_MASTER_ID, 'DUTY_NAME', FN_SYSDATE, #{v_lang_code}) AS DUTY_NAME
			  ,COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'sl030', T1.CONTRACT_TYPE_CODE, #{v_lang_code}) AS CONTRACT_TYPE_NAME
			  ,SUM(T1.MONTHLY_AMT) AS ACC_PAY_AMT
			  ,COUNT(T1.PAY_COUNT) AS ACC_PAY_COUNT
			  ,T1.CONTRACT_DATE
			  ,T1.MATURITY_DATE
			  ,CASE
			   WHEN T2.CANCEL_DATE IS NULL THEN '0'
			   ELSE '1'
			   END CANCEL_YN
			  ,T2.CANCEL_DATE
			  ,T1.MONTHLY_AMT
			  ,T2.DISCOUNT_RATE
			  ,T2.CORP_AMT
		FROM SL_PENSION_APPLY T1
		LEFT JOIN SL_PENSION_MANAGE T2 ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
		WHERE T1.APP_PAY_YN = '1'
		<if test="v_month != null and v_month != '' and v_month != '%'.toString()">
			AND CREATE_MONTH = #{v_month}
		</if>
		<if test="v_emp_id != null and v_emp_id != '' and v_emp_id != '%'.toString()">
			AND T1.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.DATE_HR_DEPT_CODE(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE) = #{v_dept_code}
		</if>
		<if test="v_contract_name != null and v_contract_name != '' and v_contract_name != '%'.toString()">
			AND COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'sl030', T1.CONTRACT_TYPE_CODE, #{v_lang_code}) = #{v_contract_name}
		</if>
		<if test="v_cancel_yn == 1">
			AND T2.CANCEL_DATE IS NULL
		</if>
		GROUP BY T1.HR_EMPLOYEE_MASTER_ID,T1.CONTRACT_TYPE_CODE,T1.MONTHLY_AMT
				,T1.CONTRACT_DATE,T1.MATURITY_DATE,T2.CANCEL_DATE
				,T1.MONTHLY_AMT,T2.DISCOUNT_RATE,T2.CORP_AMT
		ORDER BY T1.HR_EMPLOYEE_MASTER_ID, HR_UTIL_PKG.DATE_POSITION_CODE(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE)
	</select>

	<!-- ******************************************************* -->
	<!--  					사원별 개인연금납입현황			  	     -->
	<!-- ******************************************************* -->
	<select id="S_SL_PENSION_EMP" parameterType="hashmap" resultType="hashmap">
		SELECT T1.HR_EMPLOYEE_MASTER_ID
		      ,HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			  ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,HR_UTIL_PKG.DATE_HR_DEPT_NAME(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE, #{v_lang_code}) AS DEPT_NAME
			  ,HR_UTIL_PKG.DATE_POSITION_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}, FN_SYSDATE) AS POSITION_NAME
			  ,T1.CONTRACT_DATE
			  ,COMM_UTIL_PKG.WRK_CODE_NAME(#{v_corporation_id}, 'sl030', T1.CONTRACT_TYPE_CODE, #{v_lang_code}) AS CONTRACT_TYPE_NAME
			  ,T2.CANCEL_DATE
			  ,T1.MATURITY_DATE
			  ,T1.MONTHLY_AMT
			  ,T2.DISCOUNT_RATE
			  ,(T1.MONTHLY_AMT) * (T2.DISCOUNT_RATE / 100) AS DISCOUNT_AMT
			  ,SUM(T1.MONTHLY_AMT) AS ACC_PAY_AMT
			  ,COUNT(T1.PAY_COUNT) AS ACC_PAY_COUNT
			  ,CASE
			   WHEN T2.CANCEL_DATE IS NULL THEN '0'
			   ELSE '1'
			   END CANCEL_YN
			  ,MAX(T1.CREATE_MONTH) AS LAST_PAY_MONTH
		FROM SL_PENSION_APPLY T1
		LEFT JOIN SL_PENSION_MANAGE T2 ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
		WHERE T1.APP_PAY_YN = '1'
		<if test="v_emp_id != null and v_emp_id != '' and v_emp_id != '%'.toString()">
			AND T1.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		</if>
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND HR_UTIL_PKG.DATE_HR_DEPT_CODE(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE) = #{v_dept_code}
		</if>
		<if test="v_cancel_yn == 1">
			AND T2.CANCEL_DATE IS NULL
		</if>
		GROUP BY T1.HR_EMPLOYEE_MASTER_ID,T1.CONTRACT_TYPE_CODE,T1.MONTHLY_AMT
				,T1.CONTRACT_DATE,T1.MATURITY_DATE,T2.CANCEL_DATE
				,T1.MONTHLY_AMT,T2.DISCOUNT_RATE,T2.CORP_AMT
		ORDER BY T1.HR_EMPLOYEE_MASTER_ID, HR_UTIL_PKG.DATE_POSITION_CODE(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE)
	</select>
	<select id="S_SL_PENSION_EMP_DETAIL" parameterType="hashmap" resultType="hashmap">
		SELECT T2.CREATE_MONTH
			  ,T2.PAY_COUNT
			  ,T1.MONTHLY_AMT
			  ,T1.DISCOUNT_RATE
			  ,T1.MONTHLY_AMT - T1.CORP_AMT - (T1.MONTHLY_AMT * (T1.DISCOUNT_RATE / 100)) AS ACTUAL_AMT
			  ,T1.CORP_AMT
		FROM SL_PENSION_MANAGE T1
		LEFT JOIN SL_PENSION_APPLY T2 ON T1.HR_EMPLOYEE_MASTER_ID = T2.HR_EMPLOYEE_MASTER_ID
		WHERE T2.APP_PAY_YN = '1'
		  AND T1.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
		ORDER BY T1.HR_EMPLOYEE_MASTER_ID, HR_UTIL_PKG.DATE_POSITION_CODE(T1.HR_EMPLOYEE_MASTER_ID, FN_SYSDATE)
	</select>
	<!-- ******************************************* -->
	<!-- 자격증별 수당책정관리 sl_certi_pay.jsp -->
	<!-- ******************************************* -->
	<select id="S_SL_CERTI_PAY" parameterType="hashmap"  resultType="hashmap">
		SELECT hm.emp_no
			  ,hr_util_pkg.emp_name(hm.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			  ,comm_util_pkg.emp_title(hm.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			  ,c.dept_name AS dept_name
			  ,hr_util_pkg.date_position_name(hm.hr_employee_master_id,#{v_lang_code},fn_sysdate) as position_name
			  ,hr_util_pkg.date_appointment(hm.hr_employee_master_id, 'DUTY_NAME', fn_sysdate, #{v_lang_code}) as duty_name
			  ,hl.license_name
			  ,hl.license_no
			  ,hl.license_grade_code
			  ,comm_util_pkg.wrk_code_attribute(#{v_corporation_id},'ATTRIBUTE1','hr051',hl.license_grade_code) AS LICENSE_PAY
			  ,hl.PAY_FR_DATE
			  ,hl.PAY_TO_DATE
			  ,hl.license_source
			  ,hl.pass_date
			  ,hl.expire_date
			  ,hl.note
			  ,hl.hr_employee_license_id
			  ,hl.hr_employee_master_id
		FROM hr_employee_license hl
		LEFT JOIN hr_employee_master hm ON (hl.hr_employee_master_id = hm.hr_employee_master_id)
		LEFT JOIN (SELECT MIN(CASE WHEN upper(#{v_lang_code}) = 'KO' THEN
						 b.dept_name
						 WHEN upper(#{v_lang_code}) = 'EN' THEN
						 nvl(b.dept_name_en, b.dept_name)
						 WHEN upper(#{v_lang_code}) = 'ZH' THEN
						 nvl(b.dept_name_zh, b.dept_name)
						 ELSE
						 b.dept_name
						 END) keep(dense_rank FIRST ORDER BY a.appointment_date DESC, a.approve_date DESC, a.hr_employee_appointment_id DESC, b.modified_date desc) AS dept_name
						 ,min(b.dept_code) keep(dense_rank FIRST ORDER BY a.appointment_date DESC, a.approve_date DESC, a.hr_employee_appointment_id DESC, b.modified_date desc) AS dept_code
						 ,a.hr_employee_master_id
				 <![CDATA[
					 FROM hr_employee_appointment a
					 LEFT JOIN hr_department b ON a.hr_department_code = b.dept_code
					 AND TO_DATE(b.modified_date) <= SYSDATE
					 WHERE TO_DATE(a.appointment_date) <= SYSDATE
					   and a.approve_yn = '1'
					 GROUP BY a.hr_employee_master_id
					 ]]>) C ON hl.hr_employee_master_id = C.hr_employee_master_id
		WHERE hm.comm_corporation_id = #{v_corporation_id}
				AND hl.fix_code = 'my002100'
		<if test="LICENSE_NAME != null and LICENSE_NAME != '' and LICENSE_NAME != '%'.toString()">
		  and hl.license_name = #{LICENSE_NAME}
		</if>
		<if test="v_dept_cd != null and v_dept_cd != '' and v_dept_cd != '%'.toString()">
		  and c.dept_code = #{v_dept_cd}
		</if>
		<if test="HR_EMPLOYEE_MASTER_ID != null and HR_EMPLOYEE_MASTER_ID != '' and HR_EMPLOYEE_MASTER_ID != '%'.toString()">
		 and hl.hr_employee_master_id = #{HR_EMPLOYEE_MASTER_ID}
		</if>
        <if test="v_work_state_code != null and v_work_state_code != '' and v_work_state_code != '%'.toString()">
         AND HR_UTIL_PKG.date_appointment(hl.HR_EMPLOYEE_MASTER_ID, 'WORK_STATE_CODE', FN_SYSDATE, #{v_lang_code}) = #{v_work_state_code}
        </if>   		
		order by hl.hr_employee_license_id
	</select>

	<!-- ******************************************* -->
	<!--            	급상여전표생성                  -->
	<!-- ******************************************* -->
	<!-- 전표생성 -->
	<select id="P_SL_PAY_INVOICE_CREATE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{CALL
				SL_INVOICE.SET_LINE_INTERFACE(#{v_payment_count}
											 ,#{FI_BI_DIVISION_ID}
											 ,#{INVOICE_DATE}
											 ,#{v_month}
				    						 ,#{v_term_date}
				    						 ,#{v_sl_pay_invoice_period_id}
											 ,#{v_corporation_id}
											 ,#{v_lang_code}
											 ,#{v_emp_id}
											 ,#{CRTIP}
											 ,#{result,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=resultMap}
											 ,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg})}
	</select>
	<!-- 계정별현황 -->
	<select id="S_SL_PAY_INVOICE_ACCOUNT" parameterType="hashmap" resultType="hashmap">
		SELECT ACCOUNT_CODE
			  ,ACCOUNT_NAME
			  ,PROJECT_NAME
			  ,ROUND(DB_AMT, 0) AS DB_AMT
			  ,CR_AMT
			  ,CUST_CODE
			  ,CUST_NAME
		FROM TABLE(SL_INVOICE.GET_ACCOUNT_REPORT(#{v_payment_count}, #{v_fi_bi_div_id}, #{v_month}, #{v_corporation_id}, #{v_business_id}, #{v_lang_code}))
		ORDER BY ACCOUNT_CODE DESC
	</select>
	<!-- 사원별현황 -->
	<select id="S_SL_PAY_INVOICE_EMP" parameterType="hashmap" resultType="hashmap">
		SELECT FI_UTIL_PKG.PROJECT_NAME(D.FI_PROJECT_ID) AS PROJECT_NAME --차변
			 ,HR_UTIL_PKG.EMP_NO(A.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 ,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 ,HR_UTIL_PKG.DATE_POSITION_CODE(A.HR_EMPLOYEE_MASTER_ID) AS POSITION_NAME
			 ,FI_UTIL_PKG.ACCOUNT_CODE(F.FI_BI_ACCOUNT_ID) AS ACCOUNT_CODE
			 ,FI_UTIL_PKG.ACCOUNT_NAME(F.FI_BI_ACCOUNT_ID) AS ACCOUNT_NAME
			 ,SUM(NVL(A.CALC_AUTO_AMT, 0) * D.RATE / 100) AS DB_AMT
			 ,0 AS CR_AMT
			 ,COMM_UTIL_PKG.CV_NO(NVL(E.DB_CUST_ID, (SELECT X2.COMM_CV_ID
													 FROM FI_BI_JOURNALIZE X1
													 LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
													 WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
													   AND X2.DRCR_CODE = 'fi000200'
													   AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_CODE
			 ,COMM_UTIL_PKG.CV_NAME(NVL(E.DB_CUST_ID, (SELECT X2.COMM_CV_ID
													   FROM FI_BI_JOURNALIZE X1
													   LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
													   WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
														 AND X2.DRCR_CODE = 'fi000200'
														 AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_NAME
		FROM SL_PAY_DETAIL A
		LEFT JOIN SL_BI_CODE C ON A.PAY_ITEM_CODE = C.PAY_ITEM_CODE
								AND C.COMM_CORPORATION_ID = #{v_corporation_id}
								AND C.USE_YN = '1'
		JOIN HR_EMPLOYEE_PROJECT D ON A.HR_EMPLOYEE_MASTER_ID = D.HR_EMPLOYEE_MASTER_ID
									AND D.STD_MONTH = #{v_month}
									AND HR_UTIL_PKG.DATE_APPOINTMENT(D.HR_EMPLOYEE_MASTER_ID, 'COMM_BUSINESS_ID', FN_SYSDATE, #{v_lang_code}) = #{v_business_id}
		LEFT JOIN SL_BI_CODE_ACCOUNT E ON A.PAY_ITEM_CODE = E.PAY_ITEM_CODE
		LEFT JOIN FI_BI_ACCOUNT F ON E.DB_ACCOUNT_ID = F.FI_BI_ACCOUNT_ID --차변
									AND F.COMM_CORPORATION_ID = #{v_corporation_id}
		JOIN FI_PROJECT H ON D.FI_PROJECT_ID = H.FI_PROJECT_ID
							AND E.PRJ_TYPE_CODE = H.PRJ_TYPE_CODE
		WHERE 1 = 1
		  AND A.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND D.RATE IS NOT NULL
		  AND NVL(A.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (C.PAY_DED_CODE = 'sl002100' OR C.PAY_DED_CODE = 'sl002200')
		GROUP BY D.FI_PROJECT_ID,A.HR_EMPLOYEE_MASTER_ID,F.FI_BI_ACCOUNT_ID,E.DB_CUST_ID
		UNION ALL
		SELECT FI_UTIL_PKG.PROJECT_NAME(T6.FI_PROJECT_ID) AS PROJECT_NAME -- 대변
			 ,HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 ,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 ,HR_UTIL_PKG.DATE_POSITION_CODE(T1.HR_EMPLOYEE_MASTER_ID) AS POSITION_NAME
			 ,FI_UTIL_PKG.ACCOUNT_CODE(T5.FI_BI_ACCOUNT_ID) AS ACCOUNT_CODE
			 ,FI_UTIL_PKG.ACCOUNT_NAME(T5.FI_BI_ACCOUNT_ID) AS ACCOUNT_NAME
			 ,0 AS DB_AMT
			 ,SUM(NVL(T1.CALC_AUTO_AMT, 0)) AS CR_AMT
			 ,COMM_UTIL_PKG.CV_NO(NVL(T3.CR_CUST_ID, (SELECT X2.COMM_CV_ID
													  FROM FI_BI_JOURNALIZE X1
													  LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
													  WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
														AND X2.DRCR_CODE = 'fi000200'
														AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_CODE
			 ,COMM_UTIL_PKG.CV_NAME(NVL(T3.CR_CUST_ID, (SELECT X2.COMM_CV_ID
														FROM FI_BI_JOURNALIZE X1
														LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
														WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
														  AND X2.DRCR_CODE = 'fi000200'
														  AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_NAME
		FROM SL_PAY_DETAIL T1
		LEFT JOIN SL_BI_CODE T2 ON T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
								AND T2.COMM_CORPORATION_ID = #{v_corporation_id}
								AND T2.USE_YN = '1'
		LEFT JOIN SL_BI_CODE_ACCOUNT T3 ON T1.PAY_ITEM_CODE = T3.PAY_ITEM_CODE
		LEFT JOIN FI_BI_ACCOUNT T4 ON T3.DB_ACCOUNT_ID = T4.FI_BI_ACCOUNT_ID --차변
									AND T4.COMM_CORPORATION_ID = #{v_corporation_id}
		LEFT JOIN FI_BI_ACCOUNT T5 ON T3.CR_ACCOUNT_ID = T5.FI_BI_ACCOUNT_ID --대변
									AND T5.COMM_CORPORATION_ID = #{v_corporation_id}
		JOIN HR_EMPLOYEE_PROJECT T6 ON T1.HR_EMPLOYEE_MASTER_ID = T6.HR_EMPLOYEE_MASTER_ID
									AND T6.STD_MONTH = #{v_month}
									AND HR_UTIL_PKG.DATE_APPOINTMENT(T6.HR_EMPLOYEE_MASTER_ID, 'COMM_BUSINESS_ID', FN_SYSDATE, #{v_lang_code}) = #{v_business_id}
		WHERE 1 = 1
		  AND T1.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND T1.PAYMENT_MONTH = #{v_month}
		  AND T4.FI_BI_ACCOUNT_ID IS NULL
		  AND NVL(T1.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (T2.PAY_DED_CODE = 'sl002100' OR T2.PAY_DED_CODE = 'sl002200')
		GROUP BY T6.FI_PROJECT_ID,T1.HR_EMPLOYEE_MASTER_ID,T5.FI_BI_ACCOUNT_ID,T3.CR_CUST_ID
		ORDER BY EMP_NAME, PROJECT_NAME, ACCOUNT_CODE
	</select>
	<!-- 상세현황 -->
	<select id="S_SL_PAY_INVOICE_DETAIL" parameterType="hashmap" resultType="hashmap">
		SELECT FI_UTIL_PKG.PROJECT_NAME(D.FI_PROJECT_ID) AS PROJECT_NAME
			 ,HR_UTIL_PKG.EMP_NO(A.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 ,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 ,SL_UTIL_PKG.pay_item_name2(#{v_corporation_id}, A.PAY_ITEM_CODE) AS PAY_ITEM_NAME
			 ,HR_UTIL_PKG.DATE_POSITION_CODE(A.HR_EMPLOYEE_MASTER_ID) AS POSITION_NAME
			 ,FI_UTIL_PKG.ACCOUNT_CODE(F.FI_BI_ACCOUNT_ID) AS ACCOUNT_CODE
			 ,FI_UTIL_PKG.ACCOUNT_NAME(F.FI_BI_ACCOUNT_ID) AS ACCOUNT_NAME
			 ,NVL(A.CALC_AUTO_AMT, 0) * D.RATE / 100 AS DB_AMT
			 ,0 AS CR_AMT
			 ,COMM_UTIL_PKG.CV_NO(NVL(E.DB_CUST_ID, (SELECT X2.COMM_CV_ID
													 FROM FI_BI_JOURNALIZE X1
															  LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
													 WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
													   AND X2.DRCR_CODE = 'fi000200'
													   AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_CODE
			 ,COMM_UTIL_PKG.CV_NAME(NVL(E.DB_CUST_ID, (SELECT X2.COMM_CV_ID
													   FROM FI_BI_JOURNALIZE X1
																LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
													   WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
														 AND X2.DRCR_CODE = 'fi000200'
														 AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_NAME
		FROM SL_PAY_DETAIL A
				 LEFT JOIN SL_BI_CODE C ON A.PAY_ITEM_CODE = C.PAY_ITEM_CODE
			AND C.COMM_CORPORATION_ID = #{v_corporation_id}
			AND C.USE_YN = '1'
				 JOIN HR_EMPLOYEE_PROJECT D ON A.HR_EMPLOYEE_MASTER_ID = D.HR_EMPLOYEE_MASTER_ID
			AND D.STD_MONTH = #{v_month}
			AND HR_UTIL_PKG.DATE_APPOINTMENT(D.HR_EMPLOYEE_MASTER_ID, 'COMM_BUSINESS_ID', FN_SYSDATE, #{v_lang_code}) = #{v_business_id}
				 LEFT JOIN SL_BI_CODE_ACCOUNT E ON A.PAY_ITEM_CODE = E.PAY_ITEM_CODE
				 LEFT JOIN FI_BI_ACCOUNT F ON E.DB_ACCOUNT_ID = F.FI_BI_ACCOUNT_ID --차변
			AND F.COMM_CORPORATION_ID = #{v_corporation_id}
				 JOIN FI_PROJECT H ON D.FI_PROJECT_ID = H.FI_PROJECT_ID
			AND E.PRJ_TYPE_CODE = H.PRJ_TYPE_CODE
		WHERE 1 = 1
		  AND A.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND D.RATE IS NOT NULL
		  AND NVL(A.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (C.PAY_DED_CODE = 'sl002100' OR C.PAY_DED_CODE = 'sl002200')
		UNION ALL
		SELECT FI_UTIL_PKG.PROJECT_NAME(T6.FI_PROJECT_ID) AS PROJECT_NAME
			 ,HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
			 ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
			 ,COMM_UTIL_PKG.EMP_TITLE(T1.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
			 ,SL_UTIL_PKG.pay_item_name2(#{v_corporation_id}, T1.PAY_ITEM_CODE) AS PAY_ITEM_NAME
			 ,HR_UTIL_PKG.DATE_POSITION_CODE(T1.HR_EMPLOYEE_MASTER_ID) AS POSITION_NAME
			 ,FI_UTIL_PKG.ACCOUNT_CODE(T5.FI_BI_ACCOUNT_ID) AS ACCOUNT_CODE
			 ,FI_UTIL_PKG.ACCOUNT_NAME(T5.FI_BI_ACCOUNT_ID) AS ACCOUNT_NAME
			 ,0 AS DB_AMT
			 ,NVL(T1.CALC_AUTO_AMT, 0) AS CR_AMT
			 ,COMM_UTIL_PKG.CV_NO(NVL(T3.CR_CUST_ID, (SELECT X2.COMM_CV_ID
													  FROM FI_BI_JOURNALIZE X1
															   LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
													  WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
														AND X2.DRCR_CODE = 'fi000200'
														AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_CODE
			 ,COMM_UTIL_PKG.CV_NAME(NVL(T3.CR_CUST_ID, (SELECT X2.COMM_CV_ID
														FROM FI_BI_JOURNALIZE X1
																 LEFT JOIN FI_BI_JOURNALIZE_DETAIL X2 ON X1.FI_BI_JOURNALIZE_ID = X2.FI_BI_JOURNALIZE_ID
														WHERE X1.FI_BI_JOURNALIZE_CODE = 'TR200'
														  AND X2.DRCR_CODE = 'fi000200'
														  AND X1.FI_BI_DIVISION_ID = #{v_fi_bi_div_id}))) AS CUST_NAME
		FROM SL_PAY_DETAIL T1
				 LEFT JOIN SL_BI_CODE T2 ON T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
			AND T2.COMM_CORPORATION_ID = #{v_corporation_id}
			AND T2.USE_YN = '1'
				 LEFT JOIN SL_BI_CODE_ACCOUNT T3 ON T1.PAY_ITEM_CODE = T3.PAY_ITEM_CODE
				 LEFT JOIN FI_BI_ACCOUNT T4 ON T3.DB_ACCOUNT_ID = T4.FI_BI_ACCOUNT_ID --차변
			AND T4.COMM_CORPORATION_ID = #{v_corporation_id}
				 LEFT JOIN FI_BI_ACCOUNT T5 ON T3.CR_ACCOUNT_ID = T5.FI_BI_ACCOUNT_ID --대변
			AND T5.COMM_CORPORATION_ID = #{v_corporation_id}
				 JOIN HR_EMPLOYEE_PROJECT T6 ON T1.HR_EMPLOYEE_MASTER_ID = T6.HR_EMPLOYEE_MASTER_ID
			AND T6.STD_MONTH = #{v_month}
			AND HR_UTIL_PKG.DATE_APPOINTMENT(T6.HR_EMPLOYEE_MASTER_ID, 'COMM_BUSINESS_ID', FN_SYSDATE, #{v_lang_code}) = #{v_business_id}
		WHERE 1 = 1
		  AND T1.SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND T1.PAYMENT_MONTH = #{v_month}
		  AND T4.FI_BI_ACCOUNT_ID IS NULL
		  AND NVL(T1.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (T2.PAY_DED_CODE = 'sl002100' OR T2.PAY_DED_CODE = 'sl002200')
		ORDER BY EMP_NAME, PROJECT_NAME, ACCOUNT_CODE, PAY_ITEM_NAME
	</select>
	<!-- ******************************************* -->
	<!-- 자격증별 수당책정관리 sl_certi_pay.jsp 자격증별 금액 -->
	<!-- ******************************************* -->
	<select id="S_PRICE_BY_LICENSE" parameterType="hashmap"  resultType="hashmap">
		select comm_util_pkg.wrk_code_attribute(#{v_corporation_id},'ATTRIBUTE1','hr051',#{CODE}) as price
		from dual
	</select>
	<!-- ******************************************* -->
	<!-- 자격증별 수당책정관리 sl_certi_pay.jsp 자격증별 금액 -->
	<!-- ******************************************* -->
	<select id="S_SL_REPORT_PROJECT_ITEM" parameterType="hashmap"  resultType="hashmap">
		SELECT DISTINCT '''' || A.PAY_ITEM_CODE || '''' AS PAY_ITEM_CODE
					  ,SL_UTIL_PKG.PAY_NAME2(#{v_corporation_id}, A.PAY_ITEM_CODE, #{v_lang_code}) AS PAY_ITEM_NAME
					  ,B.PRINT_SEQ
		FROM SL_PAY_DETAIL A
				 LEFT JOIN SL_BI_CODE B ON A.PAY_ITEM_CODE = B.PAY_ITEM_CODE
			AND B.COMM_CORPORATION_ID = #{v_corporation_id}
			AND B.USE_YN = '1'
		WHERE SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND NVL(A.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (B.PAY_DED_CODE = 'sl002100' OR B.PAY_DED_CODE = 'sl002200')
		GROUP BY A.PAY_ITEM_CODE,B.PRINT_SEQ
		ORDER BY B.PRINT_SEQ
	</select>

	<!-- ******************************************* -->
	<!-- 		개인별 상세내역 2021.11.01 이동훈 			 -->
	<!-- ******************************************* -->
	<select id="S_SL_REPORT_EMPLOYEE_ITEM" parameterType="hashmap"  resultType="hashmap">
		SELECT DISTINCT '''' || A.PAY_ITEM_CODE || '''' AS PAY_ITEM_CODE
					  ,SL_UTIL_PKG.PAY_NAME2(#{v_corporation_id}, A.PAY_ITEM_CODE, #{v_lang_code}) AS PAY_ITEM_NAME
					  ,B.PRINT_SEQ
		FROM SL_PAY_DETAIL A
				 LEFT JOIN SL_BI_CODE B ON A.PAY_ITEM_CODE = B.PAY_ITEM_CODE
			AND B.COMM_CORPORATION_ID = #{v_corporation_id}
			AND B.USE_YN = '1'
		WHERE SL_BON_PAYMENT_COUNT_ID = #{v_payment_count}
		  AND NVL(A.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (B.PAY_DED_CODE = 'sl002100' OR B.PAY_DED_CODE = 'sl002200')
		GROUP BY A.PAY_ITEM_CODE,B.PRINT_SEQ
		ORDER BY B.PRINT_SEQ
	</select>

	<!-- ******************************************* -->
	<!--            	급상여전월비교                  -->
	<!-- ******************************************* -->
	<select id="S_SL_REPORT_COMPARE" parameterType="hashmap" resultType="hashmap">
		WITH TEMP AS
			 (SELECT 1
			<choose>
				<when test ="v_emp != null and v_interim != '' and v_interim != '%'.toString()">
					,HR_UTIL_PKG.EMP_NO(A.HR_EMPLOYEE_MASTER_ID) AS EMP_NO
					,HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS EMP_NAME
					,COMM_UTIL_PKG.EMP_TITLE(A.HR_EMPLOYEE_MASTER_ID, #{v_corporation_id}) AS EMP_TITLE
				</when>
				<otherwise>
					,D.FI_PROJECT_ID
					,FI_UTIL_PKG.PROJECT_CODE(D.FI_PROJECT_ID) AS PROJECT_CODE
					,FI_UTIL_PKG.PROJECT_NAME(D.FI_PROJECT_ID) AS PROJECT_NAME
				</otherwise>
			</choose>
					,NVL(COUNT(DISTINCT DECODE(A.SL_BON_PAYMENT_COUNT_ID, #{v_prev_payment_count_id}, A.HR_EMPLOYEE_MASTER_ID)), 0) AS EMP_PREV
					,NVL(COUNT(DISTINCT DECODE(A.SL_BON_PAYMENT_COUNT_ID,  #{v_curr_payment_count_id}, A.HR_EMPLOYEE_MASTER_ID)), 0) AS EMP_CURR
					,NVL(SUM(DECODE(NVL2(H.FI_PROJECT_ID, 1, 0), 1, DECODE(A.SL_BON_PAYMENT_COUNT_ID, #{v_prev_payment_count_id}, (NVL(A.CALC_AUTO_AMT, 0) * D.RATE / 100)))), 0) AS PAY_PREV
					,NVL(SUM(DECODE(NVL2(H.FI_PROJECT_ID, 1, 0), 1, DECODE(A.SL_BON_PAYMENT_COUNT_ID, #{v_curr_payment_count_id}, (NVL(A.CALC_AUTO_AMT, 0) * D.RATE / 100)))), 0) AS PAY_CURR
					,NVL(SUM(DECODE(F.FI_BI_ACCOUNT_ID, NULL, DECODE(A.SL_BON_PAYMENT_COUNT_ID, #{v_prev_payment_count_id}, NVL(A.CALC_AUTO_AMT, 0)))), 0) AS DED_PREV
					,NVL(SUM(DECODE(F.FI_BI_ACCOUNT_ID, NULL, DECODE(A.SL_BON_PAYMENT_COUNT_ID, #{v_curr_payment_count_id}, NVL(A.CALC_AUTO_AMT, 0)))), 0) AS DED_CURR
			  FROM SL_PAY_DETAIL A
			  LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = A.hr_employee_master_id
			  LEFT JOIN SL_BI_CODE C ON A.PAY_ITEM_CODE = C.PAY_ITEM_CODE
									AND C.COMM_CORPORATION_ID = #{v_corporation_id}
									AND C.USE_YN = '1'
			  JOIN HR_EMPLOYEE_PROJECT D ON A.HR_EMPLOYEE_MASTER_ID = D.HR_EMPLOYEE_MASTER_ID
										  AND D.STD_MONTH = #{v_month}
										  AND HR_UTIL_PKG.DATE_APPOINTMENT(D.HR_EMPLOYEE_MASTER_ID, 'COMM_BUSINESS_ID', FN_SYSDATE, #{v_lang_code}) = #{v_business_id}
			  LEFT JOIN SL_BI_CODE_ACCOUNT E ON A.PAY_ITEM_CODE = E.PAY_ITEM_CODE
			  LEFT JOIN FI_BI_ACCOUNT F ON E.DB_ACCOUNT_ID = F.FI_BI_ACCOUNT_ID --차변
										AND F.COMM_CORPORATION_ID = #{v_corporation_id}
			  LEFT JOIN FI_PROJECT H ON D.FI_PROJECT_ID = H.FI_PROJECT_ID
									AND E.PRJ_TYPE_CODE = H.PRJ_TYPE_CODE
			  WHERE 1 = 1
				AND (A.SL_BON_PAYMENT_COUNT_ID = #{v_prev_payment_count_id} OR A.SL_BON_PAYMENT_COUNT_ID = #{v_curr_payment_count_id})
				AND NVL(A.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
				AND (C.PAY_DED_CODE = 'sl002100' OR C.PAY_DED_CODE = 'sl002200')
			<if test="v_pay_div_code != null and v_pay_div_code != '' and v_pay_div_code != '%'.toString()">
				AND A.PAY_DIVISION_CODE = #{v_pay_div_code}
			</if>
			<if test="v_project_code != null and v_project_code != '' and v_project_code != '%'.toString()">
				AND H.PROJECT_CODE = #{v_project_code}
			</if>
			<if test="v_emp_id != null and v_emp_id != '' and v_emp_id != '%'.toString()">
				AND A.HR_EMPLOYEE_MASTER_ID = #{v_emp_id}
			</if>
		<choose>
			<when test ="v_emp != null and v_interim != '' and v_interim != '%'.toString()">
				AND D.FI_PROJECT_ID = #{v_fi_project_id}
				GROUP BY A.HR_EMPLOYEE_MASTER_ID
				ORDER BY HR_UTIL_PKG.EMP_NAME(A.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}))
			</when>
			<otherwise>
				GROUP BY D.FI_PROJECT_ID
				ORDER BY FI_UTIL_PKG.PROJECT_NAME(D.FI_PROJECT_ID))
			</otherwise>
		</choose>
		SELECT 1
		<choose>
			<when test ="v_emp != null and v_interim != '' and v_interim != '%'.toString()">
			  ,TEMP.EMP_NO
			  ,TEMP.EMP_NAME
			  ,TEMP.EMP_TITLE
			</when>
			<otherwise>
			  ,TEMP.FI_PROJECT_ID
			  ,TEMP.PROJECT_CODE
			  ,TEMP.PROJECT_NAME
			</otherwise>
		</choose>
			  ,TEMP.EMP_PREV
			  ,TEMP.EMP_CURR
			  ,TEMP.EMP_CURR - TEMP.EMP_PREV AS EMP_DIFF
			  ,TEMP.PAY_PREV - TEMP.DED_PREV AS REAL_PREV
			  ,TEMP.PAY_CURR - TEMP.DED_CURR AS REAL_CURR
			  ,(TEMP.PAY_CURR - TEMP.DED_CURR) - (TEMP.PAY_PREV - TEMP.DED_PREV) AS REAL_DIFF
			  ,TEMP.PAY_PREV
			  ,TEMP.PAY_CURR
			  ,TEMP.PAY_CURR - TEMP.PAY_PREV AS PAY_DIFF
			  ,TEMP.DED_PREV
			  ,TEMP.DED_CURR
			  ,TEMP.DED_CURR - TEMP.DED_PREV AS DED_DIFF
		FROM TEMP
	</select>

	<!-- ******************************************* -->
	<!--            	년간급상여집계표                -->
	<!-- ******************************************* -->
	<select id="S_SL_REPORT_YEARLY_EMP" parameterType="hashmap" resultType="hashmap">
		SELECT HR_UTIL_PKG.EMP_NO(T1.HR_EMPLOYEE_MASTER_ID) AS CODE
			  ,HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) AS NAME
			  ,COMM_UTIL_PKG.wrk_code_name(#{v_corporation_id}, 'sl002', T2.PAY_DED_CODE, #{v_lang_code}) AS PAY_DED_NAME
			  ,T2.PAY_ITEM_CODE
			  ,T2.PAY_ITEM_NAME
			  ,T1.PAYMENT_MONTH
			  ,NVL(T1.CALC_AUTO_AMT, 0) AS PAY_AMT
		FROM SL_PAY_DETAIL T1
		LEFT JOIN SL_BI_CODE T2 ON T1.PAY_ITEM_CODE = T2.PAY_ITEM_CODE
								AND T2.COMM_CORPORATION_ID = #{v_corporation_id}
								AND T2.USE_YN = '1'
		WHERE 1 = 1
		  AND SUBSTR(T1.PAYMENT_MONTH, 0, 4) = #{v_year}
		  AND NVL(T1.CALC_AUTO_AMT, 0) <![CDATA[ <> ]]> 0
		  AND (T2.PAY_DED_CODE = 'sl002100' OR T2.PAY_DED_CODE = 'sl002200')
		ORDER BY HR_UTIL_PKG.EMP_NAME(T1.HR_EMPLOYEE_MASTER_ID, #{v_lang_code})
			    ,T1.PAYMENT_MONTH, T2.PAY_DED_CODE
	</select>

	<!-- ******************************************* -->
	<!-- 급여명세조회(sl_pay_detail_report.jsp) -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_DETAIL_REPORT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		 select A.PAYMENT_MONTH AS PAY_MONTH
		       ,B.PAYMENT_COUNT AS PAYMENT_COUNT
		       ,C.AMT           AS PAY_AMT
		       ,D.AMT           AS DEDUCT_AMT
		       ,C.AMT - D.AMT   AS PAYMENT_AMT
		       ,A.SL_BON_PAYMENT_COUNT_ID AS SL_BON_PAYMENT_COUNT_ID
			   ,A.hr_employee_master_id
		 	   ,hr_util_pkg.emp_name(A.hr_employee_master_id,#{v_lang_code}) as emp_name
		 	   ,comm_util_pkg.emp_title(A.hr_employee_master_id,#{v_corporation_id}) as emp_title
		 	   ,hr_util_pkg.date_hr_dept_name(A.hr_employee_master_id,#{v_dept_date}, #{v_lang_code}) as dept_name
		  from sl_pay_recipient A
		  LEFT JOIN SL_BON_PAYMENT_COUNT B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
		  LEFT JOIN (
		        SELECT  Z.SL_PAY_RECIPIENT_ID
		               ,SUM( NVL(Z.PAYMENT_AMT, 0) ) AS AMT
		          FROM SL_PAY_DETAIL Z
		          LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
		         WHERE Y.PAY_DED_CODE = 'sl002100'
		         GROUP BY Z.SL_PAY_RECIPIENT_ID
		       ) C ON C.SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
		  LEFT JOIN (
		        SELECT  Z.SL_PAY_RECIPIENT_ID
		               ,SUM( NVL(Z.PAYMENT_AMT, 0) ) AS AMT
		          FROM SL_PAY_DETAIL Z
		          LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
		         WHERE Y.PAY_DED_CODE = 'sl002200'
		         GROUP BY Z.SL_PAY_RECIPIENT_ID
		       ) D ON D.SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
		       JOIN SL_PAY_END E ON B.SL_BON_PAYMENT_COUNT_ID = E.SL_BON_PAYMENT_COUNT_ID
		LEFT JOIN HR_EMPLOYEE_MASTER hem ON hem.hr_employee_master_id = A.hr_employee_master_id
		 WHERE 1 = 1 
		   AND A.payment_month = #{v_payment_month}
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND hr_util_pkg.date_hr_dept_code(A.hr_employee_master_id,#{v_dept_date}) = #{v_dept_code}
		</if>
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
			AND A.hr_employee_master_id = #{v_hr_employee_master_id}
		</if>
		<if test="v_payment_count != null and v_payment_count != '' and v_payment_count != '%'.toString()">
			AND B.PAYMENT_COUNT = #{v_payment_count}
		</if>
		 ORDER BY A.payment_month, B.PAYMENT_COUNT
	</select>

	<!-- ******************************************* -->
	<!-- 급여명세조회(sl_pay_report_email.jsp) -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_REPORT_EMAIL" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		select A.PAYMENT_MONTH AS PAY_MONTH
			 , B.PAYMENT_COUNT AS PAYMENT_COUNT
			 , C.AMT           AS PAY_AMT
			 , D.AMT           AS DEDUCT_AMT
			 , C.AMT - D.AMT   AS PAYMENT_AMT
			 , A.SL_BON_PAYMENT_COUNT_ID AS SL_BON_PAYMENT_COUNT_ID
			 , A.hr_employee_master_id
			 , hr_util_pkg.emp_name(A.hr_employee_master_id,#{v_lang_code}) as emp_name
			 , comm_util_pkg.emp_title(A.hr_employee_master_id,#{v_corporation_id}) as emp_title
			 , hr_util_pkg.date_hr_dept_name(A.hr_employee_master_id,#{v_dept_date}, #{v_lang_code}) as dept_name
			 , NVL(F3.EMAIL, F.EMAIL) AS EMAIL
			 , F2.FRONT_REG_NO
			 , hr_util_pkg.date_comm_business_id(A.hr_employee_master_id, #{v_dept_date}) as COMM_BUSINESS_ID
		  from sl_pay_recipient A
	 LEFT JOIN SL_BON_PAYMENT_COUNT B ON A.SL_BON_PAYMENT_COUNT_ID = B.SL_BON_PAYMENT_COUNT_ID
 	 LEFT JOIN (
				SELECT Z.SL_PAY_RECIPIENT_ID
					 , SUM( NVL(Z.PAYMENT_AMT, 0) ) AS AMT
				  FROM SL_PAY_DETAIL Z
			 LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
				 WHERE Y.PAY_DED_CODE = 'sl002100'
				 GROUP BY Z.SL_PAY_RECIPIENT_ID
				) C ON C.SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
	 LEFT JOIN (
				SELECT Z.SL_PAY_RECIPIENT_ID
					 , SUM( NVL(Z.PAYMENT_AMT, 0) ) AS AMT
				  FROM SL_PAY_DETAIL Z
			 LEFT JOIN SL_BI_CODE Y ON Z.PAY_ITEM_CODE = Y.PAY_ITEM_CODE AND Y.COMM_CORPORATION_ID = #{v_corporation_id}
				 WHERE Y.PAY_DED_CODE = 'sl002200'
				 GROUP BY Z.SL_PAY_RECIPIENT_ID
				) D ON D.SL_PAY_RECIPIENT_ID = A.SL_PAY_RECIPIENT_ID
		 JOIN SL_PAY_END E ON B.SL_BON_PAYMENT_COUNT_ID = E.SL_BON_PAYMENT_COUNT_ID
	LEFT JOIN HR_EMPLOYEE_INFO F ON A.hr_employee_master_id = F.hr_employee_master_id
		 JOIN HR_EMPLOYEE_MASTER F2 ON A.hr_employee_master_id = F2.hr_employee_master_id
	LEFT JOIN (
				SELECT MIN(RECEIVE_EMAIL) KEEP(DENSE_RANK FIRST ORDER BY SL_PAY_MAIL_HIST_CNT DESC) AS EMAIL
					 , HR_EMPLOYEE_MASTER_ID
				  FROM SL_PAY_MAIL_HIST
				 GROUP BY HR_EMPLOYEE_MASTER_ID
				) F3 ON F2.hr_employee_master_id = F3.hr_employee_master_id
		WHERE 1 = 1
		AND A.payment_month = #{v_payment_month}
		<if test="v_dept_code != null and v_dept_code != '' and v_dept_code != '%'.toString()">
			AND hr_util_pkg.date_hr_dept_code(A.hr_employee_master_id,#{v_dept_date}) = #{v_dept_code}
		</if>
		<if test="v_hr_employee_master_id != null and v_hr_employee_master_id != '' and v_hr_employee_master_id != '%'.toString()">
			AND A.hr_employee_master_id = #{v_hr_employee_master_id}
		</if>
		<if test="v_payment_count != null and v_payment_count != '' and v_payment_count != '%'.toString()">
			AND B.PAYMENT_COUNT = #{v_payment_count}
		</if>
		ORDER BY A.payment_month, B.PAYMENT_COUNT, hr_util_pkg.emp_name(A.hr_employee_master_id,#{v_lang_code})
	</select>

	<!-- ******************************************* -->
	<!--            프로젝트별 급여지급현황              -->
	<!-- ******************************************* -->
	<select id="P_SL_REPORT_PROJECT" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{CALL
		    SL_PRINT_PKG.pay_project_item(#{v_payment_count}
											,#{v_corporation_id}
											,#{v_business_id}
		        							,#{v_project_name}
											,#{v_lang_code}
											,#{result,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=resultMap}
											,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg})
			}
	</select>
	
	<!-- ******************************************* -->
	<!--            개인별 상세내역 2021.11.01 이동훈            -->
	<!-- ******************************************* -->
	<select id="P_SL_REPORT_EMPLOYEE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{CALL
		    SL_PRINT_PKG.pay_employee_item(#{v_payment_count}
		                                    ,#{v_month}
											,#{v_corporation_id}
											,#{v_business_id}
		        							,#{v_project_name}
											,#{v_lang_code}
											,#{result,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=resultMap}
											,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg})
			}
	</select>
	
	<!-- ******************************************* -->
	<!--            원천징수 4대보험            -->
	<!-- ******************************************* -->
	<select id="S_SL_PENSION_RPOJECT" parameterType="hashmap" resultType="hashmap">
		SELECT  fi_util_pkg.project_name(project_id) as project_name
		       ,account_code
		      ,account_name
		      ,round(db_amt, 0) AS db_amt
		      ,cr_amt
		      ,cust_code
		      ,cust_name
		  FROM TABLE(sl_invoice.get_insurances_report(#{v_payment_count}, #{v_fi_bi_div_id},#{v_fi_bi_account_id}, #{v_month}, #{v_corporation_id}, #{v_business_id},  #{v_lang_code}))
		 ORDER BY account_code DESC
	</select>

	<!--4대보험 기간인식 조회 마스터 그리드 -->
	<select id="S_SL_INSURANCE_INVOICE_PERIOD" parameterType="hashmap" resultType="hashmap">
		WITH t1 AS
		 (SELECT y.sl_bon_payment_count_id
		         ,y.payment_month
		    FROM sl_bon_payment_count y
		    LEFT OUTER JOIN sl_pay_end x ON y.sl_bon_payment_count_id = x.sl_bon_payment_count_id
		   WHERE y.comm_corporation_id = #{v_corporation_id}
		   ORDER BY y.payment_month DESC
		           ,y.payment_count ASC)
		SELECT a.year_month as year_month
		       ,b.sl_insurance_invoice_period_id
		       ,b.invoice_yn
		       ,b.fi_invoice_header_id
		       ,(SELECT invoice_no FROM fi_invoice_header WHERE fi_invoice_header_id = b.fi_invoice_header_id) AS invoice_no
		       ,e.sl_bon_payment_count_id
		 FROM (SELECT * FROM year_month WHERE substr(year_month, 1, 4) = #{YEAR_DIV}) a
		   LEFT JOIN (SELECT *
		                FROM sl_insurance_invoice_period
		               WHERE comm_corporation_id = #{v_corporation_id}
		                 AND fi_bi_division_id = #{fi_bi_division_id}
		       			 AND FI_BI_ACCOUNT_ID = #{v_fi_bi_account_id}) b ON b.period = a.period
		   LEFT JOIN fi_invoice_header invh ON invh.fi_invoice_header_id = b.fi_invoice_header_id
		   LEFT JOIN t1 e on a.period = e.payment_month
		  ORDER BY a.period
	</select>

	<!--4대보험 기간인식 조회 마스터 그리드 -->
	<select id="S_SL_PAY_INVOICE_PERIOD" parameterType="hashmap" resultType="hashmap">
		WITH sl_payment AS
		 (SELECT a.sl_bon_payment_count_id
		        ,comm_util_pkg.dateformat(a.payment_month, 'MONTH') || ' ' || nvl(comm_util_pkg.wrk_code_name(#{v_corporation_id}, 'sl001', a.pay_division_code, #{v_lang_code}), '') || ' (' ||
		         nvl(comm_util_pkg.wrk_code_name(#{v_corporation_id}, 'hr010', a.pay_type_code, #{v_lang_code}), '') || ') ' || a.payment_count || CASE x.end_yn
		           WHEN '1' THEN
		            '마감'
		           ELSE
		            ''
		         END AS sl_bon_payment_count_name
		        ,x.end_yn AS end_yn
		        ,a.payment_month
		        ,payment_date
		    FROM sl_bon_payment_count a
		    LEFT OUTER JOIN sl_pay_end x ON a.sl_bon_payment_count_id = x.sl_bon_payment_count_id
		   WHERE a.comm_corporation_id = #{v_corporation_id}
		   ORDER BY a.payment_month DESC
		           ,a.payment_count ASC)
		SELECT a.year_month as year_month
			   ,b.sl_pay_invoice_period_id
		       ,b.invoice_yn
		       ,b.fi_invoice_header_id
			   ,(SELECT invoice_no FROM fi_invoice_header WHERE fi_invoice_header_id = b.fi_invoice_header_id) AS invoice_no
			   ,c.sl_bon_payment_count_name
      		   ,c.end_yn
      		   ,c.sl_bon_payment_count_id
			   ,c.payment_date
		 FROM (SELECT * FROM year_month WHERE substr(year_month, 1, 4) = #{YEAR_DIV}) a
		   LEFT JOIN (SELECT *
		                FROM sl_pay_invoice_period
		               WHERE comm_corporation_id = #{v_corporation_id}
		                 AND fi_bi_division_id = #{fi_bi_division_id}) b ON b.period = a.period
		   LEFT JOIN fi_invoice_header invh ON invh.fi_invoice_header_id = b.fi_invoice_header_id
		   LEFT JOIN sl_payment c ON a.period = c.payment_month
		  ORDER BY a.period
	</select>

	<!-- 4대보험 회사부담금 계산 및 전표생성 -->
	<update id="P_SL_INSURANCE_INVOICE" parameterType="hashmap">
		{
		CALL
		DECLARE

			v_header_inter_key			number;
			v_line_inter_key			number;
			v_header_key				number;
			v_seq						number;

			v_fi_bi_invoice_type_code	varchar2(8);
			v_fi_bi_journalize_code		varchar2(10);

			v_dr_amt					number;
			v_cr_amt					number;
			v_line_type_code			varchar2(10);
			v_fi_bi_account_id			number;

			v_account_id 				number;
			v_drcr_code 			    varchar2(10);

			v_exist_invoice_yn			number;       -- 전표여부

			o_error_msg					varchar2(500);

		BEGIN
			v_header_inter_key := FI_INVOICE_HEADER_INTERFACE_S.NEXTVAL;
			v_seq := 0;
			v_fi_bi_journalize_code := 'TR230';
			v_header_key       := fi_invoice_header_s.nextval;

			SELECT count(fi_invoice_header_id) into v_exist_invoice_yn
			  FROM sl_insurance_invoice_period
			 WHERE sl_insurance_invoice_period_id = #{v_sl_insurance_invoice_period_id};

			IF (v_exist_invoice_yn > 0) THEN
				raise_application_error(-20000, 'ORA-20066'); <!--전표가 이미 생성되었습니다.-->
			END IF;

			<!-- FI_INVOICE_HEADER_INTERFACE -->
		    INSERT INTO fi_invoice_header_interface(FI_INVOICE_HEADER_INTERFACE_ID
		    										 ,FI_INVOICE_HEADER_ID
		    										 ,COMM_CORPORATION_ID
		    										 ,FI_BI_DIVISION_ID
		    										 ,INVOICE_DATE
		    										 ,MAKE_DATE
		    										 ,PERIOD
		    										 ,TREASURER_EMP_ID
		    										 ,INVOICE_STATE_CODE
		    										 ,FI_BI_INVOICE_SOURCE_ID
		    										 ,FI_BI_INVOICE_TYPE_ID
		    										 ,CRTBY
		    										 ,CRTDT
		    										 ,CRTIP
		    										 ,AMNBY
		    										 ,AMNDT
		    										 ,AMNIP
		    										 )
		    VALUES (v_header_inter_key
		    		,v_header_key
		    		,#{v_corporation_id}
		    		,#{v_fi_bi_div_id}
					,to_char(to_date(#{v_month} , 'YYYYMM') + 24, 'YYYYMMDD')
				    ,to_char(to_date(#{v_month} , 'YYYYMM') + 24, 'YYYYMMDD')
		    		,#{v_month}
		    		,(select employee_id from comm_user where comm_user_id = #{CRTBY})
		    		,'fi003100'
		    		,(SELECT FI_BI_INVOICE_SOURCE_ID FROM FI_BI_JOURNALIZE WHERE FI_BI_JOURNALIZE_CODE = v_fi_bi_journalize_code AND fi_bi_division_id = #{v_fi_bi_div_id})
		    		,(SELECT FI_BI_INVOICE_TYPE_ID FROM FI_BI_JOURNALIZE WHERE FI_BI_JOURNALIZE_CODE = v_fi_bi_journalize_code AND fi_bi_division_id = #{v_fi_bi_div_id})
		    		,#{CRTBY}
		    		,SYSDATE
		    		,#{CRTIP}
		    		,#{AMNBY}
		    		,SYSDATE
		    		,#{AMNIP}
		    		);

		<!-- 			FI_INVOICE_LINE_INTERFACE 	 -->
				FOR y IN (
							SELECT account_code
								   ,account_name
								   ,project_id
								   ,round(db_amt, 0) AS db_amt
								   ,cr_amt
								   ,cust_code
								   ,cust_name
							FROM TABLE(sl_invoice.get_insurances_report(#{v_payment_count}, #{v_fi_bi_div_id},#{v_fi_bi_account_id}, #{v_month}, #{v_corporation_id}, #{v_business_id},  #{v_lang_code}))
							ORDER BY account_code DESC
				)
				LOOP
					v_dr_amt := null;
					v_cr_amt := null;
					v_fi_bi_account_id := 0;

				SELECT q.account_id
				       ,q.drcr_code
				  INTO v_account_id
					   ,v_drcr_code
				  FROM fi_bi_journalize_detail q
				 WHERE q.fi_bi_journalize_id = (SELECT fi_bi_journalize_id
				                                  FROM fi_bi_journalize
				                                 WHERE fi_bi_journalize_code = v_fi_bi_journalize_code
				                                   AND fi_bi_division_id = #{v_fi_bi_div_id}
				                                   AND account_id = fi_util_pkg.account_id(y.account_code, #{v_corporation_id}));

						IF v_drcr_code = 'fi000100'
							THEN
								v_dr_amt := y.db_amt;
							ELSE
								v_cr_amt := y.cr_amt;
								    end if;

					IF v_account_id != 0 THEN
						v_seq := v_seq + 1;

						INSERT INTO FI_INVOICE_LINE_INTERFACE (
							FI_INVOICE_LINE_INTERFACE_ID
							,FI_INVOICE_HEADER_INTERFACE_ID
							,LINE_TYPE_CODE
							,SEQ
							,FI_BI_ACCOUNT_ID
							,CURRENCY_CODE
							,PAY_DIVISION_CODE
							,EVIDENCE_TYPE_CODE
							,TERM_DATE
							,DR_AMT
							,CR_AMT
							,FI_PROJECT_ID
							,CUST_ID
							,CUST_CAL_ID
							,EXCHANGE_TYPE_CODE
							,EXCHANGE_RATE
							,BASE_DR_AMT
							,BASE_CR_AMT
							,FI_BI_COST_CENTER_ID
							,DESCRIPTION
							,CRTBY
							,CRTDT
							,CRTIP
							,AMNBY
							,AMNDT
							,AMNIP
						)
						VALUES(
							FI_INVOICE_LINE_INTERFACE_S.NEXTVAL
							,v_header_inter_key
							,fi_util_pkg.line_type_code(v_account_id, v_dr_amt, v_cr_amt)
							,v_seq
							,v_account_id
							,'KRW'
							,'ea007200'
							,'fi042910'
							,to_char(to_date(#{v_month} , 'YYYYMM') + 24, 'YYYYMMDD')
							,v_dr_amt
							,v_cr_amt
							,y.project_id
							,(select a.comm_cv_id from comm_cv a where a.comm_corporation_id = #{v_corporation_id} and a.cv_no = y.cust_code)
							,(select a.comm_cv_id from comm_cv a where a.comm_corporation_id = #{v_corporation_id} and a.cv_no = y.cust_code)
							,'fi005100'
							,1
							,(v_dr_amt * 1)
							,(v_cr_amt * 1)
							,(select FI_BI_COST_CENTER_ID from fi_project where fi_project_id = y.project_id)
							,substr(#{v_month}, 5) || '월 - ' || y.account_name
							,#{CRTBY}
				        	,SYSDATE
				        	,#{CRTIP}
				         	,#{AMNBY}
				         	,SYSDATE
				            ,#{AMNIP}
						);
					END IF;
				END LOOP;

				fi_invoice_interface_pkg.int_to_invoice_create(v_header_inter_key,o_error_msg);
  				IF o_error_msg IS NOT NULL THEN
  				    ROLLBACK;
  				    raise_application_error(-20000, o_error_msg);
  				END IF;

				MERGE INTO sl_insurance_invoice_period sl
							USING DUAL
							ON (sl.period = #{v_month} AND sl.fi_bi_account_id = #{v_fi_bi_account_id})
							WHEN MATCHED THEN
								UPDATE
								SET sl.invoice_yn    		   = '1'
								   ,sl.fi_invoice_header_id     = v_header_key
								   ,sl.AMNBY					   = #{AMNBY}
								   ,sl.AMNDT					   = SYSDATE
							       ,sl.AMNIP					   = #{AMNIP}
								WHERE sl.sl_insurance_invoice_period_id = #{v_sl_insurance_invoice_period_id}
							WHEN NOT MATCHED THEN
								INSERT (sl_insurance_invoice_period_id
										,COMM_CORPORATION_ID
										,FI_BI_DIVISION_ID
										,PERIOD
										,FI_BI_ACCOUNT_ID
										,INVOICE_YN
										,FI_INVOICE_HEADER_ID
										,CRTBY
										,CRTDT
										,CRTIP
										,AMNBY
										,AMNDT
										,AMNIP
										)
								VALUES (sl_insurance_invoice_period_s.nextval
										,#{v_corporation_id}
										,#{v_fi_bi_div_id}
										,#{v_month}
										,#{v_fi_bi_account_id}
										,'1'
										,v_header_key
										,#{CRTBY}
										,SYSDATE
										,#{CRTIP}
										,#{AMNBY}
										,SYSDATE
										,#{AMNIP}
										);

		END
		}
		</update>

		<!-- ******************************************* -->
		<!-- 급여발송차수 조회 -->
		<!-- ******************************************* -->
		<select id="S_SL_PAY_MAIL_HIST_CNT" parameterType="hashmap" resultType="hashmap">
			SELECT SL_PAY_MAIL_HIST_CNT_S.NEXTVAL AS SL_PAY_MAIL_HIST_CNT
			  FROM DUAL
		</select>
		<!-- ******************************************* -->
		<!-- 급여발송이력 저장 -->
		<!-- ******************************************* -->
		<insert id="I_SL_PAY_MAIL_HIST" parameterType="hashmap">
			INSERT INTO SL_PAY_MAIL_HIST( SL_PAY_MAIL_HIST_ID
										, COMM_CORPORATION_ID
										, SL_BON_PAYMENT_COUNT_ID
										, SL_PAY_MAIL_HIST_CNT
										, HR_EMPLOYEE_MASTER_ID
										, RECEIVE_EMAIL
										, MAIL_TITLE
										, MAIL_CONTENT
										, SEND_DATE
										, MAIL_ERROR_MSG
										, CRTBY
										, CRTDT
										, CRTIP
										, AMNBY
										, AMNDT
										, AMNIP
										)
									VALUES( SL_PAY_MAIL_HIST_S.NEXTVAL
										  , #{COMM_CORPORATION_ID}
										  , #{SL_BON_PAYMENT_COUNT_ID}
										  , #{SL_PAY_MAIL_HIST_CNT}
										  , #{HR_EMPLOYEE_MASTER_ID}
										  , #{RECEIVE_EMAIL}
										  , #{MAIL_TITLE}
										  , #{MAIL_CONTENT}
										  , SYSDATE
										  , #{MAIL_ERROR_MSG}
										  , #{CRTBY}
										  , SYSDATE
										  , #{CRTIP}
										  , #{AMNBY}
										  , SYSDATE
										  , #{AMNIP}
										  )
		</insert>

		<!-- 급/상여 마감 저장 / 수정 -->
		<update id="P_UPDATE_SL_PAY_END" parameterType="hashmap">

			DECLARE

			V_INVOICE_YN NUMBER;

			BEGIN

			SELECT NVL(MAX(INVOICE_YN),'0') INTO V_INVOICE_YN
			  FROM sl_pay_invoice_period
			 WHERE PERIOD = #{PAYMENT_MONTH};

			IF (V_INVOICE_YN = '1' AND #{END_YN} = '0') THEN
				raise_application_error(-20000, 'DB-00060'); <!-- 급여전표가 존재하므로 마감취소할 수 없습니다.-->
			END IF;

			MERGE INTO SL_PAY_END
				USING DUAL
				ON (SL_PAY_END_ID = #{SL_PAY_END_ID})
				WHEN MATCHED THEN
					UPDATE
						SET END_YN                    = #{END_YN}
						   ,END_HR_EMPLOYEE_MASTER_ID = #{END_HR_EMPLOYEE_MASTER_ID}
						   ,END_DATE                  = #{END_DATE}
						   ,AMNBY                     = #{AMNBY}
						   ,AMNDT                     = SYSDATE
						   ,AMNIP                     = #{AMNIP}
				WHEN NOT MATCHED THEN
					INSERT
						  (SL_PAY_END_ID
						  ,COMM_CORPORATION_ID
						  ,SL_BON_PAYMENT_COUNT_ID
						  ,END_YN
						  ,END_HR_EMPLOYEE_MASTER_ID
						  ,END_DATE
						  ,NOTE
						  ,CRTBY
						  ,CRTDT
						  ,CRTIP
						  ,AMNBY
						  ,AMNDT
						  ,AMNIP)
					VALUES
						  (SL_PAY_END_S.NEXTVAL
						  ,#{COMM_CORPORATION_ID}
						  ,#{SL_BON_PAYMENT_COUNT_ID}
						  ,#{END_YN}
						  ,#{END_HR_EMPLOYEE_MASTER_ID}
						  ,#{END_DATE}
						  ,#{NOTE}
						  ,#{CRTBY}
						  ,SYSDATE
						  ,#{CRTIP}
						  ,#{AMNBY}
						  ,SYSDATE
						  ,#{AMNIP});

			-- 급상여마감 로그 테이블 추가
			INSERT INTO SL_PAY_END_LOG
				       (SL_PAY_END_LOG_ID
				       ,SL_PAY_END_ID
				       ,COMM_CORPORATION_ID
				       ,SL_BON_PAYMENT_COUNT_ID
				       ,END_YN
				       ,END_HR_EMPLOYEE_MASTER_ID
				       ,END_DATE)
				 VALUES
					   (SL_PAY_END_LOG_S.NEXTVAL
					   ,CASE WHEN TO_NUMBER(#{SL_PAY_END_ID}) IS NULL THEN SL_PAY_END_S.NEXTVAL
					         ELSE TO_NUMBER(#{SL_PAY_END_ID})
					          END
					   ,#{COMM_CORPORATION_ID}
					   ,#{SL_BON_PAYMENT_COUNT_ID}
					   ,#{END_YN}
					   ,#{END_HR_EMPLOYEE_MASTER_ID}
					   ,SYSDATE);

			END;
		</update>

	<select id="S_SL_PAY_TERMLIST_SET_GRID" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT PAY_ITEM_CODE
			 , PAY_ITEM_NAME
			 , CASE WHEN PAY_DED_CODE = 'sl002100' THEN '지급'
					ELSE '공제' END AS COLUMN_GROUP
		FROM SL_BI_CODE
		WHERE COMM_CORPORATION_ID = nvl(#{v_corporation_id}, COMM_CORPORATION_ID)
		  AND USE_YN = '1'
		  AND CLASSIFICATION_CODE = 'sl0081'
		  AND PAY_DED_CODE IN ('sl002100','sl002200')
		  AND PAY_ITEM_CODE IN (SELECT DISTINCT PAY_ITEM_CODE FROM SL_PAY_DETAIL WHERE PAYMENT_MONTH >= #{v_fr_month} AND PAYMENT_MONTH <![CDATA[ <= ]]> #{v_to_month} AND PAYMENT_AMT <![CDATA[ <> ]]> 0)
		ORDER BY PRINT_SEQ, PAY_DED_CODE
	</select>

	<!-- ******************************************* -->
	<!-- 기간별급여현황(월별상세 / 기간합계) -->
	<!-- ******************************************* -->
	<select id="S_SL_PAY_TERMLIST" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		{ CALL
			SL_PAY_TERMLIST_PKG.db_select(#{v_corporation_id}
				,#{v_type}
				,#{v_fr_month}
				,#{v_to_month}
				,#{v_pay_div_code}
				,#{v_hr_emp_id}
				,#{v_dept_code}
				,#{v_pay_type_code}
				,#{v_lang_code}
				,#{result,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=resultMap}
				,#{o_error_msg,mode=OUT,jdbcType=VARCHAR,resultMap=o_error_msg})
			}
	</select>
	
	<!-- 	연봉관리 조회 -->
	<select id="S_SL_SALARY_MANAGE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT 
		A.SL_SALARY_MANAGE_ID, 
		A.HR_EMPLOYEE_MASTER_ID,
		HR_UTIL_PKG.DATE_HR_DEPT_NAME(A.HR_EMPLOYEE_MASTER_ID, SYSDATE, #{v_lang_code}) AS DEPT_NAME,
		HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'DUTY_CODE', SYSDATE, #{v_lang_code})	  		AS DUTY_CODE,
		HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'JOB_GROUP_CODE', SYSDATE, #{v_lang_code})	  		AS JOB_GROUP,
		HR_UTIL_PKG.date_appointment(A.HR_EMPLOYEE_MASTER_ID, 'RANK_CODE', SYSDATE, #{v_lang_code})	  		AS RANK_CODE,
		B.EMP_NO,
		B.EMP_NAME,
		A.WORK_TIME, 
		A.WEEK_OVER_TIME, 
		A.TOT_TIME, 
		A.COM_HOURLY_AMT, 
		A.MIN_HOURLY_AMT, 
		A.YEAR_SALARY, 
		A.MONTH_SALARY, 
		A.ADJUST_SALARY, 
		A.BASIC_SALARY, 
		A.OVERTIME_SALARY, 
		A.MEAL_AMT, 
		A.BABY_AMT, 
		A.SIGNING_BONUS, 
		A.SIGNING_TIME, 
		A.SALARY_DATE_FROM, 
		A.SALARY_DATE_TO, 
		A.NEGO_SALARY, 
		A.YOUNGMAN_DED, 
		A.SMALLCOMP_DED, 
		A.STOCK_OP, 
		A.REMARK,
		A.APPLY_DATE,
		A.OVER_TIME,
		A.SALARY_YEAR,
		A.CHK_MEAL_AMT,
		A.CHK_BABY_AMT,
		A.SL_BON_PAY_BASIS_MU_ID
		FROM SL_SALARY_MANAGE A
		LEFT JOIN HR_EMPLOYEE_MASTER B ON A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID
		LEFT JOIN VU_HR_EMPLOYEE_APPOINTMENT C ON  A.HR_EMPLOYEE_MASTER_ID = C.HR_EMPLOYEE_MASTER_ID
		WHERE 1=1
		<if test="v_year != null and v_year != '' and v_year != '%'.toString()">
            and A.SALARY_YEAR = #{v_year}
        </if>
        <if test="v_dept_cd != null and v_dept_cd != '' and v_dept_cd != '%'.toString()">
            and c.HR_DEPARTMENT_CODE = #{v_dept_cd}
        </if>
        <if test="v_emp_no != null and v_emp_no != '' and v_emp_no != '%'.toString()">
            and A.HR_EMPLOYEE_MASTER_ID = #{v_emp_no}
        </if>
        ORDER BY B.EMP_NO ASC
<!--         <if test="v_emp_nm != null and v_emp_nm != '' and v_emp_nm != '%'.toString()"> -->
<!--             and hr_util_pkg.emp_name(B.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) like '%' || #{v_emp_nm} || '%' -->
<!--         </if> -->
	</select>
    <!-- ******************************************* -->
    <!-- 연봉관리  -->
    <!-- ******************************************* -->
    <insert id="I_SL_SALARY_MANAGE" parameterType="hashmap">
        /* SL_SALARY_MANAGE */
       {CALL
		declare
			v_meal number;
			v_baby number;		
		begin
		IF #{CHK_MEAL_AMT} = '1'
	    	THEN
			v_meal := 100000;
			ELSE 
			v_meal := 0;
		END IF;
		IF #{CHK_BABY_AMT} = '1'
	    	THEN
			v_baby := 100000;
			ELSE 
			v_baby := 0;
		END IF;
		INSERT INTO SL_SALARY_MANAGE
		(
			SL_SALARY_MANAGE_ID, 
			HR_EMPLOYEE_MASTER_ID, 
			WORK_TIME, 
			WEEK_OVER_TIME, 
			OVER_TIME,
			TOT_TIME, 
			COM_HOURLY_AMT, 
			MIN_HOURLY_AMT, 
			YEAR_SALARY, 
			MONTH_SALARY, 
			ADJUST_SALARY, 
			BASIC_SALARY, 
			OVERTIME_SALARY, 
			MEAL_AMT, 
			BABY_AMT, 
			SIGNING_BONUS, 
			SIGNING_TIME, 
			SALARY_DATE_FROM, 
			SALARY_DATE_TO, 
			NEGO_SALARY, 
			YOUNGMAN_DED, 
			SMALLCOMP_DED, 
			STOCK_OP, 
			REMARK, 
			CRTBY, 
			CRTDT, 
			CRTIP, 
			AMNBY, 
			AMNDT, 
			AMNIP, 
			APPLY_DATE,
			SALARY_YEAR,
			CHK_MEAL_AMT,
			CHK_BABY_AMT
		)
        VALUES ( SL_SALARY_MANAGE_S.nextval,
				#{HR_EMPLOYEE_MASTER_ID}, 
				#{WORK_TIME}, 
				#{WEEK_OVER_TIME}, 
				trunc(#{WEEK_OVER_TIME}*4.345*1.5),
				#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5),
				trunc((#{YEAR_SALARY}/12)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5))), 
				trunc(((((trunc((#{YEAR_SALARY}/12)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5)))*NVL(#{WORK_TIME},0))-NVL(v_meal,0)-NVL(v_baby,0))+153)+
				(NVL(v_meal,0)+NVL(v_baby,0)-38289))/209), 
				#{YEAR_SALARY}, 
				CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000, 
				(CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000) - (CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000), 
				(CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000) - (((CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5)))*trunc(#{WEEK_OVER_TIME}*4.345*1.5))+v_meal+v_baby), 
				(CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000)(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5)))*trunc(#{WEEK_OVER_TIME}*4.345*1.5), 
				v_meal, 
				v_baby, 
				#{SIGNING_BONUS}, 
				#{SIGNING_TIME}, 
				#{SALARY_DATE_FROM}, 
				#{SALARY_DATE_TO}, 
				#{NEGO_SALARY}, 
				#{YOUNGMAN_DED}, 
				#{SMALLCOMP_DED}, 
				#{STOCK_OP}, 
				#{REMARK}, 
                #{CRTBY},
                SYSDATE,
                #{CRTIP},
                #{AMNBY},
                SYSDATE,
                #{AMNIP},
                #{APPLY_DATE},
                #{SALARY_YEAR},
                #{CHK_MEAL_AMT},
				#{CHK_BABY_AMT}
               );
	end}
    </insert>
 
	<update id="U_SL_SALARY_MANAGE" parameterType="hashmap">
	{CALL
		declare
			v_meal number;
			v_baby number;		
		begin
		IF #{CHK_MEAL_AMT} = '1'
	    	THEN
			v_meal := 100000;
			ELSE 
			v_meal := 0;
		END IF;
		IF #{CHK_BABY_AMT} = '1'
	    	THEN
			v_baby := 100000;
			ELSE 
			v_baby := 0;
		END IF;
		UPDATE SL_SALARY_MANAGE SET  
		WORK_TIME=#{WORK_TIME}, 
		WEEK_OVER_TIME=#{WEEK_OVER_TIME}, 
		TOT_TIME=#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5),
		COM_HOURLY_AMT=trunc((CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5))), 
		MIN_HOURLY_AMT=trunc(((((trunc((CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5)))*NVL(#{WORK_TIME},0))-NVL(v_meal,0)-NVL(v_baby,0))+153)+(NVL(v_meal,0)+NVL(v_baby,0)-38289))/209),
		YEAR_SALARY=#{YEAR_SALARY}, 
		MONTH_SALARY=(CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000),
		ADJUST_SALARY=(CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000) - (CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000), 
		BASIC_SALARY=(CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000) - ((trunc((CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5)))*trunc(#{WEEK_OVER_TIME}*4.345*1.5))+v_meal+v_baby),
		OVERTIME_SALARY=trunc((CEIL( (#{YEAR_SALARY}/12) / 1000 ) * 1000)/(#{WORK_TIME}+trunc(#{WEEK_OVER_TIME}*4.345*1.5)))*trunc(#{WEEK_OVER_TIME}*4.345*1.5), 
		MEAL_AMT = v_meal, 
		BABY_AMT = v_baby, 
		SIGNING_BONUS = #{SIGNING_BONUS}, 
		SIGNING_TIME = #{SIGNING_TIME}, 
		SALARY_DATE_FROM = #{SALARY_DATE_FROM}, 
		SALARY_DATE_TO = #{SALARY_DATE_TO}, 
		NEGO_SALARY = #{NEGO_SALARY}, 
		YOUNGMAN_DED = #{YOUNGMAN_DED}, 
		SMALLCOMP_DED = #{SMALLCOMP_DED}, 
		STOCK_OP = #{STOCK_OP}, 
		REMARK = #{REMARK}, 
		AMNBY = #{AMNBY}, 
		AMNDT = SYSDATE, 
		AMNIP = #{AMNIP}, 
		APPLY_DATE = #{APPLY_DATE}, 
		OVER_TIME = trunc(#{WEEK_OVER_TIME}*4.345*1.5),
		SALARY_YEAR = #{SALARY_YEAR},
		CHK_MEAL_AMT = #{CHK_MEAL_AMT},
		CHK_BABY_AMT = #{CHK_BABY_AMT}
		WHERE SL_SALARY_MANAGE_ID = #{SL_SALARY_MANAGE_ID};
	end}
	</update>
	
	<delete id="D_SL_SALARY_MANAGE" parameterType="hashmap">
	{ CALL
		DECLARE
		BEGIN
		DELETE FROM SL_SALARY_MANAGE WHERE SL_SALARY_MANAGE_ID = #{SL_SALARY_MANAGE_ID};
		DELETE FROM SL_BON_PAY_BASIS_MU WHERE SL_BON_PAY_BASIS_MU_ID = #{SL_BON_PAY_BASIS_MU_ID};
	END}
	</delete>
	<insert id="P_INSERT_EMP_SALARY" parameterType="hashmap" statementType="CALLABLE" >
	{ CALL
		DECLARE
		v_cnt number := 1;
		v_count number := 0;
		v_val number := 0;
		v_id NUMBER := 0;
		BEGIN
			SELECT count(COLUMN_VALUE) 
			INTO v_count
			FROM TABLE(COMM_UTIL_PKG.SPLIT(#{TARGET_LIST}, ','));
			<![CDATA[
			WHILE(v_cnt <=  v_count)
			]]>
			LOOP
			v_id := SL_BON_PAY_BASIS_MU_S.NEXTVAL;
		
			INSERT INTO SL_BON_PAY_BASIS_MU 
			(
				SL_BON_PAY_BASIS_MU_ID,
				COMM_CORPORATION_ID,
				HR_EMPLOYEE_MASTER_ID,
				APPLY_DATE,
				WITHHOLDING_TAX,
				SALARY_YEAR_AMT,
				SALARY_MOMTH_AMT,
				PAY_AMT1,
				PAY_AMT2,
				PAY_AMT3,
				CRTBY,
				CRTIP,
				CRTDT,
				AMNBY,
				AMNIP,
				AMNDT
			)
			SELECT
				v_id,
				#{COMM_CORPORATION_ID},
				HR_EMPLOYEE_MASTER_ID,
				APPLY_DATE,
				100,
				YEAR_SALARY,
				BASIC_SALARY,
				OVERTIME_SALARY,
				MEAL_AMT,
				BABY_AMT,
	            #{CRTBY},
	            #{CRTIP},
	            SYSDATE,
	            #{AMNBY},
	            #{AMNIP},
	            SYSDATE
			FROM SL_SALARY_MANAGE
			WHERE SL_SALARY_MANAGE_ID in (
				SELECT COLUMN_VALUE
				FROM 
				(
					SELECT  ROWNUM AS RN,COLUMN_VALUE 
					FROM TABLE(COMM_UTIL_PKG.SPLIT(#{TARGET_LIST}, ','))
				) A
				WHERE A.RN = v_cnt
			);
			UPDATE SL_SALARY_MANAGE SET
			SL_BON_PAY_BASIS_MU_ID = v_id
			WHERE SL_SALARY_MANAGE_ID in (
				SELECT COLUMN_VALUE
				FROM 
				(
					SELECT  ROWNUM AS RN,COLUMN_VALUE 
					FROM TABLE(COMM_UTIL_PKG.SPLIT(#{TARGET_LIST}, ','))
				) A
				WHERE A.RN = v_cnt
			);
			v_cnt := v_cnt+1;
			END LOOP;
	END
	}
	</insert>
	
	<update id="P_INSERT_EMP_CHK" parameterType="hashmap" statementType="CALLABLE" >
		   DECLARE
            v_cnt number := 0;
          BEGIN
          
	        SELECT COUNT(A.HR_EMPLOYEE_MASTER_ID)
	        INTO v_cnt
			FROM SL_BON_PAY_BASIS_MU A
			LEFT JOIN SL_SALARY_MANAGE B ON A.HR_EMPLOYEE_MASTER_ID = B.HR_EMPLOYEE_MASTER_ID AND A.APPLY_DATE = B.APPLY_DATE
			WHERE B.SL_SALARY_MANAGE_ID IN 
						( SELECT COLUMN_VALUE FROM TABLE(COMM_UTIL_PKG.SPLIT(#{TARGET_LIST}, ',')) WHERE COLUMN_VALUE = B.SL_SALARY_MANAGE_ID);
			
                IF v_cnt > 0
                THEN
                    raise_application_error(-20000, '이미 저장된값입니다.');
                END IF;
            END;
	</update>
	
	<insert id="I_SL_BON_PAY_BASIS_MU" parameterType="hashmap" statementType="CALLABLE" >
		INSERT INTO SL_BON_PAY_BASIS_MU
		(
			SL_BON_PAY_BASIS_MU_ID, 
			COMM_CORPORATION_ID, 
			HR_EMPLOYEE_MASTER_ID,
			APPLY_DATE, 
			WITHHOLDING_TAX, 
			SEVERANCE_PAY_CODE, 
			ABROAD_YN, 
			TAX_FREE_AMT, 
			RESIDENCE_CODE, 
			FOREIGN_CORP_YN, 
			FOREIGNER_TAX_YN, 
			FOREIGNER_TAX_RATE, 
			SALARY_YEAR_AMT, 
			SALARY_MOMTH_AMT, 
			SALARY_DAILY_AMT, 
			SALARY_HOURLY_AMT, 
			PAY_AMT1, 
			PAY_AMT2, 
			PAY_AMT3, 
			CRTBY, 
			CRTIP, 
			CRTDT, 
			AMNBY, 
			AMNIP, 
			AMNDT
		)
		VALUES
		(
			SL_BON_PAY_BASIS_MU_S.NEXTVAL, 
			#{COMM_CORPORATION_ID}, 
			#{HR_EMPLOYEE_MASTER_ID},
			#{APPLY_DATE}, 
			#{WITHHOLDING_TAX}, 
			#{SEVERANCE_PAY_CODE}, 
			#{ABROAD_YN}, 
			#{TAX_FREE_AMT}, 
			#{RESIDENCE_CODE}, 
			#{FOREIGN_CORP_YN}, 
			#{FOREIGNER_TAX_YN}, 
			#{FOREIGNER_TAX_RATE}, 
			#{SALARY_YEAR_AMT}, 
			#{SALARY_MOMTH_AMT}, 
			#{SALARY_DAILY_AMT}, 
			#{SALARY_HOURLY_AMT}, 
			#{PAY_AMT1}, 
			#{PAY_AMT2}, 
			#{PAY_AMT3}, 
			#{CRTBY}, 
			#{CRTIP}, 
			SYSDATE, 
			#{AMNBY}, 
			#{AMNIP}, 
			SYSDATE
		)
	</insert>
	<update id="U_SL_BON_PAY_BASIS_MU" parameterType="hashmap" statementType="CALLABLE" >
	UPDATE SL_BON_PAY_BASIS_MU SET 
		COMM_CORPORATION_ID=#{COMM_CORPORATION_ID}, 
		HR_EMPLOYEE_MASTER_ID=#{HR_EMPLOYEE_MASTER_ID}, 
		APPLY_DATE=#{APPLY_DATE}, 
		WITHHOLDING_TAX=#{WITHHOLDING_TAX}, 
		SEVERANCE_PAY_CODE=#{SEVERANCE_PAY_CODE}, 
		ABROAD_YN=#{ABROAD_YN}, 
		TAX_FREE_AMT=#{TAX_FREE_AMT}, 
		RESIDENCE_CODE=#{RESIDENCE_CODE}, 
		FOREIGN_CORP_YN=#{FOREIGN_CORP_YN}, 
		FOREIGNER_TAX_YN=#{FOREIGNER_TAX_YN}, 
		FOREIGNER_TAX_RATE=#{FOREIGNER_TAX_RATE}, 
		SALARY_YEAR_AMT=#{SALARY_YEAR_AMT}, 
		SALARY_MOMTH_AMT=#{SALARY_MOMTH_AMT}, 
		SALARY_DAILY_AMT=#{SALARY_DAILY_AMT}, 
		SALARY_HOURLY_AMT=#{SALARY_HOURLY_AMT}, 
		PAY_AMT1=#{PAY_AMT1}, 
		PAY_AMT2=#{PAY_AMT2}, 
		PAY_AMT3=#{PAY_AMT3},
		AMNBY=#{AMNBY}, 
		AMNIP=#{AMNIP}, 
		AMNDT=SYSDATE
	WHERE SL_BON_PAY_BASIS_MU_ID=#{SL_BON_PAY_BASIS_MU_ID}
	</update>
	<delete id="D_SL_BON_PAY_BASIS_MU" parameterType="hashmap">
		{CALL
			DECLARE
			BEGIN
				DELETE FROM SL_BON_PAY_BASIS_MU WHERE SL_BON_PAY_BASIS_MU_ID = #{SL_BON_PAY_BASIS_MU_ID};
				DELETE FROM SL_SALARY_MANAGE WHERE SL_BON_PAY_BASIS_MU_ID = #{SL_BON_PAY_BASIS_MU_ID};
			END
		}
	</delete>
	<!-- 요율 기준 조회 -->
	<select id="SEARCH_INSURANCE" parameterType="hashmap" statementType="CALLABLE" resultType="hashmap">
		SELECT 
		SL_SI_INSURANCE_RATE_ID, 
		COMM_CORPORATION_ID, 
		WELFARE_DIVISION_CODE, 
		PAYMENT_MONTH, 
		INSURANCE_RATE, 
		LOWER_LIMIT_PRICE, 
		UPPER_LIMIT_PRICE, 
		NOTE, 
		LIMIT_PRICE
		FROM SL_SI_INSURANCE_RATE
		<![CDATA[
		WHERE PAYMENT_MONTH = (SELECT MAX(B.PAYMENT_MONTH) FROM SL_SI_INSURANCE_RATE B WHERE B.PAYMENT_MONTH   <=   #{S_APPLY_MONTH})
		]]>
		AND WELFARE_DIVISION_CODE = #{S_CODE}
<!--         <if test="v_emp_nm != null and v_emp_nm != '' and v_emp_nm != '%'.toString()"> -->
<!--             and hr_util_pkg.emp_name(B.HR_EMPLOYEE_MASTER_ID, #{v_lang_code}) like '%' || #{v_emp_nm} || '%' -->
<!--         </if> -->
	</select>
	<!-- ******************************************* -->
	<!-- 사원별 사회보험업로드 국민연금 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_SI_NPS_BASIS_UPLOAD" parameterType="hashmap" resultType="hashmap">
		SELECT SL_SI_NPS_BASIS_UPLOAD_ID, 
				COMM_CORPORATION_ID, 
				HR_EMPLOYEE_MASTER_ID, 
				REGISTRATION_NO, 
				SALARY_AMT, OWN_AMT, 
				MONTH_AMT, 
				NPS_AMT, 
				NOTE, 
				APPLY_MONTH,
				EMP_NAME
		FROM SL_SI_NPS_BASIS_UPLOAD
		WHERE APPLY_MONTH = #{v_app_date}
		<if test="v_emp_name != null and v_emp_name != '' and v_emp_name != '%'.toString()">
		  AND EMP_NAME = #{v_emp_name}
		</if>
	</select>
	<!-- ******************************************* -->
	<!-- 사원별 사회보험업로드 건강보험/요양보험 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_SI_NHIS_BASIS_UPLOAD" parameterType="hashmap" resultType="hashmap">
		SELECT SL_SI_NHIS_BASIS_UPLOAD_ID, 
				APPLY_MONTH, 
				B_UNT, 
				GO_CNT, 
				FI, 
				J_NO, 
				EMP_NAME, 
				REGISTRATION_NO, 
				SAYU, 
				JIK, 
				GRADE, 
				SALARY_AMT, 
				NHIS_AMT,
				 NHIS_SAYU, 
				 ST_MON, 
				 ED_MON, 
				 CAL_AMT, 
				 FL_AMT, 
				 YT_AMT, 
				 C_DAY,
				 S_DAY, 
				 NPBS_AMT, 
				 NPBS_SAYU, 
				 NPBS_STMON, 
				 NPBS_EDMON, 
				 NPBS_CAL_AMT, 
				 NPBS_FL_AMT, 
				 NPBS_YT_AMT, 
				 TOT_AMT1, 
				 TOT_AMT2, 
				 TOT_AMT3, 
				 H_RE_AMT, 
				 N_RE_AMT, 
				 TOTAL_AMT,
				 MANAGE_NO
		FROM SL_SI_NHIS_BASIS_UPLOAD
		WHERE APPLY_MONTH = #{v_app_date}
		<if test="v_emp_name != null and v_emp_name != '' and v_emp_name != '%'.toString()">
		  AND EMP_NAME = #{v_emp_name}
		</if>
	</select>
	<!-- ******************************************* -->
	<!-- 사원별 사회보험업로드 고용보험 조회 -->
	<!-- ******************************************* -->
	<select id="S_SL_SI_EI_BASIS_UPLOAD" parameterType="hashmap" resultType="hashmap">
		SELECT SL_SI_EI_BASIS_UPLOAD_ID, 
			APPLY_MONTH,
			EI_NO, 
			EMP_DIV, 
			EMP_NAME, 
			REGISTRATION_NO, 
			EMP_EINUMBER, 
			EMP_STDT, 
			EMP_EDDT, 
			EMP_MONAVG, 
			SALAY_AMT, 
			EIMON_AMT1, 
			EIMON_AMT2, 
			EIMON_AMT3, 
			EIYEAR_AMT1, 
			EIYEAR_AMT2, 
			EIYEAR_AMT3, 
			EISAL_AMT, 
			EI_CALMAT1, 
			EI_CALMAT2, 
			EI_CALMAT3, 
			EI_TOTAMT1, 
			EI_TOTAMT2, 
			EI_TOTAMT3
		FROM SL_SI_EI_BASIS_UPLOAD
		WHERE APPLY_MONTH = #{v_app_date}
		<if test="v_emp_name != null and v_emp_name != '' and v_emp_name != '%'.toString()">
		  AND EMP_NAME = #{v_emp_name}
		</if>
	</select>
	
	<select id="S_SL_INSURANCE_SETTING" parameterType="hashmap" resultType="hashmap">
		SELECT  
			SL_BI_INSURANCE_SETTING_ID,
			INSURANCE_SETTING_CODE AS INSURANCE_CODE
		FROM SL_BI_INSURANCE_SETTING
	</select>
	
	<insert id="P_I_INS_SET" parameterType="hashmap" statementType="CALLABLE" >
		INSERT INTO SL_BI_INSURANCE_SETTING
		(
			SL_BI_INSURANCE_SETTING_ID, 
			INSURANCE_SETTING_CODE
		)
		VALUES
		(
			SL_BI_INSURANCE_SETTING_S.NEXTVAL, 
			#{INSURANCE_CODE}
		)
	</insert>
	<update id="P_U_INS_SET" parameterType="hashmap" statementType="CALLABLE" >
		  UPDATE SL_BI_INSURANCE_SETTING SET
		  	INSURANCE_SETTING_CODE = #{INSURANCE_CODE}
		  WHERE SL_BI_INSURANCE_SETTING_ID = #{SL_BI_INSURANCE_SETTING_ID}
	</update>
</mapper>


















